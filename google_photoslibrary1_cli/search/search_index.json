{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The photoslibrary1 command-line interface (CLI) allows to use most features of the Google Photos Library service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the Photos Library API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-photoslibrary1-cli Find the source code on github . Usage This documentation was generated from the Photos Library API at revision 20240223 . The CLI is at version 5.0.4 . photoslibrary1 [options] albums add-enrichment <album-id> (-r <kv>)... [-p <v>]... [-o <out>] batch-add-media-items <album-id> (-r <kv>)... [-p <v>]... [-o <out>] batch-remove-media-items <album-id> (-r <kv>)... [-p <v>]... [-o <out>] create (-r <kv>)... [-p <v>]... [-o <out>] get <album-id> [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] patch <id> (-r <kv>)... [-p <v>]... [-o <out>] share <album-id> (-r <kv>)... [-p <v>]... [-o <out>] unshare <album-id> (-r <kv>)... [-p <v>]... [-o <out>] media-items batch-create (-r <kv>)... [-p <v>]... [-o <out>] batch-get [-p <v>]... [-o <out>] get <media-item-id> [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] patch <id> (-r <kv>)... [-p <v>]... [-o <out>] search (-r <kv>)... [-p <v>]... [-o <out>] shared-albums get <share-token> [-p <v>]... [-o <out>] join (-r <kv>)... [-p <v>]... [-o <out>] leave (-r <kv>)... [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] photoslibrary1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with photoslibrary1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/photoslibrary1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/photoslibrary1-secret.json , assuming that the required photoslibrary API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. photoslibrary1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-photoslibrary1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the Photos Library API at revision 20240223 . The CLI is at version 5.0.4 . photoslibrary1 [options] albums add-enrichment <album-id> (-r <kv>)... [-p <v>]... [-o <out>] batch-add-media-items <album-id> (-r <kv>)... [-p <v>]... [-o <out>] batch-remove-media-items <album-id> (-r <kv>)... [-p <v>]... [-o <out>] create (-r <kv>)... [-p <v>]... [-o <out>] get <album-id> [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] patch <id> (-r <kv>)... [-p <v>]... [-o <out>] share <album-id> (-r <kv>)... [-p <v>]... [-o <out>] unshare <album-id> (-r <kv>)... [-p <v>]... [-o <out>] media-items batch-create (-r <kv>)... [-p <v>]... [-o <out>] batch-get [-p <v>]... [-o <out>] get <media-item-id> [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] patch <id> (-r <kv>)... [-p <v>]... [-o <out>] search (-r <kv>)... [-p <v>]... [-o <out>] shared-albums get <share-token> [-p <v>]... [-o <out>] join (-r <kv>)... [-p <v>]... [-o <out>] leave (-r <kv>)... [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] photoslibrary1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with photoslibrary1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/photoslibrary1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/photoslibrary1-secret.json , assuming that the required photoslibrary API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. photoslibrary1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"albums_add-enrichment/","text":"Adds an enrichment at a specified position in a defined album. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums add-enrichment ... Required Scalar Argument <album-id> (string) Required. Identifier of the album where the enrichment is to be added. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: AddEnrichmentToAlbumRequest: album-position: position: string relative-enrichment-item-id: string relative-media-item-id: string new-enrichment-item: location-enrichment: location: latlng: latitude: number longitude: number location-name: string map-enrichment: destination: latlng: latitude: number longitude: number location-name: string origin: latlng: latitude: number longitude: number location-name: string text-enrichment: text: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .album-position position=et Type of position, for a media or enrichment item. relative-enrichment-item-id=magna The enrichment item to which the position is relative to. Only used when position type is AFTER_ENRICHMENT_ITEM. relative-media-item-id=no The media item to which the position is relative to. Only used when position type is AFTER_MEDIA_ITEM. ..new-enrichment-item.location-enrichment.location.latlng latitude=0.36584835924937553 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.5857873539022715 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. location-name=sed Name of the location to be displayed. ...map-enrichment.destination.latlng latitude=0.7751996280578802 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.3327893270828187 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. location-name=duo Name of the location to be displayed. ..origin.latlng latitude=0.7896128249156874 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.9217265098962596 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. location-name=gubergren Name of the location to be displayed. ...text-enrichment text=lorem Text for this enrichment item. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Add Enrichment"},{"location":"albums_add-enrichment/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums add-enrichment ...","title":"Scopes"},{"location":"albums_add-enrichment/#required-scalar-argument","text":"<album-id> (string) Required. Identifier of the album where the enrichment is to be added.","title":"Required Scalar Argument"},{"location":"albums_add-enrichment/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: AddEnrichmentToAlbumRequest: album-position: position: string relative-enrichment-item-id: string relative-media-item-id: string new-enrichment-item: location-enrichment: location: latlng: latitude: number longitude: number location-name: string map-enrichment: destination: latlng: latitude: number longitude: number location-name: string origin: latlng: latitude: number longitude: number location-name: string text-enrichment: text: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .album-position position=et Type of position, for a media or enrichment item. relative-enrichment-item-id=magna The enrichment item to which the position is relative to. Only used when position type is AFTER_ENRICHMENT_ITEM. relative-media-item-id=no The media item to which the position is relative to. Only used when position type is AFTER_MEDIA_ITEM. ..new-enrichment-item.location-enrichment.location.latlng latitude=0.36584835924937553 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.5857873539022715 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. location-name=sed Name of the location to be displayed. ...map-enrichment.destination.latlng latitude=0.7751996280578802 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.3327893270828187 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. location-name=duo Name of the location to be displayed. ..origin.latlng latitude=0.7896128249156874 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.9217265098962596 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. location-name=gubergren Name of the location to be displayed. ...text-enrichment text=lorem Text for this enrichment item.","title":"Required Request Value"},{"location":"albums_add-enrichment/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_add-enrichment/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_add-enrichment/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_batch-add-media-items/","text":"Adds one or more media items in a user's Google Photos library to an album. The media items and albums must have been created by the developer via the API. Media items are added to the end of the album. If multiple media items are given, they are added in the order specified in this call. Each album can contain up to 20,000 media items. Only media items that are in the user's library can be added to an album. For albums that are shared, the album must either be owned by the user or the user must have joined the album as a collaborator. Partial success is not supported. The entire request will fail if an invalid media item or album is specified. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums batch-add-media-items ... Required Scalar Argument <album-id> (string) Required. Identifier of the Album that the media items are added to. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchAddMediaItemsToAlbumRequest: media-item-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . media-item-ids=gubergren Required. Identifiers of the MediaItems to be added. The maximum number of media items that can be added in one call is 50. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Batch Add Media Items"},{"location":"albums_batch-add-media-items/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums batch-add-media-items ...","title":"Scopes"},{"location":"albums_batch-add-media-items/#required-scalar-argument","text":"<album-id> (string) Required. Identifier of the Album that the media items are added to.","title":"Required Scalar Argument"},{"location":"albums_batch-add-media-items/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchAddMediaItemsToAlbumRequest: media-item-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . media-item-ids=gubergren Required. Identifiers of the MediaItems to be added. The maximum number of media items that can be added in one call is 50. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"albums_batch-add-media-items/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_batch-add-media-items/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_batch-add-media-items/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_batch-remove-media-items/","text":"Removes one or more media items from a specified album. The media items and the album must have been created by the developer via the API. For albums that are shared, this action is only supported for media items that were added to the album by this user, or for all media items if the album was created by this user. Partial success is not supported. The entire request will fail and no action will be performed on the album if an invalid media item or album is specified. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums batch-remove-media-items ... Required Scalar Argument <album-id> (string) Required. Identifier of the Album that the media items are to be removed from. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchRemoveMediaItemsFromAlbumRequest: media-item-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . media-item-ids=eos Required. Identifiers of the MediaItems to be removed. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be removed in one call is 50. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Batch Remove Media Items"},{"location":"albums_batch-remove-media-items/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums batch-remove-media-items ...","title":"Scopes"},{"location":"albums_batch-remove-media-items/#required-scalar-argument","text":"<album-id> (string) Required. Identifier of the Album that the media items are to be removed from.","title":"Required Scalar Argument"},{"location":"albums_batch-remove-media-items/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchRemoveMediaItemsFromAlbumRequest: media-item-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . media-item-ids=eos Required. Identifiers of the MediaItems to be removed. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be removed in one call is 50. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"albums_batch-remove-media-items/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_batch-remove-media-items/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_batch-remove-media-items/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_create/","text":"Creates an album in a user's Google Photos library. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums create ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CreateAlbumRequest: album: cover-photo-base-url: string cover-photo-media-item-id: string id: string is-writeable: boolean media-items-count: int64 product-url: string share-info: is-joinable: boolean is-joined: boolean is-owned: boolean share-token: string shareable-url: string shared-album-options: is-collaborative: boolean is-commentable: boolean title: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .album cover-photo-base-url=dolor [Output only] A URL to the cover photo's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the developer documentation for a complete list of supported parameters. For example, &#39;=w2048-h1024&#39; sets the dimensions of the cover photo to have a width of 2048 px and height of 1024 px. cover-photo-media-item-id=ea Identifier for the media item associated with the cover photo. id=ipsum Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album. is-writeable=false [Output only] True if you can create media items in this album. This field is based on the scopes granted and permissions of the album. If the scopes are changed or permissions of the album are changed, this field is updated. media-items-count=-47 [Output only] The number of media items in the album. product-url=duo [Output only] Google Photos URL for the album. The user needs to be signed in to their Google Photos account to access this link. share-info is-joinable=true True if the album can be joined by users. is-joined=false True if the user is joined to the album. This is always true for the owner of the album. is-owned=true True if the user owns the album. share-token=ipsum A token that is used to join, leave, or retrieve the details of a shared album on behalf of a user who isn't the owner. A shareToken is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shareable-url=ipsum A link to the shared Google Photos album. Anyone with the link can view the contents of the album, so it should be treated with care. The shareableUrl parameter is only returned if the album has link sharing turned on. If a user is already joined to an album that isn't link-shared, they can use the album's productUrl to access it instead. A shareableUrl is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shared-album-options is-collaborative=true True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false. is-commentable=false True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false. ... title=lorem Name of the album displayed to the user in their Google Photos account. This string shouldn't be more than 500 characters. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Create"},{"location":"albums_create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums create ...","title":"Scopes"},{"location":"albums_create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CreateAlbumRequest: album: cover-photo-base-url: string cover-photo-media-item-id: string id: string is-writeable: boolean media-items-count: int64 product-url: string share-info: is-joinable: boolean is-joined: boolean is-owned: boolean share-token: string shareable-url: string shared-album-options: is-collaborative: boolean is-commentable: boolean title: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .album cover-photo-base-url=dolor [Output only] A URL to the cover photo's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the developer documentation for a complete list of supported parameters. For example, &#39;=w2048-h1024&#39; sets the dimensions of the cover photo to have a width of 2048 px and height of 1024 px. cover-photo-media-item-id=ea Identifier for the media item associated with the cover photo. id=ipsum Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album. is-writeable=false [Output only] True if you can create media items in this album. This field is based on the scopes granted and permissions of the album. If the scopes are changed or permissions of the album are changed, this field is updated. media-items-count=-47 [Output only] The number of media items in the album. product-url=duo [Output only] Google Photos URL for the album. The user needs to be signed in to their Google Photos account to access this link. share-info is-joinable=true True if the album can be joined by users. is-joined=false True if the user is joined to the album. This is always true for the owner of the album. is-owned=true True if the user owns the album. share-token=ipsum A token that is used to join, leave, or retrieve the details of a shared album on behalf of a user who isn't the owner. A shareToken is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shareable-url=ipsum A link to the shared Google Photos album. Anyone with the link can view the contents of the album, so it should be treated with care. The shareableUrl parameter is only returned if the album has link sharing turned on. If a user is already joined to an album that isn't link-shared, they can use the album's productUrl to access it instead. A shareableUrl is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shared-album-options is-collaborative=true True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false. is-commentable=false True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false. ... title=lorem Name of the album displayed to the user in their Google Photos account. This string shouldn't be more than 500 characters.","title":"Required Request Value"},{"location":"albums_create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_get/","text":"Returns the album based on the specified albumId . The albumId must be the ID of an album owned by the user or a shared album that the user has joined. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums get ... Required Scalar Argument <album-id> (string) Required. Identifier of the album to be requested. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"albums_get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums get ...","title":"Scopes"},{"location":"albums_get/#required-scalar-argument","text":"<album-id> (string) Required. Identifier of the album to be requested.","title":"Required Scalar Argument"},{"location":"albums_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_list/","text":"Lists all albums shown to a user in the Albums tab of the Google Photos app. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums list ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p exclude-non-app-created-data=boolean If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used. -p page-size=integer Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default pageSize is 20, the maximum is 50. -p page-token=string A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the listAlbums request. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List"},{"location":"albums_list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums list ...","title":"Scopes"},{"location":"albums_list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p exclude-non-app-created-data=boolean If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used. -p page-size=integer Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default pageSize is 20, the maximum is 50. -p page-token=string A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the listAlbums request.","title":"Optional Method Properties"},{"location":"albums_list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_patch/","text":"Update the album with the specified id . Only the id , title and cover_photo_media_item_id fields of the album are read. The album must have been created by the developer via the API and must be owned by the user. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums patch ... Required Scalar Argument <id> (string) Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Album: cover-photo-base-url: string cover-photo-media-item-id: string id: string is-writeable: boolean media-items-count: int64 product-url: string share-info: is-joinable: boolean is-joined: boolean is-owned: boolean share-token: string shareable-url: string shared-album-options: is-collaborative: boolean is-commentable: boolean title: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . cover-photo-base-url=eos [Output only] A URL to the cover photo's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the developer documentation for a complete list of supported parameters. For example, &#39;=w2048-h1024&#39; sets the dimensions of the cover photo to have a width of 2048 px and height of 1024 px. cover-photo-media-item-id=labore Identifier for the media item associated with the cover photo. id=sed Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album. is-writeable=false [Output only] True if you can create media items in this album. This field is based on the scopes granted and permissions of the album. If the scopes are changed or permissions of the album are changed, this field is updated. media-items-count=-80 [Output only] The number of media items in the album. product-url=no [Output only] Google Photos URL for the album. The user needs to be signed in to their Google Photos account to access this link. share-info is-joinable=true True if the album can be joined by users. is-joined=true True if the user is joined to the album. This is always true for the owner of the album. is-owned=false True if the user owns the album. share-token=erat A token that is used to join, leave, or retrieve the details of a shared album on behalf of a user who isn't the owner. A shareToken is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shareable-url=sed A link to the shared Google Photos album. Anyone with the link can view the contents of the album, so it should be treated with care. The shareableUrl parameter is only returned if the album has link sharing turned on. If a user is already joined to an album that isn't link-shared, they can use the album's productUrl to access it instead. A shareableUrl is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shared-album-options is-collaborative=false True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false. is-commentable=false True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false. ... title=dolor Name of the album displayed to the user in their Google Photos account. This string shouldn't be more than 500 characters. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Required. Indicate what fields in the provided album to update. The only valid values are title and cover_photo_media_item_id . Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Patch"},{"location":"albums_patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums patch ...","title":"Scopes"},{"location":"albums_patch/#required-scalar-argument","text":"<id> (string) Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album.","title":"Required Scalar Argument"},{"location":"albums_patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Album: cover-photo-base-url: string cover-photo-media-item-id: string id: string is-writeable: boolean media-items-count: int64 product-url: string share-info: is-joinable: boolean is-joined: boolean is-owned: boolean share-token: string shareable-url: string shared-album-options: is-collaborative: boolean is-commentable: boolean title: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . cover-photo-base-url=eos [Output only] A URL to the cover photo's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the developer documentation for a complete list of supported parameters. For example, &#39;=w2048-h1024&#39; sets the dimensions of the cover photo to have a width of 2048 px and height of 1024 px. cover-photo-media-item-id=labore Identifier for the media item associated with the cover photo. id=sed Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album. is-writeable=false [Output only] True if you can create media items in this album. This field is based on the scopes granted and permissions of the album. If the scopes are changed or permissions of the album are changed, this field is updated. media-items-count=-80 [Output only] The number of media items in the album. product-url=no [Output only] Google Photos URL for the album. The user needs to be signed in to their Google Photos account to access this link. share-info is-joinable=true True if the album can be joined by users. is-joined=true True if the user is joined to the album. This is always true for the owner of the album. is-owned=false True if the user owns the album. share-token=erat A token that is used to join, leave, or retrieve the details of a shared album on behalf of a user who isn't the owner. A shareToken is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shareable-url=sed A link to the shared Google Photos album. Anyone with the link can view the contents of the album, so it should be treated with care. The shareableUrl parameter is only returned if the album has link sharing turned on. If a user is already joined to an album that isn't link-shared, they can use the album's productUrl to access it instead. A shareableUrl is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared. shared-album-options is-collaborative=false True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false. is-commentable=false True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false. ... title=dolor Name of the album displayed to the user in their Google Photos account. This string shouldn't be more than 500 characters.","title":"Required Request Value"},{"location":"albums_patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Required. Indicate what fields in the provided album to update. The only valid values are title and cover_photo_media_item_id .","title":"Optional Method Properties"},{"location":"albums_patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_share/","text":"Marks an album as shared and accessible to other users. This action can only be performed on albums which were created by the developer via the API. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums share ... Required Scalar Argument <album-id> (string) Required. Identifier of the album to be shared. This albumId must belong to an album created by the developer. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ShareAlbumRequest: shared-album-options: is-collaborative: boolean is-commentable: boolean can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .shared-album-options is-collaborative=false True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false. is-commentable=false True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Share"},{"location":"albums_share/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums share ...","title":"Scopes"},{"location":"albums_share/#required-scalar-argument","text":"<album-id> (string) Required. Identifier of the album to be shared. This albumId must belong to an album created by the developer.","title":"Required Scalar Argument"},{"location":"albums_share/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ShareAlbumRequest: shared-album-options: is-collaborative: boolean is-commentable: boolean can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .shared-album-options is-collaborative=false True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false. is-commentable=false True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false.","title":"Required Request Value"},{"location":"albums_share/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_share/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_share/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"albums_unshare/","text":"Marks a previously shared album as private. This means that the album is no longer shared and all the non-owners will lose access to the album. All non-owner content will be removed from the album. If a non-owner has previously added the album to their library, they will retain all photos in their library. This action can only be performed on albums which were created by the developer via the API. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums unshare ... Required Scalar Argument <album-id> (string) Required. Identifier of the album to be unshared. This album id must belong to an album created by the developer. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: UnshareAlbumRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Unshare"},{"location":"albums_unshare/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> albums unshare ...","title":"Scopes"},{"location":"albums_unshare/#required-scalar-argument","text":"<album-id> (string) Required. Identifier of the album to be unshared. This album id must belong to an album created by the developer.","title":"Required Scalar Argument"},{"location":"albums_unshare/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: UnshareAlbumRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"albums_unshare/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"albums_unshare/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"albums_unshare/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"media-items_batch-create/","text":"Creates one or more media items in a user's Google Photos library. This is the second step for creating a media item. For details regarding Step 1, uploading the raw bytes to a Google Server, see Uploading media. This call adds the media item to the library. If an album id is specified, the call adds the media item to the album too. Each album can contain up to 20,000 media items. By default, the media item will be added to the end of the library or album. If an album id and position are both defined, the media item is added to the album at the specified position. If the call contains multiple media items, they're added at the specified position. If you are creating a media item in a shared album where you are not the owner, you are not allowed to position the media item. Doing so will result in a BAD REQUEST error. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items batch-create ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchCreateMediaItemsRequest: album-id: string album-position: position: string relative-enrichment-item-id: string relative-media-item-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . album-id=duo Identifier of the album where the media items are added. The media items are also added to the user's library. This is an optional field. album-position position=vero Type of position, for a media or enrichment item. relative-enrichment-item-id=vero The enrichment item to which the position is relative to. Only used when position type is AFTER_ENRICHMENT_ITEM. relative-media-item-id=invidunt The media item to which the position is relative to. Only used when position type is AFTER_MEDIA_ITEM. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Batch Create"},{"location":"media-items_batch-create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.appendonly https://www.googleapis.com/auth/photoslibrary.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items batch-create ...","title":"Scopes"},{"location":"media-items_batch-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchCreateMediaItemsRequest: album-id: string album-position: position: string relative-enrichment-item-id: string relative-media-item-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . album-id=duo Identifier of the album where the media items are added. The media items are also added to the user's library. This is an optional field. album-position position=vero Type of position, for a media or enrichment item. relative-enrichment-item-id=vero The enrichment item to which the position is relative to. Only used when position type is AFTER_ENRICHMENT_ITEM. relative-media-item-id=invidunt The media item to which the position is relative to. Only used when position type is AFTER_MEDIA_ITEM.","title":"Required Request Value"},{"location":"media-items_batch-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"media-items_batch-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"media-items_batch-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"media-items_batch-get/","text":"Returns the list of media items for the specified media item identifiers. Items are returned in the same order as the supplied identifiers. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items batch-get ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p media-item-ids=string Required. Identifiers of the media items to be requested. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be retrieved in one call is 50. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Batch Get"},{"location":"media-items_batch-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items batch-get ...","title":"Scopes"},{"location":"media-items_batch-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"media-items_batch-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p media-item-ids=string Required. Identifiers of the media items to be requested. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be retrieved in one call is 50.","title":"Optional Method Properties"},{"location":"media-items_batch-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"media-items_get/","text":"Returns the media item for the specified media item identifier. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items get ... Required Scalar Argument <media-item-id> (string) Required. Identifier of the media item to be requested. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"media-items_get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items get ...","title":"Scopes"},{"location":"media-items_get/#required-scalar-argument","text":"<media-item-id> (string) Required. Identifier of the media item to be requested.","title":"Required Scalar Argument"},{"location":"media-items_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"media-items_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"media-items_list/","text":"List all media items from a user's Google Photos library. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items list ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default pageSize is 25, the maximum is 100. -p page-token=string A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the listMediaItems request. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List"},{"location":"media-items_list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items list ...","title":"Scopes"},{"location":"media-items_list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"media-items_list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default pageSize is 25, the maximum is 100. -p page-token=string A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the listMediaItems request.","title":"Optional Method Properties"},{"location":"media-items_list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"media-items_patch/","text":"Update the media item with the specified id . Only the id and description fields of the media item are read. The media item must have been created by the developer via the API and must be owned by the user. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items patch ... Required Scalar Argument <id> (string) Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: MediaItem: base-url: string contributor-info: display-name: string profile-picture-base-url: string description: string filename: string id: string media-metadata: creation-time: string height: string photo: aperture-f-number: number camera-make: string camera-model: string exposure-time: string focal-length: number iso-equivalent: integer video: camera-make: string camera-model: string fps: number status: string width: string mime-type: string product-url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . base-url=stet A URL to the media item's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the developer documentation for a complete list of supported parameters. For example, &#39;=w2048-h1024&#39; will set the dimensions of a media item of type photo to have a width of 2048 px and height of 1024 px. contributor-info display-name=vero Display name of the contributor. profile-picture-base-url=elitr URL to the profile picture of the contributor. .. description=lorem Description of the media item. This is shown to the user in the item's info section in the Google Photos app. Must be shorter than 1000 characters. Only include text written by users. Descriptions should add context and help users understand media. Do not include any auto-generated strings such as filenames, tags, and other metadata. filename=diam Filename of the media item. This is shown to the user in the item's info section in the Google Photos app. id=no Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item. media-metadata creation-time=ipsum Time when the media item was first created (not when it was uploaded to Google Photos). height=accusam Original height (in pixels) of the media item. photo aperture-f-number=0.333591971041029 Aperture f number of the camera lens with which the photo was taken. camera-make=voluptua. Brand of the camera with which the photo was taken. camera-model=et Model of the camera with which the photo was taken. exposure-time=erat Exposure time of the camera aperture when the photo was taken. focal-length=0.04583256524798884 Focal length of the camera lens with which the photo was taken. iso-equivalent=71 ISO of the camera with which the photo was taken. ..video camera-make=takimata Brand of the camera with which the video was taken. camera-model=dolores Model of the camera with which the video was taken. fps=0.3072987560065821 Frame rate of the video. status=et Processing status of the video. .. width=accusam Original width (in pixels) of the media item. .. mime-type=voluptua. MIME type of the media item. For example, image/jpeg . product-url=dolore Google Photos URL for the media item. This link is available to the user only if they're signed in. When retrieved from an album search, the URL points to the item inside the album. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Required. Indicate what fields in the provided media item to update. The only valid value is description . Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Patch"},{"location":"media-items_patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items patch ...","title":"Scopes"},{"location":"media-items_patch/#required-scalar-argument","text":"<id> (string) Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item.","title":"Required Scalar Argument"},{"location":"media-items_patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: MediaItem: base-url: string contributor-info: display-name: string profile-picture-base-url: string description: string filename: string id: string media-metadata: creation-time: string height: string photo: aperture-f-number: number camera-make: string camera-model: string exposure-time: string focal-length: number iso-equivalent: integer video: camera-make: string camera-model: string fps: number status: string width: string mime-type: string product-url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . base-url=stet A URL to the media item's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the developer documentation for a complete list of supported parameters. For example, &#39;=w2048-h1024&#39; will set the dimensions of a media item of type photo to have a width of 2048 px and height of 1024 px. contributor-info display-name=vero Display name of the contributor. profile-picture-base-url=elitr URL to the profile picture of the contributor. .. description=lorem Description of the media item. This is shown to the user in the item's info section in the Google Photos app. Must be shorter than 1000 characters. Only include text written by users. Descriptions should add context and help users understand media. Do not include any auto-generated strings such as filenames, tags, and other metadata. filename=diam Filename of the media item. This is shown to the user in the item's info section in the Google Photos app. id=no Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item. media-metadata creation-time=ipsum Time when the media item was first created (not when it was uploaded to Google Photos). height=accusam Original height (in pixels) of the media item. photo aperture-f-number=0.333591971041029 Aperture f number of the camera lens with which the photo was taken. camera-make=voluptua. Brand of the camera with which the photo was taken. camera-model=et Model of the camera with which the photo was taken. exposure-time=erat Exposure time of the camera aperture when the photo was taken. focal-length=0.04583256524798884 Focal length of the camera lens with which the photo was taken. iso-equivalent=71 ISO of the camera with which the photo was taken. ..video camera-make=takimata Brand of the camera with which the video was taken. camera-model=dolores Model of the camera with which the video was taken. fps=0.3072987560065821 Frame rate of the video. status=et Processing status of the video. .. width=accusam Original width (in pixels) of the media item. .. mime-type=voluptua. MIME type of the media item. For example, image/jpeg . product-url=dolore Google Photos URL for the media item. This link is available to the user only if they're signed in. When retrieved from an album search, the URL points to the item inside the album.","title":"Required Request Value"},{"location":"media-items_patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"media-items_patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"media-items_patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Required. Indicate what fields in the provided media item to update. The only valid value is description .","title":"Optional Method Properties"},{"location":"media-items_patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"media-items_search/","text":"Searches for media items in a user's Google Photos library. If no filters are set, then all media items in the user's library are returned. If an album is set, all media items in the specified album are returned. If filters are specified, media items that match the filters from the user's library are listed. If you set both the album and the filters, the request results in an error. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items search ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SearchMediaItemsRequest: album-id: string filters: content-filter: excluded-content-categories: [string] included-content-categories: [string] exclude-non-app-created-data: boolean feature-filter: included-features: [string] include-archived-media: boolean media-type-filter: media-types: [string] order-by: string page-size: integer page-token: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . album-id=dolore Identifier of an album. If populated, lists all media items in specified album. Can't set in conjunction with any filters. filters.content-filter excluded-content-categories=dolore The set of categories which are not to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 excludedContentCategories per request. Each invocation of this argument appends the given value to the array. included-content-categories=voluptua. The set of categories to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 includedContentCategories per request. Each invocation of this argument appends the given value to the array. .. exclude-non-app-created-data=false If set, the results exclude media items that were not created by this app. Defaults to false (all media items are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used. feature-filter included-features=lorem The set of features to be included in the media item search results. The items in the set are ORed and may match any of the specified features. Each invocation of this argument appends the given value to the array. .. include-archived-media=true If set, the results include media items that the user has archived. Defaults to false (archived media items aren't included). media-type-filter media-types=no The types of media items to be included. This field should be populated with only one media type. If you specify multiple media types, it results in an error. Each invocation of this argument appends the given value to the array. ... order-by=est An optional field to specify the sort order of the search results. The orderBy field only works when a dateFilter is used. When this field is not specified, results are displayed newest first, oldest last by their creationTime. Providing MediaMetadata.creation_time displays search results in the opposite order, oldest first then newest last. To display results newest first then oldest last, include the desc argument as follows: MediaMetadata.creation_time desc . The only additional filters that can be used with this parameter are includeArchivedMedia and excludeNonAppCreatedData. No other filters are supported. page-size=74 Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default pageSize is 25, the maximum is 100. page-token=sed A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the searchMediaItems request. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Search"},{"location":"media-items_search/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary . You can set the scope for this method like this: photoslibrary1 --scope <scope> media-items search ...","title":"Scopes"},{"location":"media-items_search/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SearchMediaItemsRequest: album-id: string filters: content-filter: excluded-content-categories: [string] included-content-categories: [string] exclude-non-app-created-data: boolean feature-filter: included-features: [string] include-archived-media: boolean media-type-filter: media-types: [string] order-by: string page-size: integer page-token: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . album-id=dolore Identifier of an album. If populated, lists all media items in specified album. Can't set in conjunction with any filters. filters.content-filter excluded-content-categories=dolore The set of categories which are not to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 excludedContentCategories per request. Each invocation of this argument appends the given value to the array. included-content-categories=voluptua. The set of categories to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 includedContentCategories per request. Each invocation of this argument appends the given value to the array. .. exclude-non-app-created-data=false If set, the results exclude media items that were not created by this app. Defaults to false (all media items are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used. feature-filter included-features=lorem The set of features to be included in the media item search results. The items in the set are ORed and may match any of the specified features. Each invocation of this argument appends the given value to the array. .. include-archived-media=true If set, the results include media items that the user has archived. Defaults to false (archived media items aren't included). media-type-filter media-types=no The types of media items to be included. This field should be populated with only one media type. If you specify multiple media types, it results in an error. Each invocation of this argument appends the given value to the array. ... order-by=est An optional field to specify the sort order of the search results. The orderBy field only works when a dateFilter is used. When this field is not specified, results are displayed newest first, oldest last by their creationTime. Providing MediaMetadata.creation_time displays search results in the opposite order, oldest first then newest last. To display results newest first then oldest last, include the desc argument as follows: MediaMetadata.creation_time desc . The only additional filters that can be used with this parameter are includeArchivedMedia and excludeNonAppCreatedData. No other filters are supported. page-size=74 Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default pageSize is 25, the maximum is 100. page-token=sed A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the searchMediaItems request.","title":"Required Request Value"},{"location":"media-items_search/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"media-items_search/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"media-items_search/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"shared-albums_get/","text":"Returns the album based on the specified shareToken . Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums get ... Required Scalar Argument <share-token> (string) Required. Share token of the album to be requested. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"shared-albums_get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums get ...","title":"Scopes"},{"location":"shared-albums_get/#required-scalar-argument","text":"<share-token> (string) Required. Share token of the album to be requested.","title":"Required Scalar Argument"},{"location":"shared-albums_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"shared-albums_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"shared-albums_join/","text":"Joins a shared album on behalf of the Google Photos user. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums join ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: JoinSharedAlbumRequest: share-token: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . share-token=sit Required. Token to join the shared album on behalf of the user. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Join"},{"location":"shared-albums_join/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums join ...","title":"Scopes"},{"location":"shared-albums_join/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: JoinSharedAlbumRequest: share-token: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . share-token=sit Required. Token to join the shared album on behalf of the user.","title":"Required Request Value"},{"location":"shared-albums_join/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"shared-albums_join/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"shared-albums_join/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"shared-albums_leave/","text":"Leaves a previously-joined shared album on behalf of the Google Photos user. The user must not own this album. Scopes You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums leave ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LeaveSharedAlbumRequest: share-token: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . share-token=et Required. Token to leave the shared album on behalf of the user. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Leave"},{"location":"shared-albums_leave/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/photoslibrary.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.sharing . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums leave ...","title":"Scopes"},{"location":"shared-albums_leave/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LeaveSharedAlbumRequest: share-token: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . share-token=et Required. Token to leave the shared album on behalf of the user.","title":"Required Request Value"},{"location":"shared-albums_leave/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"shared-albums_leave/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"shared-albums_leave/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"shared-albums_list/","text":"Lists all shared albums available in the Sharing tab of the user's Google Photos app. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums list ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p exclude-non-app-created-data=boolean If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used. -p page-size=integer Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default pageSize is 20, the maximum is 50. -p page-token=string A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the listSharedAlbums request. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List"},{"location":"shared-albums_list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata If unset, the scope for this method defaults to https://www.googleapis.com/auth/photoslibrary.readonly . You can set the scope for this method like this: photoslibrary1 --scope <scope> shared-albums list ...","title":"Scopes"},{"location":"shared-albums_list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"shared-albums_list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p exclude-non-app-created-data=boolean If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used. -p page-size=integer Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default pageSize is 20, the maximum is 50. -p page-token=string A continuation token to get the next page of the results. Adding this to the request returns the rows after the pageToken . The pageToken should be the value returned in the nextPageToken parameter in the response to the listSharedAlbums request.","title":"Optional Method Properties"},{"location":"shared-albums_list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}