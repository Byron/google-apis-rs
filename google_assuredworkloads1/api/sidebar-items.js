initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["Assuredworkloads","Central instance to access all Assuredworkloads related resource activities"],["GoogleCloudAssuredworkloadsV1ListWorkloadsResponse","Response of ListWorkloads endpoint."],["GoogleCloudAssuredworkloadsV1Workload","An Workload object for managing highly regulated workloads of cloud customers."],["GoogleCloudAssuredworkloadsV1WorkloadKMSSettings","Settings specific to the Key Management Service."],["GoogleCloudAssuredworkloadsV1WorkloadResourceInfo","Represent the resources that are children of this Workload."],["GoogleLongrunningListOperationsResponse","The response message for Operations.ListOperations."],["GoogleLongrunningOperation","This resource represents a long-running operation that is the result of a network API call."],["GoogleProtobufEmpty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["GoogleRpcStatus","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."],["OrganizationLocationOperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."],["OrganizationLocationOperationListCall","Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."],["OrganizationLocationWorkloadCreateCall","Creates Assured Workload."],["OrganizationLocationWorkloadDeleteCall","Deletes the workload. Make sure that workload's direct children are already in a deleted state, otherwise the request will fail with a FAILED_PRECONDITION error."],["OrganizationLocationWorkloadGetCall","Gets Assured Workload associated with a CRM Node"],["OrganizationLocationWorkloadListCall","Lists Assured Workloads under a CRM Node."],["OrganizationLocationWorkloadPatchCall","Updates an existing workload. Currently allows updating of workload display_name and labels. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress."],["OrganizationMethods","A builder providing access to all methods supported on organization resources. It is not used directly, but through the `Assuredworkloads` hub."]]});