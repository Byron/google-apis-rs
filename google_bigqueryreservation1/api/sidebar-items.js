initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["Assignment","A Assignment allows a project to submit jobs of a certain type using slots from the specified reservation."],["BiReservation","Represents a BI Reservation."],["BigQueryReservation","Central instance to access all BigQueryReservation related resource activities"],["CapacityCommitment","Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["ListAssignmentsResponse","The response for ReservationService.ListAssignments."],["ListCapacityCommitmentsResponse","The response for ReservationService.ListCapacityCommitments."],["ListReservationsResponse","The response for ReservationService.ListReservations."],["MergeCapacityCommitmentsRequest","The request for ReservationService.MergeCapacityCommitments."],["MoveAssignmentRequest","The request for ReservationService.MoveAssignment. Note: \"bigquery.reservationAssignments.create\" permission is required on the destination_id. Note: \"bigquery.reservationAssignments.create\" and \"bigquery.reservationAssignments.delete\" permission are required on the related assignee."],["ProjectLocationCapacityCommitmentCreateCall","Creates a new capacity commitment resource."],["ProjectLocationCapacityCommitmentDeleteCall","Deletes a capacity commitment. Attempting to delete capacity commitment before its commitment_end_time will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`."],["ProjectLocationCapacityCommitmentGetCall","Returns information about the capacity commitment."],["ProjectLocationCapacityCommitmentListCall","Lists all the capacity commitments for the admin project."],["ProjectLocationCapacityCommitmentMergeCall","Merges capacity commitments of the same plan into a single commitment. The resulting capacity commitment has the greater commitment_end_time out of the to-be-merged capacity commitments. Attempting to merge capacity commitments of different plan will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`."],["ProjectLocationCapacityCommitmentPatchCall","Updates an existing capacity commitment. Only `plan` and `renewal_plan` fields can be updated. Plan can only be changed to a plan of a longer commitment period. Attempting to change to a plan with shorter commitment period will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`."],["ProjectLocationCapacityCommitmentSplitCall","Splits capacity commitment to two commitments of the same plan and `commitment_end_time`. A common use case is to enable downgrading commitments. For example, in order to downgrade from 10000 slots to 8000, you might split a 10000 capacity commitment into commitments of 2000 and 8000. Then, you would change the plan of the first one to `FLEX` and then delete it."],["ProjectLocationGetBiReservationCall","Retrieves a BI reservation."],["ProjectLocationReservationAssignmentCreateCall","Creates an assignment object which allows the given project to submit jobs of a certain type using slots from the specified reservation. Currently a resource (project, folder, organization) can only have one assignment per each (job_type, location) combination, and that reservation will be used for all jobs of the matching type. Different assignments can be created on different levels of the projects, folders or organization hierarchy. During query execution, the assignment is looked up at the project, folder and organization levels in that order. The first assignment found is applied to the query. When creating assignments, it does not matter if other assignments exist at higher levels. Example: * The organization `organizationA` contains two projects, `project1` and `project2`. * Assignments for all three entities (`organizationA`, `project1`, and `project2`) could all be created and mapped to the same or different reservations. \"None\" assignments represent an absence of the assignment. Projects assigned to None use on-demand pricing. To create a \"None\" assignment, use \"none\" as a reservation_id in the parent. Example parent: `projects/myproject/locations/US/reservations/none`. Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have 'bigquery.admin' permissions on the project using the reservation and the project that owns this reservation. Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment does not match location of the reservation."],["ProjectLocationReservationAssignmentDeleteCall","Deletes a assignment. No expansion will happen. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `and` In this example, deletion of the `assignment won't affect the other assignment`. After said deletion, queries from `project1` will still use `res1` while queries from `project2` will switch to use on-demand mode."],["ProjectLocationReservationAssignmentListCall","Lists assignments. Only explicitly created assignments will be returned. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `and` In this example, ListAssignments will just return the above two assignments for reservation `res1`, and no expansion/merge will happen. The wildcard \"-\" can be used for reservations in the request. In that case all assignments belongs to the specified project and location will be listed. Note \"-\" cannot be used for projects nor locations."],["ProjectLocationReservationAssignmentMoveCall","Moves an assignment under a new reservation. This differs from removing an existing assignment and recreating a new one by providing a transactional change that ensures an assignee always has an associated reservation."],["ProjectLocationReservationCreateCall","Creates a new reservation resource."],["ProjectLocationReservationDeleteCall","Deletes a reservation. Returns `google.rpc.Code.FAILED_PRECONDITION` when reservation has assignments."],["ProjectLocationReservationGetCall","Returns information about the reservation."],["ProjectLocationReservationListCall","Lists all the reservations for the project in the specified location."],["ProjectLocationReservationPatchCall","Updates an existing reservation resource."],["ProjectLocationSearchAllAssignmentCall","Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`."],["ProjectLocationSearchAssignmentCall","Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`. Note \"-\" cannot be used for projects nor locations."],["ProjectLocationUpdateBiReservationCall","Updates a BI reservation. Only fields specified in the `field_mask` are updated. A singleton BI reservation always exists with default size 0. In order to reserve BI capacity it needs to be updated to an amount greater than 0. In order to release BI capacity reservation size must be set to 0."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `BigQueryReservation` hub."],["Reservation","A reservation is a mechanism used to guarantee slots to users."],["SearchAllAssignmentsResponse","The response for ReservationService.SearchAllAssignments."],["SearchAssignmentsResponse","The response for ReservationService.SearchAssignments."],["SplitCapacityCommitmentRequest","The request for ReservationService.SplitCapacityCommitment."],["SplitCapacityCommitmentResponse","The response for ReservationService.SplitCapacityCommitment."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."]]});