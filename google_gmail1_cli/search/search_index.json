{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The gmail1 command-line interface (CLI) allows to use most features of the Google Gmail service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the Gmail API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-gmail1-cli Find the source code on github . Usage This documentation was generated from the Gmail API at revision 20240226 . The CLI is at version 5.0.4 . gmail1 [options] users drafts-create <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] drafts-delete <user-id> <id> [-p <v>]... drafts-get <user-id> <id> [-p <v>]... [-o <out>] drafts-list <user-id> [-p <v>]... [-o <out>] drafts-send <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] drafts-update <user-id> <id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] get-profile <user-id> [-p <v>]... [-o <out>] history-list <user-id> [-p <v>]... [-o <out>] labels-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] labels-delete <user-id> <id> [-p <v>]... labels-get <user-id> <id> [-p <v>]... [-o <out>] labels-list <user-id> [-p <v>]... [-o <out>] labels-patch <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] labels-update <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] messages-attachments-get <user-id> <message-id> <id> [-p <v>]... [-o <out>] messages-batch-delete <user-id> (-r <kv>)... [-p <v>]... messages-batch-modify <user-id> (-r <kv>)... [-p <v>]... messages-delete <user-id> <id> [-p <v>]... messages-get <user-id> <id> [-p <v>]... [-o <out>] messages-import <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] messages-insert <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] messages-list <user-id> [-p <v>]... [-o <out>] messages-modify <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] messages-send <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] messages-trash <user-id> <id> [-p <v>]... [-o <out>] messages-untrash <user-id> <id> [-p <v>]... [-o <out>] settings-cse-identities-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-identities-delete <user-id> <cse-email-address> [-p <v>]... settings-cse-identities-get <user-id> <cse-email-address> [-p <v>]... [-o <out>] settings-cse-identities-list <user-id> [-p <v>]... [-o <out>] settings-cse-identities-patch <user-id> <email-address> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-disable <user-id> <key-pair-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-enable <user-id> <key-pair-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-get <user-id> <key-pair-id> [-p <v>]... [-o <out>] settings-cse-keypairs-list <user-id> [-p <v>]... [-o <out>] settings-cse-keypairs-obliterate <user-id> <key-pair-id> (-r <kv>)... [-p <v>]... settings-delegates-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-delegates-delete <user-id> <delegate-email> [-p <v>]... settings-delegates-get <user-id> <delegate-email> [-p <v>]... [-o <out>] settings-delegates-list <user-id> [-p <v>]... [-o <out>] settings-filters-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-filters-delete <user-id> <id> [-p <v>]... settings-filters-get <user-id> <id> [-p <v>]... [-o <out>] settings-filters-list <user-id> [-p <v>]... [-o <out>] settings-forwarding-addresses-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-forwarding-addresses-delete <user-id> <forwarding-email> [-p <v>]... settings-forwarding-addresses-get <user-id> <forwarding-email> [-p <v>]... [-o <out>] settings-forwarding-addresses-list <user-id> [-p <v>]... [-o <out>] settings-get-auto-forwarding <user-id> [-p <v>]... [-o <out>] settings-get-imap <user-id> [-p <v>]... [-o <out>] settings-get-language <user-id> [-p <v>]... [-o <out>] settings-get-pop <user-id> [-p <v>]... [-o <out>] settings-get-vacation <user-id> [-p <v>]... [-o <out>] settings-send-as-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-delete <user-id> <send-as-email> [-p <v>]... settings-send-as-get <user-id> <send-as-email> [-p <v>]... [-o <out>] settings-send-as-list <user-id> [-p <v>]... [-o <out>] settings-send-as-patch <user-id> <send-as-email> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-smime-info-delete <user-id> <send-as-email> <id> [-p <v>]... settings-send-as-smime-info-get <user-id> <send-as-email> <id> [-p <v>]... [-o <out>] settings-send-as-smime-info-insert <user-id> <send-as-email> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-smime-info-list <user-id> <send-as-email> [-p <v>]... [-o <out>] settings-send-as-smime-info-set-default <user-id> <send-as-email> <id> [-p <v>]... settings-send-as-update <user-id> <send-as-email> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-verify <user-id> <send-as-email> [-p <v>]... settings-update-auto-forwarding <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-imap <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-language <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-pop <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-vacation <user-id> (-r <kv>)... [-p <v>]... [-o <out>] stop <user-id> [-p <v>]... threads-delete <user-id> <id> [-p <v>]... threads-get <user-id> <id> [-p <v>]... [-o <out>] threads-list <user-id> [-p <v>]... [-o <out>] threads-modify <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] threads-trash <user-id> <id> [-p <v>]... [-o <out>] threads-untrash <user-id> <id> [-p <v>]... [-o <out>] watch <user-id> (-r <kv>)... [-p <v>]... [-o <out>] gmail1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with gmail1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/gmail1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/gmail1-secret.json , assuming that the required gmail API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. gmail1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-gmail1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the Gmail API at revision 20240226 . The CLI is at version 5.0.4 . gmail1 [options] users drafts-create <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] drafts-delete <user-id> <id> [-p <v>]... drafts-get <user-id> <id> [-p <v>]... [-o <out>] drafts-list <user-id> [-p <v>]... [-o <out>] drafts-send <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] drafts-update <user-id> <id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] get-profile <user-id> [-p <v>]... [-o <out>] history-list <user-id> [-p <v>]... [-o <out>] labels-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] labels-delete <user-id> <id> [-p <v>]... labels-get <user-id> <id> [-p <v>]... [-o <out>] labels-list <user-id> [-p <v>]... [-o <out>] labels-patch <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] labels-update <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] messages-attachments-get <user-id> <message-id> <id> [-p <v>]... [-o <out>] messages-batch-delete <user-id> (-r <kv>)... [-p <v>]... messages-batch-modify <user-id> (-r <kv>)... [-p <v>]... messages-delete <user-id> <id> [-p <v>]... messages-get <user-id> <id> [-p <v>]... [-o <out>] messages-import <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] messages-insert <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] messages-list <user-id> [-p <v>]... [-o <out>] messages-modify <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] messages-send <user-id> (-r <kv>)... (-u simple -f <file> [-m <mime>]) [-p <v>]... [-o <out>] messages-trash <user-id> <id> [-p <v>]... [-o <out>] messages-untrash <user-id> <id> [-p <v>]... [-o <out>] settings-cse-identities-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-identities-delete <user-id> <cse-email-address> [-p <v>]... settings-cse-identities-get <user-id> <cse-email-address> [-p <v>]... [-o <out>] settings-cse-identities-list <user-id> [-p <v>]... [-o <out>] settings-cse-identities-patch <user-id> <email-address> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-disable <user-id> <key-pair-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-enable <user-id> <key-pair-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-cse-keypairs-get <user-id> <key-pair-id> [-p <v>]... [-o <out>] settings-cse-keypairs-list <user-id> [-p <v>]... [-o <out>] settings-cse-keypairs-obliterate <user-id> <key-pair-id> (-r <kv>)... [-p <v>]... settings-delegates-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-delegates-delete <user-id> <delegate-email> [-p <v>]... settings-delegates-get <user-id> <delegate-email> [-p <v>]... [-o <out>] settings-delegates-list <user-id> [-p <v>]... [-o <out>] settings-filters-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-filters-delete <user-id> <id> [-p <v>]... settings-filters-get <user-id> <id> [-p <v>]... [-o <out>] settings-filters-list <user-id> [-p <v>]... [-o <out>] settings-forwarding-addresses-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-forwarding-addresses-delete <user-id> <forwarding-email> [-p <v>]... settings-forwarding-addresses-get <user-id> <forwarding-email> [-p <v>]... [-o <out>] settings-forwarding-addresses-list <user-id> [-p <v>]... [-o <out>] settings-get-auto-forwarding <user-id> [-p <v>]... [-o <out>] settings-get-imap <user-id> [-p <v>]... [-o <out>] settings-get-language <user-id> [-p <v>]... [-o <out>] settings-get-pop <user-id> [-p <v>]... [-o <out>] settings-get-vacation <user-id> [-p <v>]... [-o <out>] settings-send-as-create <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-delete <user-id> <send-as-email> [-p <v>]... settings-send-as-get <user-id> <send-as-email> [-p <v>]... [-o <out>] settings-send-as-list <user-id> [-p <v>]... [-o <out>] settings-send-as-patch <user-id> <send-as-email> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-smime-info-delete <user-id> <send-as-email> <id> [-p <v>]... settings-send-as-smime-info-get <user-id> <send-as-email> <id> [-p <v>]... [-o <out>] settings-send-as-smime-info-insert <user-id> <send-as-email> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-smime-info-list <user-id> <send-as-email> [-p <v>]... [-o <out>] settings-send-as-smime-info-set-default <user-id> <send-as-email> <id> [-p <v>]... settings-send-as-update <user-id> <send-as-email> (-r <kv>)... [-p <v>]... [-o <out>] settings-send-as-verify <user-id> <send-as-email> [-p <v>]... settings-update-auto-forwarding <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-imap <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-language <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-pop <user-id> (-r <kv>)... [-p <v>]... [-o <out>] settings-update-vacation <user-id> (-r <kv>)... [-p <v>]... [-o <out>] stop <user-id> [-p <v>]... threads-delete <user-id> <id> [-p <v>]... threads-get <user-id> <id> [-p <v>]... [-o <out>] threads-list <user-id> [-p <v>]... [-o <out>] threads-modify <user-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] threads-trash <user-id> <id> [-p <v>]... [-o <out>] threads-untrash <user-id> <id> [-p <v>]... [-o <out>] watch <user-id> (-r <kv>)... [-p <v>]... [-o <out>] gmail1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with gmail1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/gmail1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/gmail1-secret.json , assuming that the required gmail API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. gmail1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"users_drafts-create/","text":"Creates a new draft with the DRAFT label. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-create ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Draft: id: string message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=et The immutable ID of the draft. message history-id=magna The ID of the last history record that modified this message. id=no The immutable ID of the message. internal-date=ipsum The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=voluptua. List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=at When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=sanctus The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=21 Number of bytes for the message part data (encoding notwithstanding). .. filename=amet. The filename of the attachment. Only present if this message part represents an attachment. mime-type=takimata The MIME type of the message part. part-id=amet. The immutable ID of the message part. .. raw=duo The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=46 Estimated size in bytes of the message. snippet=gubergren A short part of the message text. thread-id=lorem The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Required Upload Flags This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Drafts Create"},{"location":"users_drafts-create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-create ...","title":"Scopes"},{"location":"users_drafts-create/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_drafts-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Draft: id: string message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=et The immutable ID of the draft. message history-id=magna The ID of the last history record that modified this message. id=no The immutable ID of the message. internal-date=ipsum The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=voluptua. List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=at When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=sanctus The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=21 Number of bytes for the message part data (encoding notwithstanding). .. filename=amet. The filename of the attachment. Only present if this message part represents an attachment. mime-type=takimata The MIME type of the message part. part-id=amet. The immutable ID of the message part. .. raw=duo The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=46 Estimated size in bytes of the message. snippet=gubergren A short part of the message text. thread-id=lorem The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match.","title":"Required Request Value"},{"location":"users_drafts-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_drafts-create/#required-upload-flags","text":"This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default","title":"Required Upload Flags"},{"location":"users_drafts-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_drafts-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_drafts-delete/","text":"Immediately and permanently deletes the specified draft. Does not simply trash it. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-delete ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the draft to delete. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Drafts Delete"},{"location":"users_drafts-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-delete ...","title":"Scopes"},{"location":"users_drafts-delete/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the draft to delete.","title":"Required Scalar Arguments"},{"location":"users_drafts-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_drafts-get/","text":"Gets the specified draft. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-get ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the draft to retrieve. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p format=string The format to return the draft in. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Drafts Get"},{"location":"users_drafts-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-get ...","title":"Scopes"},{"location":"users_drafts-get/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the draft to retrieve.","title":"Required Scalar Arguments"},{"location":"users_drafts-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_drafts-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p format=string The format to return the draft in.","title":"Optional Method Properties"},{"location":"users_drafts-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_drafts-list/","text":"Lists the drafts in the user's mailbox. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-list ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-spam-trash=boolean Include drafts from SPAM and TRASH in the results. -p max-results=integer Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p q=string Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Drafts List"},{"location":"users_drafts-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-list ...","title":"Scopes"},{"location":"users_drafts-list/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_drafts-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_drafts-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-spam-trash=boolean Include drafts from SPAM and TRASH in the results. -p max-results=integer Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p q=string Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; .","title":"Optional Method Properties"},{"location":"users_drafts-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_drafts-send/","text":"Sends the specified, existing draft to the recipients in the To , Cc , and Bcc headers. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-send ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Draft: id: string message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=gubergren The immutable ID of the draft. message history-id=eos The ID of the last history record that modified this message. id=dolor The immutable ID of the message. internal-date=ea The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=ipsum List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=invidunt When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=amet The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=81 Number of bytes for the message part data (encoding notwithstanding). .. filename=ipsum The filename of the attachment. Only present if this message part represents an attachment. mime-type=sed The MIME type of the message part. part-id=ut The immutable ID of the message part. .. raw=gubergren The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=85 Estimated size in bytes of the message. snippet=est A short part of the message text. thread-id=ipsum The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Required Upload Flags This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Drafts Send"},{"location":"users_drafts-send/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-send ...","title":"Scopes"},{"location":"users_drafts-send/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_drafts-send/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Draft: id: string message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=gubergren The immutable ID of the draft. message history-id=eos The ID of the last history record that modified this message. id=dolor The immutable ID of the message. internal-date=ea The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=ipsum List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=invidunt When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=amet The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=81 Number of bytes for the message part data (encoding notwithstanding). .. filename=ipsum The filename of the attachment. Only present if this message part represents an attachment. mime-type=sed The MIME type of the message part. part-id=ut The immutable ID of the message part. .. raw=gubergren The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=85 Estimated size in bytes of the message. snippet=est A short part of the message text. thread-id=ipsum The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match.","title":"Required Request Value"},{"location":"users_drafts-send/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_drafts-send/#required-upload-flags","text":"This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default","title":"Required Upload Flags"},{"location":"users_drafts-send/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_drafts-send/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_drafts-update/","text":"Replaces a draft's content. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-update ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the draft to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Draft: id: string message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=ipsum The immutable ID of the draft. message history-id=est The ID of the last history record that modified this message. id=gubergren The immutable ID of the message. internal-date=ea The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=dolor List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=lorem When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=eos The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=15 Number of bytes for the message part data (encoding notwithstanding). .. filename=sed The filename of the attachment. Only present if this message part represents an attachment. mime-type=duo The MIME type of the message part. part-id=sed The immutable ID of the message part. .. raw=no The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=86 Estimated size in bytes of the message. snippet=kasd A short part of the message text. thread-id=et The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Required Upload Flags This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Drafts Update"},{"location":"users_drafts-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users drafts-update ...","title":"Scopes"},{"location":"users_drafts-update/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the draft to update.","title":"Required Scalar Arguments"},{"location":"users_drafts-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Draft: id: string message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=ipsum The immutable ID of the draft. message history-id=est The ID of the last history record that modified this message. id=gubergren The immutable ID of the message. internal-date=ea The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=dolor List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=lorem When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=eos The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=15 Number of bytes for the message part data (encoding notwithstanding). .. filename=sed The filename of the attachment. Only present if this message part represents an attachment. mime-type=duo The MIME type of the message part. part-id=sed The immutable ID of the message part. .. raw=no The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=86 Estimated size in bytes of the message. snippet=kasd A short part of the message text. thread-id=et The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match.","title":"Required Request Value"},{"location":"users_drafts-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_drafts-update/#required-upload-flags","text":"This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default","title":"Required Upload Flags"},{"location":"users_drafts-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_drafts-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_get-profile/","text":"Gets the current user's Gmail profile. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users get-profile ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get Profile"},{"location":"users_get-profile/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users get-profile ...","title":"Scopes"},{"location":"users_get-profile/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_get-profile/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_get-profile/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_history-list/","text":"Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId ). Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users history-list ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p history-types=string History types to be returned by the function -p label-id=string Only return messages with a label matching the ID. -p max-results=integer Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p start-history-id=string Required. Returns history records after the specified startHistoryId . The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"History List"},{"location":"users_history-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users history-list ...","title":"Scopes"},{"location":"users_history-list/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_history-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_history-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p history-types=string History types to be returned by the function -p label-id=string Only return messages with a label matching the ID. -p max-results=integer Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p start-history-id=string Required. Returns history records after the specified startHistoryId . The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.","title":"Optional Method Properties"},{"location":"users_history-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_labels-create/","text":"Creates a new label. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-create ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Label: color: background-color: string text-color: string id: string label-list-visibility: string message-list-visibility: string messages-total: integer messages-unread: integer name: string threads-total: integer threads-unread: integer type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .color background-color=sed The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 text-color=et The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 .. id=et The immutable ID of the label. label-list-visibility=vero The visibility of the label in the label list in the Gmail web interface. message-list-visibility=erat The visibility of messages with this label in the message list in the Gmail web interface. messages-total=8 The total number of messages with the label. messages-unread=81 The number of unread messages with the label. name=dolore The display name of the label. threads-total=79 The total number of threads with the label. threads-unread=73 The number of unread threads with the label. type=amet. The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Labels Create"},{"location":"users_labels-create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-create ...","title":"Scopes"},{"location":"users_labels-create/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_labels-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Label: color: background-color: string text-color: string id: string label-list-visibility: string message-list-visibility: string messages-total: integer messages-unread: integer name: string threads-total: integer threads-unread: integer type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .color background-color=sed The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 text-color=et The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 .. id=et The immutable ID of the label. label-list-visibility=vero The visibility of the label in the label list in the Gmail web interface. message-list-visibility=erat The visibility of messages with this label in the message list in the Gmail web interface. messages-total=8 The total number of messages with the label. messages-unread=81 The number of unread messages with the label. name=dolore The display name of the label. threads-total=79 The total number of threads with the label. threads-unread=73 The number of unread threads with the label. type=amet. The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads.","title":"Required Request Value"},{"location":"users_labels-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_labels-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_labels-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_labels-delete/","text":"Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-delete ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to delete. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Labels Delete"},{"location":"users_labels-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-delete ...","title":"Scopes"},{"location":"users_labels-delete/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to delete.","title":"Required Scalar Arguments"},{"location":"users_labels-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_labels-get/","text":"Gets the specified label. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users labels-get ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to retrieve. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Labels Get"},{"location":"users_labels-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users labels-get ...","title":"Scopes"},{"location":"users_labels-get/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to retrieve.","title":"Required Scalar Arguments"},{"location":"users_labels-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_labels-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_labels-list/","text":"Lists all labels in the user's mailbox. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users labels-list ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Labels List"},{"location":"users_labels-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users labels-list ...","title":"Scopes"},{"location":"users_labels-list/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_labels-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_labels-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_labels-patch/","text":"Patch the specified label. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-patch ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Label: color: background-color: string text-color: string id: string label-list-visibility: string message-list-visibility: string messages-total: integer messages-unread: integer name: string threads-total: integer threads-unread: integer type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .color background-color=consetetur The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 text-color=diam The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 .. id=dolor The immutable ID of the label. label-list-visibility=et The visibility of the label in the label list in the Gmail web interface. message-list-visibility=et The visibility of messages with this label in the message list in the Gmail web interface. messages-total=6 The total number of messages with the label. messages-unread=86 The number of unread messages with the label. name=dolor The display name of the label. threads-total=81 The total number of threads with the label. threads-unread=25 The number of unread threads with the label. type=vero The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Labels Patch"},{"location":"users_labels-patch/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-patch ...","title":"Scopes"},{"location":"users_labels-patch/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to update.","title":"Required Scalar Arguments"},{"location":"users_labels-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Label: color: background-color: string text-color: string id: string label-list-visibility: string message-list-visibility: string messages-total: integer messages-unread: integer name: string threads-total: integer threads-unread: integer type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .color background-color=consetetur The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 text-color=diam The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 .. id=dolor The immutable ID of the label. label-list-visibility=et The visibility of the label in the label list in the Gmail web interface. message-list-visibility=et The visibility of messages with this label in the message list in the Gmail web interface. messages-total=6 The total number of messages with the label. messages-unread=86 The number of unread messages with the label. name=dolor The display name of the label. threads-total=81 The total number of threads with the label. threads-unread=25 The number of unread threads with the label. type=vero The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads.","title":"Required Request Value"},{"location":"users_labels-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_labels-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_labels-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_labels-update/","text":"Updates the specified label. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-update ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Label: color: background-color: string text-color: string id: string label-list-visibility: string message-list-visibility: string messages-total: integer messages-unread: integer name: string threads-total: integer threads-unread: integer type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .color background-color=invidunt The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 text-color=stet The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 .. id=vero The immutable ID of the label. label-list-visibility=elitr The visibility of the label in the label list in the Gmail web interface. message-list-visibility=lorem The visibility of messages with this label in the message list in the Gmail web interface. messages-total=72 The total number of messages with the label. messages-unread=40 The number of unread messages with the label. name=ipsum The display name of the label. threads-total=78 The total number of threads with the label. threads-unread=42 The number of unread threads with the label. type=consetetur The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Labels Update"},{"location":"users_labels-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users labels-update ...","title":"Scopes"},{"location":"users_labels-update/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the label to update.","title":"Required Scalar Arguments"},{"location":"users_labels-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Label: color: background-color: string text-color: string id: string label-list-visibility: string message-list-visibility: string messages-total: integer messages-unread: integer name: string threads-total: integer threads-unread: integer type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .color background-color=invidunt The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 text-color=stet The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: #000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, #fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, #f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, #efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, #e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, #cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, #ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, #822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c #464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, #711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, #594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, #c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, #662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765 .. id=vero The immutable ID of the label. label-list-visibility=elitr The visibility of the label in the label list in the Gmail web interface. message-list-visibility=lorem The visibility of messages with this label in the message list in the Gmail web interface. messages-total=72 The total number of messages with the label. messages-unread=40 The number of unread messages with the label. name=ipsum The display name of the label. threads-total=78 The total number of threads with the label. threads-unread=42 The number of unread threads with the label. type=consetetur The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the INBOX and UNREAD labels from messages and threads, but cannot apply or remove the DRAFTS or SENT labels from messages or threads.","title":"Required Request Value"},{"location":"users_labels-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_labels-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_labels-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-attachments-get/","text":"Gets the specified message attachment. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.message.action https://www.googleapis.com/auth/gmail.addons.current.message.readonly https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.addons.current.message.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users messages-attachments-get ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <message-id> (string) The ID of the message containing the attachment. <id> (string) The ID of the attachment. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Attachments Get"},{"location":"users_messages-attachments-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.message.action https://www.googleapis.com/auth/gmail.addons.current.message.readonly https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.addons.current.message.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users messages-attachments-get ...","title":"Scopes"},{"location":"users_messages-attachments-get/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <message-id> (string) The ID of the message containing the attachment. <id> (string) The ID of the attachment.","title":"Required Scalar Arguments"},{"location":"users_messages-attachments-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-attachments-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-batch-delete/","text":"Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all. Scopes You will need authorization for the https://mail.google.com/ scope to make a valid call. If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-batch-delete ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchDeleteMessagesRequest: ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . ids=voluptua. The IDs of the messages to delete. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Batch Delete"},{"location":"users_messages-batch-delete/#scopes","text":"You will need authorization for the https://mail.google.com/ scope to make a valid call. If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-batch-delete ...","title":"Scopes"},{"location":"users_messages-batch-delete/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_messages-batch-delete/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchDeleteMessagesRequest: ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . ids=voluptua. The IDs of the messages to delete. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"users_messages-batch-delete/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_messages-batch-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-batch-modify/","text":"Modifies the labels on the specified messages. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-batch-modify ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchModifyMessagesRequest: add-label-ids: [string] ids: [string] remove-label-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . add-label-ids=et A list of label IDs to add to messages. Each invocation of this argument appends the given value to the array. ids=erat The IDs of the messages to modify. There is a limit of 1000 ids per request. Each invocation of this argument appends the given value to the array. remove-label-ids=consetetur A list of label IDs to remove from messages. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Batch Modify"},{"location":"users_messages-batch-modify/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-batch-modify ...","title":"Scopes"},{"location":"users_messages-batch-modify/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_messages-batch-modify/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchModifyMessagesRequest: add-label-ids: [string] ids: [string] remove-label-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . add-label-ids=et A list of label IDs to add to messages. Each invocation of this argument appends the given value to the array. ids=erat The IDs of the messages to modify. There is a limit of 1000 ids per request. Each invocation of this argument appends the given value to the array. remove-label-ids=consetetur A list of label IDs to remove from messages. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"users_messages-batch-modify/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_messages-batch-modify/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-delete/","text":"Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead. Scopes You will need authorization for the https://mail.google.com/ scope to make a valid call. If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-delete ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to delete. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Delete"},{"location":"users_messages-delete/#scopes","text":"You will need authorization for the https://mail.google.com/ scope to make a valid call. If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-delete ...","title":"Scopes"},{"location":"users_messages-delete/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to delete.","title":"Required Scalar Arguments"},{"location":"users_messages-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-get/","text":"Gets the specified message. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.message.action https://www.googleapis.com/auth/gmail.addons.current.message.metadata https://www.googleapis.com/auth/gmail.addons.current.message.readonly https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.addons.current.message.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users messages-get ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to retrieve. This ID is usually retrieved using messages.list . The ID is also contained in the result when a message is inserted ( messages.insert ) or imported ( messages.import ). Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p format=string The format to return the message in. -p metadata-headers=string When given and format is METADATA , only include headers specified. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Get"},{"location":"users_messages-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.message.action https://www.googleapis.com/auth/gmail.addons.current.message.metadata https://www.googleapis.com/auth/gmail.addons.current.message.readonly https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.addons.current.message.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users messages-get ...","title":"Scopes"},{"location":"users_messages-get/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to retrieve. This ID is usually retrieved using messages.list . The ID is also contained in the result when a message is inserted ( messages.insert ) or imported ( messages.import ).","title":"Required Scalar Arguments"},{"location":"users_messages-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p format=string The format to return the message in. -p metadata-headers=string When given and format is METADATA , only include headers specified.","title":"Optional Method Properties"},{"location":"users_messages-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-import/","text":"Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.insert https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-import ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . history-id=amet. The ID of the last history record that modified this message. id=sed The immutable ID of the message. internal-date=takimata The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=dolores List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=gubergren When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=et The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=78 Number of bytes for the message part data (encoding notwithstanding). .. filename=voluptua. The filename of the attachment. Only present if this message part represents an attachment. mime-type=dolore The MIME type of the message part. part-id=dolore The immutable ID of the message part. .. raw=dolore The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=23 Estimated size in bytes of the message. snippet=amet. A short part of the message text. thread-id=ea The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Required Upload Flags This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p deleted=boolean Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. -p internal-date-source=string Source for Gmail's internal date of the message. -p never-mark-spam=boolean Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox. -p process-for-calendar=boolean Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Import"},{"location":"users_messages-import/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.insert https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-import ...","title":"Scopes"},{"location":"users_messages-import/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_messages-import/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . history-id=amet. The ID of the last history record that modified this message. id=sed The immutable ID of the message. internal-date=takimata The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=dolores List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=gubergren When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=et The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=78 Number of bytes for the message part data (encoding notwithstanding). .. filename=voluptua. The filename of the attachment. Only present if this message part represents an attachment. mime-type=dolore The MIME type of the message part. part-id=dolore The immutable ID of the message part. .. raw=dolore The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=23 Estimated size in bytes of the message. snippet=amet. A short part of the message text. thread-id=ea The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match.","title":"Required Request Value"},{"location":"users_messages-import/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_messages-import/#required-upload-flags","text":"This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default","title":"Required Upload Flags"},{"location":"users_messages-import/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-import/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p deleted=boolean Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. -p internal-date-source=string Source for Gmail's internal date of the message. -p never-mark-spam=boolean Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox. -p process-for-calendar=boolean Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.","title":"Optional Method Properties"},{"location":"users_messages-import/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-insert/","text":"Directly inserts a message into only this user's mailbox similar to IMAP APPEND , bypassing most scanning and classification. Does not send a message. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.insert https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-insert ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . history-id=sadipscing The ID of the last history record that modified this message. id=lorem The immutable ID of the message. internal-date=invidunt The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=no List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=est When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=at The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=58 Number of bytes for the message part data (encoding notwithstanding). .. filename=sit The filename of the attachment. Only present if this message part represents an attachment. mime-type=et The MIME type of the message part. part-id=tempor The immutable ID of the message part. .. raw=aliquyam The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=96 Estimated size in bytes of the message. snippet=et A short part of the message text. thread-id=sanctus The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Required Upload Flags This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p deleted=boolean Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. -p internal-date-source=string Source for Gmail's internal date of the message. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Insert"},{"location":"users_messages-insert/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.insert https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-insert ...","title":"Scopes"},{"location":"users_messages-insert/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_messages-insert/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . history-id=sadipscing The ID of the last history record that modified this message. id=lorem The immutable ID of the message. internal-date=invidunt The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=no List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=est When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=at The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=58 Number of bytes for the message part data (encoding notwithstanding). .. filename=sit The filename of the attachment. Only present if this message part represents an attachment. mime-type=et The MIME type of the message part. part-id=tempor The immutable ID of the message part. .. raw=aliquyam The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=96 Estimated size in bytes of the message. snippet=et A short part of the message text. thread-id=sanctus The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match.","title":"Required Request Value"},{"location":"users_messages-insert/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_messages-insert/#required-upload-flags","text":"This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default","title":"Required Upload Flags"},{"location":"users_messages-insert/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-insert/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p deleted=boolean Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. -p internal-date-source=string Source for Gmail's internal date of the message.","title":"Optional Method Properties"},{"location":"users_messages-insert/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-list/","text":"Lists the messages in the user's mailbox. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users messages-list ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-spam-trash=boolean Include messages from SPAM and TRASH in the results. -p label-ids=string Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see Manage labels on messages and threads . -p max-results=integer Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p q=string Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . Parameter cannot be used when accessing the api using the gmail.metadata scope. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages List"},{"location":"users_messages-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users messages-list ...","title":"Scopes"},{"location":"users_messages-list/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_messages-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-spam-trash=boolean Include messages from SPAM and TRASH in the results. -p label-ids=string Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see Manage labels on messages and threads . -p max-results=integer Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p q=string Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . Parameter cannot be used when accessing the api using the gmail.metadata scope.","title":"Optional Method Properties"},{"location":"users_messages-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-modify/","text":"Modifies the labels on the specified message. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-modify ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to modify. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ModifyMessageRequest: add-label-ids: [string] remove-label-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . add-label-ids=lorem A list of IDs of labels to add to this message. You can add up to 100 labels with each update. Each invocation of this argument appends the given value to the array. remove-label-ids=est A list IDs of labels to remove from this message. You can remove up to 100 labels with each update. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Modify"},{"location":"users_messages-modify/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-modify ...","title":"Scopes"},{"location":"users_messages-modify/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to modify.","title":"Required Scalar Arguments"},{"location":"users_messages-modify/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ModifyMessageRequest: add-label-ids: [string] remove-label-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . add-label-ids=lorem A list of IDs of labels to add to this message. You can add up to 100 labels with each update. Each invocation of this argument appends the given value to the array. remove-label-ids=est A list IDs of labels to remove from this message. You can remove up to 100 labels with each update. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"users_messages-modify/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_messages-modify/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-modify/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-send/","text":"Sends the specified message to the recipients in the To , Cc , and Bcc headers. For example usage, see Sending email . Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.send If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-send ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . history-id=sed The ID of the last history record that modified this message. id=diam The immutable ID of the message. internal-date=dolores The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=dolores List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=et When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=sed The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=90 Number of bytes for the message part data (encoding notwithstanding). .. filename=et The filename of the attachment. Only present if this message part represents an attachment. mime-type=elitr The MIME type of the message part. part-id=sed The immutable ID of the message part. .. raw=no The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=10 Estimated size in bytes of the message. snippet=at A short part of the message text. thread-id=sadipscing The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Required Upload Flags This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Send"},{"location":"users_messages-send/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.send If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-send ...","title":"Scopes"},{"location":"users_messages-send/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_messages-send/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Message: history-id: string id: string internal-date: string label-ids: [string] payload: body: attachment-id: string data: string size: integer filename: string mime-type: string part-id: string raw: string size-estimate: integer snippet: string thread-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . history-id=sed The ID of the last history record that modified this message. id=diam The immutable ID of the message. internal-date=dolores The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header. label-ids=dolores List of IDs of labels applied to this message. Each invocation of this argument appends the given value to the array. payload.body attachment-id=et When present, contains the ID of an external attachment that can be retrieved in a separate messages.attachments.get request. When not present, the entire content of the message part body is contained in the data field. data=sed The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment. size=90 Number of bytes for the message part data (encoding notwithstanding). .. filename=et The filename of the attachment. Only present if this message part represents an attachment. mime-type=elitr The MIME type of the message part. part-id=sed The immutable ID of the message part. .. raw=no The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied. size-estimate=10 Estimated size in bytes of the message. snippet=at A short part of the message text. thread-id=sadipscing The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested threadId must be specified on the Message or Draft.Message you supply with your request. 2. The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 3. The Subject headers must match.","title":"Required Request Value"},{"location":"users_messages-send/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_messages-send/#required-upload-flags","text":"This method supports the upload of data, which requires all of the following flags to be set: -u simple simple - Upload media all at once. -f file Path to file to upload. It must be seekable. The following flag may be set: -m mime the mime type, like 'application/octet-stream', which is the default","title":"Required Upload Flags"},{"location":"users_messages-send/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-send/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-trash/","text":"Moves the specified message to the trash. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-trash ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to Trash. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Trash"},{"location":"users_messages-trash/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-trash ...","title":"Scopes"},{"location":"users_messages-trash/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to Trash.","title":"Required Scalar Arguments"},{"location":"users_messages-trash/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-trash/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_messages-untrash/","text":"Removes the specified message from the trash. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-untrash ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to remove from Trash. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Messages Untrash"},{"location":"users_messages-untrash/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users messages-untrash ...","title":"Scopes"},{"location":"users_messages-untrash/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the message to remove from Trash.","title":"Required Scalar Arguments"},{"location":"users_messages-untrash/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_messages-untrash/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-identities-create/","text":"Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-create ... Required Scalar Argument <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CseIdentity: email-address: string primary-key-pair-id: string sign-and-encrypt-key-pairs: encryption-key-pair-id: string signing-key-pair-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . email-address=aliquyam The email address for the sending identity. The email address must be the primary email address of the authenticated user. primary-key-pair-id=dolores If a key pair is associated, the ID of the key pair, CseKeyPair. sign-and-encrypt-key-pairs encryption-key-pair-id=sadipscing The ID of the CseKeyPair that encrypts signed outgoing mail. signing-key-pair-id=erat The ID of the CseKeyPair that signs outgoing mail. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Identities Create"},{"location":"users_settings-cse-identities-create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-create ...","title":"Scopes"},{"location":"users_settings-cse-identities-create/#required-scalar-argument","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me .","title":"Required Scalar Argument"},{"location":"users_settings-cse-identities-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CseIdentity: email-address: string primary-key-pair-id: string sign-and-encrypt-key-pairs: encryption-key-pair-id: string signing-key-pair-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . email-address=aliquyam The email address for the sending identity. The email address must be the primary email address of the authenticated user. primary-key-pair-id=dolores If a key pair is associated, the ID of the key pair, CseKeyPair. sign-and-encrypt-key-pairs encryption-key-pair-id=sadipscing The ID of the CseKeyPair that encrypts signed outgoing mail. signing-key-pair-id=erat The ID of the CseKeyPair that signs outgoing mail.","title":"Required Request Value"},{"location":"users_settings-cse-identities-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-cse-identities-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-identities-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-identities-delete/","text":"Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-delete ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <cse-email-address> (string) The primary email address associated with the client-side encryption identity configuration that's removed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Identities Delete"},{"location":"users_settings-cse-identities-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-delete ...","title":"Scopes"},{"location":"users_settings-cse-identities-delete/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <cse-email-address> (string) The primary email address associated with the client-side encryption identity configuration that's removed.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-identities-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-identities-get/","text":"Retrieves a client-side encryption identity configuration. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-get ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <cse-email-address> (string) The primary email address associated with the client-side encryption identity configuration that's retrieved. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Identities Get"},{"location":"users_settings-cse-identities-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-get ...","title":"Scopes"},{"location":"users_settings-cse-identities-get/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <cse-email-address> (string) The primary email address associated with the client-side encryption identity configuration that's retrieved.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-identities-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-identities-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-identities-list/","text":"Lists the client-side encrypted identities for an authenticated user. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-list ... Required Scalar Argument <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The number of identities to return. If not provided, the page size will default to 20 entries. -p page-token=string Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Identities List"},{"location":"users_settings-cse-identities-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-list ...","title":"Scopes"},{"location":"users_settings-cse-identities-list/#required-scalar-argument","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me .","title":"Required Scalar Argument"},{"location":"users_settings-cse-identities-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-identities-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The number of identities to return. If not provided, the page size will default to 20 entries. -p page-token=string Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.","title":"Optional Method Properties"},{"location":"users_settings-cse-identities-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-identities-patch/","text":"Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's S/MIME certificate profiles . Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-patch ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <email-address> (string) The email address of the client-side encryption identity to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CseIdentity: email-address: string primary-key-pair-id: string sign-and-encrypt-key-pairs: encryption-key-pair-id: string signing-key-pair-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . email-address=aliquyam The email address for the sending identity. The email address must be the primary email address of the authenticated user. primary-key-pair-id=amet If a key pair is associated, the ID of the key pair, CseKeyPair. sign-and-encrypt-key-pairs encryption-key-pair-id=est The ID of the CseKeyPair that encrypts signed outgoing mail. signing-key-pair-id=et The ID of the CseKeyPair that signs outgoing mail. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Identities Patch"},{"location":"users_settings-cse-identities-patch/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-identities-patch ...","title":"Scopes"},{"location":"users_settings-cse-identities-patch/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <email-address> (string) The email address of the client-side encryption identity to update.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-identities-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CseIdentity: email-address: string primary-key-pair-id: string sign-and-encrypt-key-pairs: encryption-key-pair-id: string signing-key-pair-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . email-address=aliquyam The email address for the sending identity. The email address must be the primary email address of the authenticated user. primary-key-pair-id=amet If a key pair is associated, the ID of the key pair, CseKeyPair. sign-and-encrypt-key-pairs encryption-key-pair-id=est The ID of the CseKeyPair that encrypts signed outgoing mail. signing-key-pair-id=et The ID of the CseKeyPair that signs outgoing mail.","title":"Required Request Value"},{"location":"users_settings-cse-identities-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-cse-identities-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-identities-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-keypairs-create/","text":"Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-create ... Required Scalar Argument <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CseKeyPair: disable-time: string enablement-state: string key-pair-id: string pem: string pkcs7: string subject-email-addresses: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . disable-time=sea Output only. If a key pair is set to DISABLED , the time that the key pair's state changed from ENABLED to DISABLED . This field is present only when the key pair is in state DISABLED . enablement-state=consetetur Output only. The current state of the key pair. key-pair-id=consetetur Output only. The immutable ID for the client-side encryption S/MIME key pair. pem=stet Output only. The public key and its certificate chain, in PEM format. pkcs7=est Input only. The public key and its certificate chain. The chain must be in PKCS#7 format and use PEM encoding and ASCII armor. subject-email-addresses=aliquyam Output only. The email address identities that are specified on the leaf certificate. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Keypairs Create"},{"location":"users_settings-cse-keypairs-create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-create ...","title":"Scopes"},{"location":"users_settings-cse-keypairs-create/#required-scalar-argument","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me .","title":"Required Scalar Argument"},{"location":"users_settings-cse-keypairs-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CseKeyPair: disable-time: string enablement-state: string key-pair-id: string pem: string pkcs7: string subject-email-addresses: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . disable-time=sea Output only. If a key pair is set to DISABLED , the time that the key pair's state changed from ENABLED to DISABLED . This field is present only when the key pair is in state DISABLED . enablement-state=consetetur Output only. The current state of the key pair. key-pair-id=consetetur Output only. The immutable ID for the client-side encryption S/MIME key pair. pem=stet Output only. The public key and its certificate chain, in PEM format. pkcs7=est Input only. The public key and its certificate chain. The chain must be in PKCS#7 format and use PEM encoding and ASCII armor. subject-email-addresses=aliquyam Output only. The email address identities that are specified on the leaf certificate. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"users_settings-cse-keypairs-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-cse-keypairs-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-keypairs-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-keypairs-disable/","text":"Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-disable ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to turn off. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: DisableCseKeyPairRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Keypairs Disable"},{"location":"users_settings-cse-keypairs-disable/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-disable ...","title":"Scopes"},{"location":"users_settings-cse-keypairs-disable/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to turn off.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-keypairs-disable/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: DisableCseKeyPairRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"users_settings-cse-keypairs-disable/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-cse-keypairs-disable/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-keypairs-disable/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-keypairs-enable/","text":"Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-enable ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to turn on. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: EnableCseKeyPairRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Keypairs Enable"},{"location":"users_settings-cse-keypairs-enable/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-enable ...","title":"Scopes"},{"location":"users_settings-cse-keypairs-enable/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to turn on.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-keypairs-enable/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: EnableCseKeyPairRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"users_settings-cse-keypairs-enable/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-cse-keypairs-enable/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-keypairs-enable/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-keypairs-get/","text":"Retrieves an existing client-side encryption key pair. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-get ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to retrieve. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Keypairs Get"},{"location":"users_settings-cse-keypairs-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-get ...","title":"Scopes"},{"location":"users_settings-cse-keypairs-get/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to retrieve.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-keypairs-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-keypairs-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-keypairs-list/","text":"Lists client-side encryption key pairs for an authenticated user. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-list ... Required Scalar Argument <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The number of key pairs to return. If not provided, the page size will default to 20 entries. -p page-token=string Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Keypairs List"},{"location":"users_settings-cse-keypairs-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-list ...","title":"Scopes"},{"location":"users_settings-cse-keypairs-list/#required-scalar-argument","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me .","title":"Required Scalar Argument"},{"location":"users_settings-cse-keypairs-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-cse-keypairs-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The number of key pairs to return. If not provided, the page size will default to 20 entries. -p page-token=string Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.","title":"Optional Method Properties"},{"location":"users_settings-cse-keypairs-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-cse-keypairs-obliterate/","text":"Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-obliterate ... Required Scalar Arguments <user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to obliterate. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ObliterateCseKeyPairRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Cse Keypairs Obliterate"},{"location":"users_settings-cse-keypairs-obliterate/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-cse-keypairs-obliterate ...","title":"Scopes"},{"location":"users_settings-cse-keypairs-obliterate/#required-scalar-arguments","text":"<user-id> (string) The requester's primary email address. To indicate the authenticated user, you can use the special value me . <key-pair-id> (string) The identifier of the key pair to obliterate.","title":"Required Scalar Arguments"},{"location":"users_settings-cse-keypairs-obliterate/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ObliterateCseKeyPairRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"users_settings-cse-keypairs-obliterate/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-cse-keypairs-obliterate/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-delegates-create/","text":"Adds a delegate with its verification status set directly to accepted , without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-create ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Delegate: delegate-email: string verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . delegate-email=elitr The email address of the delegate. verification-status=duo Indicates whether this address has been verified and can act as a delegate for the account. Read-only. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Delegates Create"},{"location":"users_settings-delegates-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-create ...","title":"Scopes"},{"location":"users_settings-delegates-create/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-delegates-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Delegate: delegate-email: string verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . delegate-email=elitr The email address of the delegate. verification-status=duo Indicates whether this address has been verified and can act as a delegate for the account. Read-only.","title":"Required Request Value"},{"location":"users_settings-delegates-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-delegates-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-delegates-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-delegates-delete/","text":"Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-delete ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <delegate-email> (string) The email address of the user to be removed as a delegate. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Delegates Delete"},{"location":"users_settings-delegates-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-delete ...","title":"Scopes"},{"location":"users_settings-delegates-delete/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <delegate-email> (string) The email address of the user to be removed as a delegate.","title":"Required Scalar Arguments"},{"location":"users_settings-delegates-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-delegates-get/","text":"Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-get ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <delegate-email> (string) The email address of the user whose delegate relationship is to be retrieved. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Delegates Get"},{"location":"users_settings-delegates-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-get ...","title":"Scopes"},{"location":"users_settings-delegates-get/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <delegate-email> (string) The email address of the user whose delegate relationship is to be retrieved.","title":"Required Scalar Arguments"},{"location":"users_settings-delegates-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-delegates-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-delegates-list/","text":"Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-list ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Delegates List"},{"location":"users_settings-delegates-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-delegates-list ...","title":"Scopes"},{"location":"users_settings-delegates-list/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-delegates-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-delegates-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-filters-create/","text":"Creates a filter. Note: you can only create a maximum of 1,000 filters. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-create ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Filter: action: add-label-ids: [string] forward: string remove-label-ids: [string] criteria: exclude-chats: boolean from: string has-attachment: boolean negated-query: string query: string size: integer size-comparison: string subject: string to: string id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .action add-label-ids=diam List of labels to add to the message. Each invocation of this argument appends the given value to the array. forward=est Email address that the message should be forwarded to. remove-label-ids=sit List of labels to remove from the message. Each invocation of this argument appends the given value to the array. ..criteria exclude-chats=false Whether the response should exclude chats. from=eos The sender's display name or email address. has-attachment=true Whether the message has any attachment. negated-query=ea Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . query=stet Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . size=82 The size of the entire RFC822 message in bytes, including all headers and attachments. size-comparison=eos How the message size in bytes should be in relation to the size field. subject=et Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed. to=sea The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive. .. id=et The server assigned ID of the filter. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Filters Create"},{"location":"users_settings-filters-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-create ...","title":"Scopes"},{"location":"users_settings-filters-create/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-filters-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Filter: action: add-label-ids: [string] forward: string remove-label-ids: [string] criteria: exclude-chats: boolean from: string has-attachment: boolean negated-query: string query: string size: integer size-comparison: string subject: string to: string id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .action add-label-ids=diam List of labels to add to the message. Each invocation of this argument appends the given value to the array. forward=est Email address that the message should be forwarded to. remove-label-ids=sit List of labels to remove from the message. Each invocation of this argument appends the given value to the array. ..criteria exclude-chats=false Whether the response should exclude chats. from=eos The sender's display name or email address. has-attachment=true Whether the message has any attachment. negated-query=ea Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . query=stet Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . size=82 The size of the entire RFC822 message in bytes, including all headers and attachments. size-comparison=eos How the message size in bytes should be in relation to the size field. subject=et Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed. to=sea The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive. .. id=et The server assigned ID of the filter.","title":"Required Request Value"},{"location":"users_settings-filters-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-filters-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-filters-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-filters-delete/","text":"Immediately and permanently deletes the specified filter. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-delete ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <id> (string) The ID of the filter to be deleted. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Filters Delete"},{"location":"users_settings-filters-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-delete ...","title":"Scopes"},{"location":"users_settings-filters-delete/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <id> (string) The ID of the filter to be deleted.","title":"Required Scalar Arguments"},{"location":"users_settings-filters-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-filters-get/","text":"Gets a filter. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-get ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <id> (string) The ID of the filter to be fetched. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Filters Get"},{"location":"users_settings-filters-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-get ...","title":"Scopes"},{"location":"users_settings-filters-get/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <id> (string) The ID of the filter to be fetched.","title":"Required Scalar Arguments"},{"location":"users_settings-filters-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-filters-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-filters-list/","text":"Lists the message filters of a Gmail user. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-list ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Filters List"},{"location":"users_settings-filters-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-filters-list ...","title":"Scopes"},{"location":"users_settings-filters-list/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-filters-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-filters-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-forwarding-addresses-create/","text":"Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to pending ; otherwise, the resource will be created with verification status set to accepted . This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-create ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ForwardingAddress: forwarding-email: string verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . forwarding-email=at An email address to which messages can be forwarded. verification-status=dolore Indicates whether this address has been verified and is usable for forwarding. Read-only. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Forwarding Addresses Create"},{"location":"users_settings-forwarding-addresses-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-create ...","title":"Scopes"},{"location":"users_settings-forwarding-addresses-create/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-forwarding-addresses-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ForwardingAddress: forwarding-email: string verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . forwarding-email=at An email address to which messages can be forwarded. verification-status=dolore Indicates whether this address has been verified and is usable for forwarding. Read-only.","title":"Required Request Value"},{"location":"users_settings-forwarding-addresses-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-forwarding-addresses-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-forwarding-addresses-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-forwarding-addresses-delete/","text":"Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-delete ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <forwarding-email> (string) The forwarding address to be deleted. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Forwarding Addresses Delete"},{"location":"users_settings-forwarding-addresses-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-delete ...","title":"Scopes"},{"location":"users_settings-forwarding-addresses-delete/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <forwarding-email> (string) The forwarding address to be deleted.","title":"Required Scalar Arguments"},{"location":"users_settings-forwarding-addresses-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-forwarding-addresses-get/","text":"Gets the specified forwarding address. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-get ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <forwarding-email> (string) The forwarding address to be retrieved. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Forwarding Addresses Get"},{"location":"users_settings-forwarding-addresses-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-get ...","title":"Scopes"},{"location":"users_settings-forwarding-addresses-get/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <forwarding-email> (string) The forwarding address to be retrieved.","title":"Required Scalar Arguments"},{"location":"users_settings-forwarding-addresses-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-forwarding-addresses-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-forwarding-addresses-list/","text":"Lists the forwarding addresses for the specified account. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-list ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Forwarding Addresses List"},{"location":"users_settings-forwarding-addresses-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-forwarding-addresses-list ...","title":"Scopes"},{"location":"users_settings-forwarding-addresses-list/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-forwarding-addresses-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-forwarding-addresses-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-get-auto-forwarding/","text":"Gets the auto-forwarding setting for the specified account. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-auto-forwarding ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Get Auto Forwarding"},{"location":"users_settings-get-auto-forwarding/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-auto-forwarding ...","title":"Scopes"},{"location":"users_settings-get-auto-forwarding/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-get-auto-forwarding/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-get-auto-forwarding/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-get-imap/","text":"Gets IMAP settings. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-imap ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Get Imap"},{"location":"users_settings-get-imap/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-imap ...","title":"Scopes"},{"location":"users_settings-get-imap/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-get-imap/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-get-imap/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-get-language/","text":"Gets language settings. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-language ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Get Language"},{"location":"users_settings-get-language/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-language ...","title":"Scopes"},{"location":"users_settings-get-language/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-get-language/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-get-language/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-get-pop/","text":"Gets POP settings. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-pop ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Get Pop"},{"location":"users_settings-get-pop/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-pop ...","title":"Scopes"},{"location":"users_settings-get-pop/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-get-pop/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-get-pop/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-get-vacation/","text":"Gets vacation responder settings. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-vacation ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Get Vacation"},{"location":"users_settings-get-vacation/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-get-vacation ...","title":"Scopes"},{"location":"users_settings-get-vacation/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-get-vacation/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-get-vacation/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-create/","text":"Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to pending ; otherwise, the resource will be created with verification status set to accepted . If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-create ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SendAs: display-name: string is-default: boolean is-primary: boolean reply-to-address: string send-as-email: string signature: string smtp-msa: host: string password: string port: integer security-mode: string username: string treat-as-alias: boolean verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-name=eirmod A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail. is-default=true Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true . Changing this from false to true for an address will result in this field becoming false for the other previous default address. is-primary=true Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only. reply-to-address=erat An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header. send-as-email=dolores The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create. signature=erat An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only. smtp-msa host=accusam The hostname of the SMTP service. Required. password=sea The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. port=42 The port of the SMTP service. Required. security-mode=lorem The protocol that will be used to secure communication with the SMTP service. Required. username=et The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. .. treat-as-alias=false Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases. verification-status=dolor Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Create"},{"location":"users_settings-send-as-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-create ...","title":"Scopes"},{"location":"users_settings-send-as-create/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-send-as-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SendAs: display-name: string is-default: boolean is-primary: boolean reply-to-address: string send-as-email: string signature: string smtp-msa: host: string password: string port: integer security-mode: string username: string treat-as-alias: boolean verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-name=eirmod A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail. is-default=true Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true . Changing this from false to true for an address will result in this field becoming false for the other previous default address. is-primary=true Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only. reply-to-address=erat An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header. send-as-email=dolores The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create. signature=erat An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only. smtp-msa host=accusam The hostname of the SMTP service. Required. password=sea The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. port=42 The port of the SMTP service. Required. security-mode=lorem The protocol that will be used to secure communication with the SMTP service. Required. username=et The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. .. treat-as-alias=false Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases. verification-status=dolor Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.","title":"Required Request Value"},{"location":"users_settings-send-as-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-send-as-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-delete/","text":"Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-delete ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be deleted. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Delete"},{"location":"users_settings-send-as-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-delete ...","title":"Scopes"},{"location":"users_settings-send-as-delete/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be deleted.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-get/","text":"Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-get ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be retrieved. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Get"},{"location":"users_settings-send-as-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-get ...","title":"Scopes"},{"location":"users_settings-send-as-get/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be retrieved.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-list/","text":"Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-list ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As List"},{"location":"users_settings-send-as-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-list ...","title":"Scopes"},{"location":"users_settings-send-as-list/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-send-as-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-patch/","text":"Patch the specified send-as alias. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-patch ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be updated. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SendAs: display-name: string is-default: boolean is-primary: boolean reply-to-address: string send-as-email: string signature: string smtp-msa: host: string password: string port: integer security-mode: string username: string treat-as-alias: boolean verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-name=et A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail. is-default=true Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true . Changing this from false to true for an address will result in this field becoming false for the other previous default address. is-primary=false Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only. reply-to-address=sea An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header. send-as-email=nonumy The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create. signature=et An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only. smtp-msa host=gubergren The hostname of the SMTP service. Required. password=justo The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. port=41 The port of the SMTP service. Required. security-mode=consetetur The protocol that will be used to secure communication with the SMTP service. Required. username=sit The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. .. treat-as-alias=false Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases. verification-status=dolores Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Patch"},{"location":"users_settings-send-as-patch/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-patch ...","title":"Scopes"},{"location":"users_settings-send-as-patch/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be updated.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SendAs: display-name: string is-default: boolean is-primary: boolean reply-to-address: string send-as-email: string signature: string smtp-msa: host: string password: string port: integer security-mode: string username: string treat-as-alias: boolean verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-name=et A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail. is-default=true Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true . Changing this from false to true for an address will result in this field becoming false for the other previous default address. is-primary=false Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only. reply-to-address=sea An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header. send-as-email=nonumy The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create. signature=et An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only. smtp-msa host=gubergren The hostname of the SMTP service. Required. password=justo The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. port=41 The port of the SMTP service. Required. security-mode=consetetur The protocol that will be used to secure communication with the SMTP service. Required. username=sit The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. .. treat-as-alias=false Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases. verification-status=dolores Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.","title":"Required Request Value"},{"location":"users_settings-send-as-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-send-as-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-smime-info-delete/","text":"Deletes the specified S/MIME config for the specified send-as alias. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-delete ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. <id> (string) The immutable ID for the SmimeInfo. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Smime Info Delete"},{"location":"users_settings-send-as-smime-info-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-delete ...","title":"Scopes"},{"location":"users_settings-send-as-smime-info-delete/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. <id> (string) The immutable ID for the SmimeInfo.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-smime-info-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-smime-info-get/","text":"Gets the specified S/MIME config for the specified send-as alias. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-get ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. <id> (string) The immutable ID for the SmimeInfo. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Smime Info Get"},{"location":"users_settings-send-as-smime-info-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-get ...","title":"Scopes"},{"location":"users_settings-send-as-smime-info-get/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. <id> (string) The immutable ID for the SmimeInfo.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-smime-info-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-smime-info-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-smime-info-insert/","text":"Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-insert ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SmimeInfo: encrypted-key-password: string expiration: string id: string is-default: boolean issuer-cn: string pem: string pkcs12: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . encrypted-key-password=consetetur Encrypted key password, when key is encrypted. expiration=gubergren When the certificate expires (in milliseconds since epoch). id=dolor The immutable ID for the SmimeInfo. is-default=true Whether this SmimeInfo is the default one for this user's send-as address. issuer-cn=amet. The S/MIME certificate issuer's common name. pem=ipsum PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key). pkcs12=lorem PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Smime Info Insert"},{"location":"users_settings-send-as-smime-info-insert/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-insert ...","title":"Scopes"},{"location":"users_settings-send-as-smime-info-insert/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-smime-info-insert/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SmimeInfo: encrypted-key-password: string expiration: string id: string is-default: boolean issuer-cn: string pem: string pkcs12: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . encrypted-key-password=consetetur Encrypted key password, when key is encrypted. expiration=gubergren When the certificate expires (in milliseconds since epoch). id=dolor The immutable ID for the SmimeInfo. is-default=true Whether this SmimeInfo is the default one for this user's send-as address. issuer-cn=amet. The S/MIME certificate issuer's common name. pem=ipsum PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key). pkcs12=lorem PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.","title":"Required Request Value"},{"location":"users_settings-send-as-smime-info-insert/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-send-as-smime-info-insert/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-smime-info-insert/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-smime-info-list/","text":"Lists S/MIME configs for the specified send-as alias. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-list ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Smime Info List"},{"location":"users_settings-send-as-smime-info-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-list ...","title":"Scopes"},{"location":"users_settings-send-as-smime-info-list/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-smime-info-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-smime-info-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-smime-info-set-default/","text":"Sets the default S/MIME config for the specified send-as alias. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-set-default ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. <id> (string) The immutable ID for the SmimeInfo. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Smime Info Set Default"},{"location":"users_settings-send-as-smime-info-set-default/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-smime-info-set-default ...","title":"Scopes"},{"location":"users_settings-send-as-smime-info-set-default/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <send-as-email> (string) The email address that appears in the \"From:\" header for mail sent using this alias. <id> (string) The immutable ID for the SmimeInfo.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-smime-info-set-default/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-update/","text":"Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-update ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be updated. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SendAs: display-name: string is-default: boolean is-primary: boolean reply-to-address: string send-as-email: string signature: string smtp-msa: host: string password: string port: integer security-mode: string username: string treat-as-alias: boolean verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-name=accusam A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail. is-default=true Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true . Changing this from false to true for an address will result in this field becoming false for the other previous default address. is-primary=true Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only. reply-to-address=at An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header. send-as-email=sit The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create. signature=duo An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only. smtp-msa host=sit The hostname of the SMTP service. Required. password=magna The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. port=79 The port of the SMTP service. Required. security-mode=rebum. The protocol that will be used to secure communication with the SMTP service. Required. username=dolor The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. .. treat-as-alias=false Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases. verification-status=amet. Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Update"},{"location":"users_settings-send-as-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/gmail.settings.basic https://www.googleapis.com/auth/gmail.settings.sharing If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-update ...","title":"Scopes"},{"location":"users_settings-send-as-update/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be updated.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SendAs: display-name: string is-default: boolean is-primary: boolean reply-to-address: string send-as-email: string signature: string smtp-msa: host: string password: string port: integer security-mode: string username: string treat-as-alias: boolean verification-status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-name=accusam A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail. is-default=true Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is true . Changing this from false to true for an address will result in this field becoming false for the other previous default address. is-primary=true Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only. reply-to-address=at An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header. send-as-email=sit The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create. signature=duo An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only. smtp-msa host=sit The hostname of the SMTP service. Required. password=magna The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. port=79 The port of the SMTP service. Required. security-mode=rebum. The protocol that will be used to secure communication with the SMTP service. Required. username=dolor The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses. .. treat-as-alias=false Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases. verification-status=amet. Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.","title":"Required Request Value"},{"location":"users_settings-send-as-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-send-as-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-send-as-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-send-as-verify/","text":"Sends a verification email to the specified send-as alias address. The verification status must be pending . This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-verify ... Required Scalar Arguments <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be verified. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Send As Verify"},{"location":"users_settings-send-as-verify/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-send-as-verify ...","title":"Scopes"},{"location":"users_settings-send-as-verify/#required-scalar-arguments","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. <send-as-email> (string) The send-as alias to be verified.","title":"Required Scalar Arguments"},{"location":"users_settings-send-as-verify/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-update-auto-forwarding/","text":"Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-auto-forwarding ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: AutoForwarding: disposition: string email-address: string enabled: boolean can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . disposition=no The state that a message should be left in after it has been forwarded. email-address=nonumy Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses. enabled=true Whether all incoming mail is automatically forwarded to another address. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Update Auto Forwarding"},{"location":"users_settings-update-auto-forwarding/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.sharing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.sharing . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-auto-forwarding ...","title":"Scopes"},{"location":"users_settings-update-auto-forwarding/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-update-auto-forwarding/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: AutoForwarding: disposition: string email-address: string enabled: boolean can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . disposition=no The state that a message should be left in after it has been forwarded. email-address=nonumy Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses. enabled=true Whether all incoming mail is automatically forwarded to another address.","title":"Required Request Value"},{"location":"users_settings-update-auto-forwarding/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-update-auto-forwarding/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-update-auto-forwarding/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-update-imap/","text":"Updates IMAP settings. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-imap ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ImapSettings: auto-expunge: boolean enabled: boolean expunge-behavior: string max-folder-size: integer can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . auto-expunge=false If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted. enabled=true Whether IMAP is enabled for the account. expunge-behavior=nonumy The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder. max-folder-size=35 An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Update Imap"},{"location":"users_settings-update-imap/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-imap ...","title":"Scopes"},{"location":"users_settings-update-imap/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-update-imap/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ImapSettings: auto-expunge: boolean enabled: boolean expunge-behavior: string max-folder-size: integer can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . auto-expunge=false If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted. enabled=true Whether IMAP is enabled for the account. expunge-behavior=nonumy The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder. max-folder-size=35 An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.","title":"Required Request Value"},{"location":"users_settings-update-imap/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-update-imap/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-update-imap/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-update-language/","text":"Updates language settings. If successful, the return object contains the displayLanguage that was saved for the user, which may differ from the value passed into the request. This is because the requested displayLanguage may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-language ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LanguageSettings: display-language: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-language=tempor The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example en-GB , fr or ja for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the \"Language\" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default). About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Update Language"},{"location":"users_settings-update-language/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-language ...","title":"Scopes"},{"location":"users_settings-update-language/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-update-language/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LanguageSettings: display-language: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . display-language=tempor The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example en-GB , fr or ja for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the \"Language\" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).","title":"Required Request Value"},{"location":"users_settings-update-language/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-update-language/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-update-language/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-update-pop/","text":"Updates POP settings. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-pop ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: PopSettings: access-window: string disposition: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . access-window=dolore The range of messages which are accessible via POP. disposition=eos The action that will be executed on a message after it has been fetched via POP. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Update Pop"},{"location":"users_settings-update-pop/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-pop ...","title":"Scopes"},{"location":"users_settings-update-pop/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-update-pop/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: PopSettings: access-window: string disposition: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . access-window=dolore The range of messages which are accessible via POP. disposition=eos The action that will be executed on a message after it has been fetched via POP.","title":"Required Request Value"},{"location":"users_settings-update-pop/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-update-pop/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-update-pop/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_settings-update-vacation/","text":"Updates vacation responder settings. Scopes You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-vacation ... Required Scalar Argument <user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: VacationSettings: enable-auto-reply: boolean end-time: string response-body-html: string response-body-plain-text: string response-subject: string restrict-to-contacts: boolean restrict-to-domain: boolean start-time: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enable-auto-reply=true Flag that controls whether Gmail automatically replies to messages. end-time=dolore An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both startTime and endTime are specified, startTime must precede endTime . response-body-html=amet Response body in HTML format. Gmail will sanitize the HTML before storing it. If both response_body_plain_text and response_body_html are specified, response_body_html will be used. response-body-plain-text=ut Response body in plain text format. If both response_body_plain_text and response_body_html are specified, response_body_html will be used. response-subject=at Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty. restrict-to-contacts=true Flag that determines whether responses are sent to recipients who are not in the user's list of contacts. restrict-to-domain=false Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users. start-time=duo An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both startTime and endTime are specified, startTime must precede endTime . About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Settings Update Vacation"},{"location":"users_settings-update-vacation/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/gmail.settings.basic scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.settings.basic . You can set the scope for this method like this: gmail1 --scope <scope> users settings-update-vacation ...","title":"Scopes"},{"location":"users_settings-update-vacation/#required-scalar-argument","text":"<user-id> (string) User's email address. The special value \"me\" can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_settings-update-vacation/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: VacationSettings: enable-auto-reply: boolean end-time: string response-body-html: string response-body-plain-text: string response-subject: string restrict-to-contacts: boolean restrict-to-domain: boolean start-time: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enable-auto-reply=true Flag that controls whether Gmail automatically replies to messages. end-time=dolore An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both startTime and endTime are specified, startTime must precede endTime . response-body-html=amet Response body in HTML format. Gmail will sanitize the HTML before storing it. If both response_body_plain_text and response_body_html are specified, response_body_html will be used. response-body-plain-text=ut Response body in plain text format. If both response_body_plain_text and response_body_html are specified, response_body_html will be used. response-subject=at Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty. restrict-to-contacts=true Flag that determines whether responses are sent to recipients who are not in the user's list of contacts. restrict-to-domain=false Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users. start-time=duo An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both startTime and endTime are specified, startTime must precede endTime .","title":"Required Request Value"},{"location":"users_settings-update-vacation/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_settings-update-vacation/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_settings-update-vacation/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_stop/","text":"Stop receiving push notifications for the given user mailbox. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users stop ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Stop"},{"location":"users_stop/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users stop ...","title":"Scopes"},{"location":"users_stop/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_stop/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_threads-delete/","text":"Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer threads.trash instead. Scopes You will need authorization for the https://mail.google.com/ scope to make a valid call. If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-delete ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) ID of the Thread to delete. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Threads Delete"},{"location":"users_threads-delete/#scopes","text":"You will need authorization for the https://mail.google.com/ scope to make a valid call. If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-delete ...","title":"Scopes"},{"location":"users_threads-delete/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) ID of the Thread to delete.","title":"Required Scalar Arguments"},{"location":"users_threads-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_threads-get/","text":"Gets the specified thread. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.message.action https://www.googleapis.com/auth/gmail.addons.current.message.metadata https://www.googleapis.com/auth/gmail.addons.current.message.readonly https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.addons.current.message.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users threads-get ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to retrieve. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p format=string The format to return the messages in. -p metadata-headers=string When given and format is METADATA, only include headers specified. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Threads Get"},{"location":"users_threads-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.addons.current.message.action https://www.googleapis.com/auth/gmail.addons.current.message.metadata https://www.googleapis.com/auth/gmail.addons.current.message.readonly https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.addons.current.message.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users threads-get ...","title":"Scopes"},{"location":"users_threads-get/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to retrieve.","title":"Required Scalar Arguments"},{"location":"users_threads-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_threads-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p format=string The format to return the messages in. -p metadata-headers=string When given and format is METADATA, only include headers specified.","title":"Optional Method Properties"},{"location":"users_threads-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_threads-list/","text":"Lists the threads in the user's mailbox. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users threads-list ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-spam-trash=boolean Include threads from SPAM and TRASH in the results. -p label-ids=string Only return threads with labels that match all of the specified label IDs. -p max-results=integer Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p q=string Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . Parameter cannot be used when accessing the api using the gmail.metadata scope. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Threads List"},{"location":"users_threads-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/gmail.readonly . You can set the scope for this method like this: gmail1 --scope <scope> users threads-list ...","title":"Scopes"},{"location":"users_threads-list/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_threads-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_threads-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-spam-trash=boolean Include threads from SPAM and TRASH in the results. -p label-ids=string Only return threads with labels that match all of the specified label IDs. -p max-results=integer Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500. -p page-token=string Page token to retrieve a specific page of results in the list. -p q=string Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, &#34;from:someuser@example.com rfc822msgid: is:unread&#34; . Parameter cannot be used when accessing the api using the gmail.metadata scope.","title":"Optional Method Properties"},{"location":"users_threads-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_threads-modify/","text":"Modifies the labels applied to the thread. This applies to all messages in the thread. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-modify ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to modify. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ModifyThreadRequest: add-label-ids: [string] remove-label-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . add-label-ids=sadipscing A list of IDs of labels to add to this thread. You can add up to 100 labels with each update. Each invocation of this argument appends the given value to the array. remove-label-ids=ut A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Threads Modify"},{"location":"users_threads-modify/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-modify ...","title":"Scopes"},{"location":"users_threads-modify/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to modify.","title":"Required Scalar Arguments"},{"location":"users_threads-modify/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ModifyThreadRequest: add-label-ids: [string] remove-label-ids: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . add-label-ids=sadipscing A list of IDs of labels to add to this thread. You can add up to 100 labels with each update. Each invocation of this argument appends the given value to the array. remove-label-ids=ut A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"users_threads-modify/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_threads-modify/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_threads-modify/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_threads-trash/","text":"Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-trash ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to Trash. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Threads Trash"},{"location":"users_threads-trash/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-trash ...","title":"Scopes"},{"location":"users_threads-trash/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to Trash.","title":"Required Scalar Arguments"},{"location":"users_threads-trash/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_threads-trash/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_threads-untrash/","text":"Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-untrash ... Required Scalar Arguments <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to remove from Trash. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Threads Untrash"},{"location":"users_threads-untrash/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users threads-untrash ...","title":"Scopes"},{"location":"users_threads-untrash/#required-scalar-arguments","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. <id> (string) The ID of the thread to remove from Trash.","title":"Required Scalar Arguments"},{"location":"users_threads-untrash/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_threads-untrash/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"users_watch/","text":"Set up or update a push notification watch on the given user mailbox. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users watch ... Required Scalar Argument <user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: WatchRequest: label-filter-action: string label-filter-behavior: string label-ids: [string] topic-name: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . label-filter-action=rebum. Filtering behavior of labelIds list specified. This field is deprecated because it caused incorrect behavior in some cases; use label_filter_behavior instead. label-filter-behavior=duo Filtering behavior of labelIds list specified. This field replaces label_filter_action ; if set, label_filter_action is ignored. label-ids=kasd List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated. Each invocation of this argument appends the given value to the array. topic-name=sadipscing A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name must already exist in Cloud Pub/Sub and you must have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request). About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Watch"},{"location":"users_watch/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://mail.google.com/ https://www.googleapis.com/auth/gmail.metadata https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly If unset, the scope for this method defaults to https://mail.google.com/ . You can set the scope for this method like this: gmail1 --scope <scope> users watch ...","title":"Scopes"},{"location":"users_watch/#required-scalar-argument","text":"<user-id> (string) The user's email address. The special value me can be used to indicate the authenticated user.","title":"Required Scalar Argument"},{"location":"users_watch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: WatchRequest: label-filter-action: string label-filter-behavior: string label-ids: [string] topic-name: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . label-filter-action=rebum. Filtering behavior of labelIds list specified. This field is deprecated because it caused incorrect behavior in some cases; use label_filter_behavior instead. label-filter-behavior=duo Filtering behavior of labelIds list specified. This field replaces label_filter_action ; if set, label_filter_action is ignored. label-ids=kasd List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated. Each invocation of this argument appends the given value to the array. topic-name=sadipscing A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name must already exist in Cloud Pub/Sub and you must have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).","title":"Required Request Value"},{"location":"users_watch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"users_watch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"users_watch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}