initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["ActivateConsentRequest","Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the given Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the `REJECTED` or `REVOKED` state."],["ArchiveUserDataMappingRequest","Archives the specified User data mapping."],["ArchiveUserDataMappingResponse","Archives the specified User data mapping."],["Attribute","An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values."],["AttributeDefinition","A client-defined consent attribute."],["AuditConfig","Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging."],["AuditLogConfig","Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging."],["Binding","Associates `members` with a `role`."],["CancelOperationRequest","The request message for Operations.CancelOperation."],["CharacterMaskConfig","Mask a string by replacing its characters with a fixed character."],["CheckDataAccessRequest","Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use."],["CheckDataAccessResponse","Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use."],["CloudHealthcare","Central instance to access all CloudHealthcare related resource activities"],["Consent","Represents a user's consent."],["ConsentArtifact","Documentation of a user's consent."],["ConsentEvaluation","The detailed evaluation of a particular Consent."],["ConsentList","List of resource names of Consent resources."],["ConsentStore","Represents a consent store."],["CreateMessageRequest","Creates a new message."],["CryptoHashConfig","Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`)."],["Dataset","A message representing a health dataset. A health dataset represents a collection of healthcare data pertaining to one or more patients. This may include multiple modalities of healthcare data, such as electronic medical records or medical imaging data."],["DateShiftConfig","Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination."],["DeidentifyConfig","Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime."],["DeidentifyDatasetRequest","Redacts identifying information from the specified dataset."],["DeidentifyDicomStoreRequest","Creates a new DICOM store with sensitive information de-identified."],["DeidentifyFhirStoreRequest","Creates a new FHIR store with sensitive information de-identified."],["DicomConfig","Specifies the parameters needed for de-identification of DICOM stores."],["DicomFilterConfig","Specifies the filter configuration for DICOM resources."],["DicomStore","Represents a DICOM store."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["EvaluateUserConsentsRequest","Evaluate a user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results."],["EvaluateUserConsentsResponse","There is no detailed description."],["ExportDicomDataRequest","Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted."],["ExportResourcesRequest","Request to export resources."],["Expr","Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."],["FhirConfig","Specifies how to handle de-identification of a FHIR store."],["FhirFilter","Filter configuration."],["FhirStore","Represents a FHIR store."],["Field","A (sub) field of a type."],["FieldMetadata","Specifies FHIR paths to match, and how to handle de-identification of matching fields."],["GoogleCloudHealthcareV1ConsentGcsDestination","The Cloud Storage location for export."],["GoogleCloudHealthcareV1ConsentPolicy","Represents a user's consent in terms of the resources that can be accessed and under what conditions."],["GoogleCloudHealthcareV1DicomBigQueryDestination","The BigQuery table where the server writes the output."],["GoogleCloudHealthcareV1DicomGcsDestination","The Cloud Storage location where the server writes the output and the export configuration."],["GoogleCloudHealthcareV1DicomGcsSource","Specifies the configuration for importing data from Cloud Storage."],["GoogleCloudHealthcareV1FhirBigQueryDestination","The configuration for exporting to BigQuery."],["GoogleCloudHealthcareV1FhirGcsDestination","The configuration for exporting to Cloud Storage."],["GoogleCloudHealthcareV1FhirGcsSource","Specifies the configuration for importing data from Cloud Storage."],["GroupOrSegment","Construct representing a logical group or a segment."],["Hl7SchemaConfig","Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to."],["Hl7TypesConfig","Root config for HL7v2 datatype definitions for a specific HL7v2 version."],["Hl7V2NotificationConfig","Specifies where and whether to send notifications upon changes to a data store."],["Hl7V2Store","Represents an HL7v2 store."],["HttpBody","Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."],["Image","Raw bytes representing consent artifact content."],["ImageConfig","Specifies how to handle de-identification of image pixels."],["ImportDicomDataRequest","Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite."],["ImportResourcesRequest","Request to import resources."],["InfoTypeTransformation","A transformation to apply to text that is identified as a specific info_type."],["IngestMessageRequest","Ingests a message into the specified HL7v2 store."],["IngestMessageResponse","Acknowledges that a message has been ingested into the specified HL7v2 store."],["ListAttributeDefinitionsResponse","There is no detailed description."],["ListConsentArtifactsResponse","There is no detailed description."],["ListConsentRevisionsResponse","There is no detailed description."],["ListConsentStoresResponse","There is no detailed description."],["ListConsentsResponse","There is no detailed description."],["ListDatasetsResponse","Lists the available datasets."],["ListDicomStoresResponse","Lists the DICOM stores in the given dataset."],["ListFhirStoresResponse","Lists the FHIR stores in the given dataset."],["ListHl7V2StoresResponse","Lists the HL7v2 stores in the given dataset."],["ListLocationsResponse","The response message for Locations.ListLocations."],["ListMessagesResponse","Lists the messages in the specified HL7v2 store."],["ListOperationsResponse","The response message for Operations.ListOperations."],["ListUserDataMappingsResponse","There is no detailed description."],["Location","A resource that represents Google Cloud Platform location."],["Message","A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard."],["NotificationConfig","Specifies where to send notifications upon changes to a data store."],["Operation","This resource represents a long-running operation that is the result of a network API call."],["ParsedData","The content of a HL7v2 message in a structured format."],["ParserConfig","The configuration for the parser. It determines how the server parses the messages."],["PatientId","A patient identifier and associated type."],["Policy","An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation. JSON example: { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the IAM documentation."],["ProjectLocationDatasetConsentStoreAttributeDefinitionCreateCall","Creates a new Attribute definition in the parent consent store."],["ProjectLocationDatasetConsentStoreAttributeDefinitionDeleteCall","Deletes the specified Attribute definition. Fails if the Attribute definition is referenced by any User data mapping, or the latest revision of any Consent."],["ProjectLocationDatasetConsentStoreAttributeDefinitionGetCall","Gets the specified Attribute definition."],["ProjectLocationDatasetConsentStoreAttributeDefinitionListCall","Lists the Attribute definitions in the specified consent store."],["ProjectLocationDatasetConsentStoreAttributeDefinitionPatchCall","Updates the specified Attribute definition."],["ProjectLocationDatasetConsentStoreCheckDataAccesCall","Checks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use."],["ProjectLocationDatasetConsentStoreConsentActivateCall","Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state."],["ProjectLocationDatasetConsentStoreConsentArtifactCreateCall","Creates a new Consent artifact in the parent consent store."],["ProjectLocationDatasetConsentStoreConsentArtifactDeleteCall","Deletes the specified Consent artifact. Fails if the artifact is referenced by the latest revision of any Consent."],["ProjectLocationDatasetConsentStoreConsentArtifactGetCall","Gets the specified Consent artifact."],["ProjectLocationDatasetConsentStoreConsentArtifactListCall","Lists the Consent artifacts in the specified consent store."],["ProjectLocationDatasetConsentStoreConsentCreateCall","Creates a new Consent in the parent consent store."],["ProjectLocationDatasetConsentStoreConsentDeleteCall","Deletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This operation does not delete the related Consent artifact."],["ProjectLocationDatasetConsentStoreConsentDeleteRevisionCall","Deletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision."],["ProjectLocationDatasetConsentStoreConsentGetCall","Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name."],["ProjectLocationDatasetConsentStoreConsentListCall","Lists the Consent in the given consent store, returning each Consent's latest revision."],["ProjectLocationDatasetConsentStoreConsentListRevisionCall","Lists the revisions of the specified Consent in reverse chronological order."],["ProjectLocationDatasetConsentStoreConsentPatchCall","Updates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state."],["ProjectLocationDatasetConsentStoreConsentRejectCall","Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state."],["ProjectLocationDatasetConsentStoreConsentRevokeCall","Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state."],["ProjectLocationDatasetConsentStoreCreateCall","Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error."],["ProjectLocationDatasetConsentStoreDeleteCall","Deletes the specified consent store and removes all the consent store's data."],["ProjectLocationDatasetConsentStoreEvaluateUserConsentCall","Evaluates the user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are created or updated and when they are included in EvaluateUserConsents results."],["ProjectLocationDatasetConsentStoreGetCall","Gets the specified consent store."],["ProjectLocationDatasetConsentStoreGetIamPolicyCall","Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."],["ProjectLocationDatasetConsentStoreListCall","Lists the consent stores in the specified dataset."],["ProjectLocationDatasetConsentStorePatchCall","Updates the specified consent store."],["ProjectLocationDatasetConsentStoreQueryAccessibleDataCall","Queries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see Viewing error logs in Cloud Logging). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. `json jsonPayload: { @type: \"type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry\" error: { code: 9 message: \"failed to evaluate consent policy\" } resourceName: \"projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\" } logName: \"projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data\" operation: { id: \"projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}\" producer: \"healthcare.googleapis.com/QueryAccessibleData\" } receiveTimestamp: \"TIMESTAMP\" resource: { labels: { consent_store_id: \"{consent_store_id}\" dataset_id: \"{dataset_id}\" location: \"{location_id}\" project_id: \"{project_id}\" } type: \"healthcare_consent_store\" } severity: \"ERROR\" timestamp: \"TIMESTAMP\" `"],["ProjectLocationDatasetConsentStoreSetIamPolicyCall","Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."],["ProjectLocationDatasetConsentStoreTestIamPermissionCall","Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."],["ProjectLocationDatasetConsentStoreUserDataMappingArchiveCall","Archives the specified User data mapping."],["ProjectLocationDatasetConsentStoreUserDataMappingCreateCall","Creates a new User data mapping in the parent consent store."],["ProjectLocationDatasetConsentStoreUserDataMappingDeleteCall","Deletes the specified User data mapping."],["ProjectLocationDatasetConsentStoreUserDataMappingGetCall","Gets the specified User data mapping."],["ProjectLocationDatasetConsentStoreUserDataMappingListCall","Lists the User data mappings in the specified consent store."],["ProjectLocationDatasetConsentStoreUserDataMappingPatchCall","Updates the specified User data mapping."],["ProjectLocationDatasetCreateCall","Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata."],["ProjectLocationDatasetDeidentifyCall","Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging. For more information, see Viewing error logs in Cloud Logging."],["ProjectLocationDatasetDeleteCall","Deletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any)."],["ProjectLocationDatasetDicomStoreCreateCall","Creates a new DICOM store within the parent dataset."],["ProjectLocationDatasetDicomStoreDeidentifyCall","De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyDicomStoreSummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The output DICOM store will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging (see Viewing error logs in Cloud Logging)."],["ProjectLocationDatasetDicomStoreDeleteCall","Deletes the specified DICOM store and removes all images that are contained within it."],["ProjectLocationDatasetDicomStoreExportCall","Exports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see Viewing error logs in Cloud Logging. The metadata field type is OperationMetadata."],["ProjectLocationDatasetDicomStoreGetCall","Gets the specified DICOM store."],["ProjectLocationDatasetDicomStoreGetIamPolicyCall","Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."],["ProjectLocationDatasetDicomStoreImportCall","Imports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see Viewing error logs in Cloud Logging. The metadata field type is OperationMetadata."],["ProjectLocationDatasetDicomStoreListCall","Lists the DICOM stores in the given dataset."],["ProjectLocationDatasetDicomStorePatchCall","Updates the specified DICOM store."],["ProjectLocationDatasetDicomStoreSearchForInstanceCall","SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see Search transaction in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see Searching for studies, series, instances, and frames."],["ProjectLocationDatasetDicomStoreSearchForSeryCall","SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see Search transaction in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see Searching for studies, series, instances, and frames."],["ProjectLocationDatasetDicomStoreSearchForStudyCall","SearchForStudies returns a list of matching studies. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForStudies, see Search transaction in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForStudies, see Searching for studies, series, instances, and frames."],["ProjectLocationDatasetDicomStoreSetIamPolicyCall","Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."],["ProjectLocationDatasetDicomStoreStoreInstanceCall","StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see Store transaction in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see Storing DICOM data."],["ProjectLocationDatasetDicomStoreStudyDeleteCall","DeleteStudy deletes all instances within the given study. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Inserting instances into a study while a delete operation is running for that study could result in the new instances not appearing in search results until the deletion operation finishes. For samples that show how to call DeleteStudy, see Deleting a study, series, or instance."],["ProjectLocationDatasetDicomStoreStudyRetrieveMetadataCall","RetrieveStudyMetadata returns instance associated with the given study presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudyMetadata, see Metadata resources in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudyMetadata, see Retrieving metadata."],["ProjectLocationDatasetDicomStoreStudyRetrieveStudyCall","RetrieveStudy returns all instances within the given study. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudy, see DICOM study/series/instances in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudy, see Retrieving DICOM data."],["ProjectLocationDatasetDicomStoreStudySearchForInstanceCall","SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see Search transaction in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see Searching for studies, series, instances, and frames."],["ProjectLocationDatasetDicomStoreStudySearchForSeryCall","SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see Search transaction in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see Searching for studies, series, instances, and frames."],["ProjectLocationDatasetDicomStoreStudySeryDeleteCall","DeleteSeries deletes all instances within the given study and series. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Inserting instances into a series while a delete operation is running for that series could result in the new instances not appearing in search results until the deletion operation finishes. For samples that show how to call DeleteSeries, see Deleting a study, series, or instance."],["ProjectLocationDatasetDicomStoreStudySeryInstanceDeleteCall","DeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance, see Deleting a study, series, or instance."],["ProjectLocationDatasetDicomStoreStudySeryInstanceFrameRetrieveFrameCall","RetrieveFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}. For details on the implementation of RetrieveFrames, see DICOM frames in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveFrames, see Retrieving DICOM data."],["ProjectLocationDatasetDicomStoreStudySeryInstanceFrameRetrieveRenderedCall","RetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see Rendered resources in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedFrames, see Retrieving consumer image formats."],["ProjectLocationDatasetDicomStoreStudySeryInstanceRetrieveInstanceCall","RetrieveInstance returns instance associated with the given study, series, and SOP Instance UID. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstance, see DICOM study/series/instances and DICOM instances in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstance, see Retrieving an instance."],["ProjectLocationDatasetDicomStoreStudySeryInstanceRetrieveMetadataCall","RetrieveInstanceMetadata returns instance associated with the given study, series, and SOP Instance UID presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstanceMetadata, see Metadata resources in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstanceMetadata, see Retrieving metadata."],["ProjectLocationDatasetDicomStoreStudySeryInstanceRetrieveRenderedCall","RetrieveRenderedInstance returns instance associated with the given study, series, and SOP Instance UID in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedInstance, see Rendered resources in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedInstance, see Retrieving consumer image formats."],["ProjectLocationDatasetDicomStoreStudySeryRetrieveMetadataCall","RetrieveSeriesMetadata returns instance associated with the given study and series, presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeriesMetadata, see Metadata resources in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeriesMetadata, see Retrieving metadata."],["ProjectLocationDatasetDicomStoreStudySeryRetrieveSeryCall","RetrieveSeries returns all instances within the given study and series. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeries, see DICOM study/series/instances in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeries, see Retrieving DICOM data."],["ProjectLocationDatasetDicomStoreStudySerySearchForInstanceCall","SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see Search transaction in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see Searching for studies, series, instances, and frames."],["ProjectLocationDatasetDicomStoreStudyStoreInstanceCall","StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see Store transaction in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see Storing DICOM data."],["ProjectLocationDatasetDicomStoreTestIamPermissionCall","Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."],["ProjectLocationDatasetFhirStoreCreateCall","Creates a new FHIR store within the parent dataset."],["ProjectLocationDatasetFhirStoreDeidentifyCall","De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyFhirStoreSummary. If errors occur, error is set. Error details are also logged to Cloud Logging (see Viewing error logs in Cloud Logging)."],["ProjectLocationDatasetFhirStoreDeleteCall","Deletes the specified FHIR store and removes all resources within it."],["ProjectLocationDatasetFhirStoreExportCall","Export resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see Viewing error logs in Cloud Logging). Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."],["ProjectLocationDatasetFhirStoreFhirCapabilityCall","Gets the FHIR capability statement (STU3, R4), or the conformance statement in the DSTU2 case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction (STU3, R4), or the conformance interaction in the DSTU2 case. On success, the response body contains a JSON-encoded representation of a `CapabilityStatement` resource."],["ProjectLocationDatasetFhirStoreFhirCreateCall","Creates a FHIR resource. Implements the FHIR standard create interaction (DSTU2, STU3, R4), which creates a new resource with a server-assigned resource ID. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see Creating a FHIR resource."],["ProjectLocationDatasetFhirStoreFhirDeleteCall","Deletes a FHIR resource. Implements the FHIR standard delete interaction (DSTU2, STU3, R4). Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resources will be moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `delete`, see Deleting a FHIR resource."],["ProjectLocationDatasetFhirStoreFhirExecuteBundleCall","Executes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction (DSTU2, STU3, R4). Supports all interactions within a bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules (DSTU2, STU3, R4) and transaction processing rules (DSTU2, STU3, R4). The request body must contain a JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction the response body will contain a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of processing the entry. In the case of an error for a transaction bundle, the response body will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `executeBundle`, see Managing FHIR resources using FHIR bundles."],["ProjectLocationDatasetFhirStoreFhirHistoryCall","Lists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction (DSTU2, STU3, R4). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `history`, containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see Listing FHIR resource versions."],["ProjectLocationDatasetFhirStoreFhirPatchCall","Updates part of an existing resource by applying the operations specified in a JSON Patch document. Implements the FHIR standard patch interaction (STU3, R4). DSTU2 doesn't define a patch method, but the server supports it in the same way it supports STU3. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `patch`, see Patching a FHIR resource."],["ProjectLocationDatasetFhirStoreFhirPatientEverythingCall","Retrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything (DSTU2, STU3, R4). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria are based on the membership rules in the patient compartment definition (DSTU2, STU3, R4), which details the eligible resource types and referencing search parameters. For samples that show how to call `Patient-everything`, see Getting all patient compartment resources."],["ProjectLocationDatasetFhirStoreFhirReadCall","Gets the contents of a FHIR resource. Implements the FHIR standard read interaction (DSTU2, STU3, R4). Also supports the FHIR standard conditional read interaction (DSTU2, STU3, R4) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag value. On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `read`, see Getting a FHIR resource."],["ProjectLocationDatasetFhirStoreFhirResourcePurgeCall","Deletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see Deleting historical versions of a FHIR resource."],["ProjectLocationDatasetFhirStoreFhirSearchCall","Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction (DSTU2, STU3, R4) using the search semantics described in the FHIR Search specification (DSTU2, STU3, R4). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry (STU3, R4). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`. Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` will contain pagination links. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see Searching for FHIR resources and Advanced FHIR search features."],["ProjectLocationDatasetFhirStoreFhirSearchTypeCall","Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction (DSTU2, STU3, R4) using the search semantics described in the FHIR Search specification (DSTU2, STU3, R4). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry (STU3, R4). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`. Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` will contain pagination links. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see Searching for FHIR resources and Advanced FHIR search features."],["ProjectLocationDatasetFhirStoreFhirUpdateCall","Updates the entire contents of a resource. Implements the FHIR standard update interaction (DSTU2, STU3, R4). If the specified resource does not exist and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see Updating a FHIR resource."],["ProjectLocationDatasetFhirStoreFhirVreadCall","Gets the contents of a version (current or historical) of a FHIR resource by version ID. Implements the FHIR standard vread interaction (DSTU2, STU3, R4). On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `vread`, see Retrieving a FHIR resource version."],["ProjectLocationDatasetFhirStoreGetCall","Gets the configuration of the specified FHIR store."],["ProjectLocationDatasetFhirStoreGetIamPolicyCall","Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."],["ProjectLocationDatasetFhirStoreImportCall","Imports resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the supplied ID regardless of the enable_update_create setting on the FHIR store. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub/Sub notification or BigQuery streaming update, regardless of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, it's possible that successfully imported resources will be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it will have. The operation result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format of the input data is specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles. Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see Viewing error logs in Cloud Logging). Otherwise, when the operation finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."],["ProjectLocationDatasetFhirStoreListCall","Lists the FHIR stores in the given dataset."],["ProjectLocationDatasetFhirStorePatchCall","Updates the configuration of the specified FHIR store."],["ProjectLocationDatasetFhirStoreSetIamPolicyCall","Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."],["ProjectLocationDatasetFhirStoreTestIamPermissionCall","Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."],["ProjectLocationDatasetGetCall","Gets any metadata associated with a dataset."],["ProjectLocationDatasetGetIamPolicyCall","Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."],["ProjectLocationDatasetHl7V2StoreCreateCall","Creates a new HL7v2 store within the parent dataset."],["ProjectLocationDatasetHl7V2StoreDeleteCall","Deletes the specified HL7v2 store and removes all messages that it contains."],["ProjectLocationDatasetHl7V2StoreGetCall","Gets the specified HL7v2 store."],["ProjectLocationDatasetHl7V2StoreGetIamPolicyCall","Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."],["ProjectLocationDatasetHl7V2StoreListCall","Lists the HL7v2 stores in the given dataset."],["ProjectLocationDatasetHl7V2StoreMessageCreateCall","Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received."],["ProjectLocationDatasetHl7V2StoreMessageDeleteCall","Deletes an HL7v2 message."],["ProjectLocationDatasetHl7V2StoreMessageGetCall","Gets an HL7v2 message."],["ProjectLocationDatasetHl7V2StoreMessageIngestCall","Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received. If the method is successful, it generates a response containing an HL7v2 acknowledgment (`ACK`) message. If the method encounters an error, it returns a negative acknowledgment (`NACK`) message. This behavior is suitable for replying to HL7v2 interface systems that expect these acknowledgments."],["ProjectLocationDatasetHl7V2StoreMessageListCall","Lists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message is created and when it can be found through a filter."],["ProjectLocationDatasetHl7V2StoreMessagePatchCall","Update the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time cannot be altered. Only the Message.labels field is allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated."],["ProjectLocationDatasetHl7V2StorePatchCall","Updates the HL7v2 store."],["ProjectLocationDatasetHl7V2StoreSetIamPolicyCall","Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."],["ProjectLocationDatasetHl7V2StoreTestIamPermissionCall","Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."],["ProjectLocationDatasetListCall","Lists the health datasets in the current project."],["ProjectLocationDatasetOperationCancelCall","Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."],["ProjectLocationDatasetOperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."],["ProjectLocationDatasetOperationListCall","Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."],["ProjectLocationDatasetPatchCall","Updates dataset metadata."],["ProjectLocationDatasetSetIamPolicyCall","Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."],["ProjectLocationDatasetTestIamPermissionCall","Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."],["ProjectLocationGetCall","Gets information about a location."],["ProjectLocationListCall","Lists information about the supported locations for this service."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `CloudHealthcare` hub."],["QueryAccessibleDataRequest","Queries all data_ids that are consented for a given use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging] (https://cloud.google.com/healthcare/docs/how-tos/logging) and [QueryAccessibleData] for a sample log entry)."],["RedactConfig","Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\""],["RejectConsentRequest","Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the given Consent is in the `REJECTED` state, no new revision is committed."],["ReplaceWithInfoTypeConfig","When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting."],["Resources","A list of FHIR resources."],["Result","The consent evaluation result for a single `data_id`."],["RevokeConsentRequest","Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given Consent is in the `REVOKED` state, no new revision is committed."],["SchemaConfig","Configuration for the FHIR BigQuery schema. Determines how the server generates the schema."],["SchemaGroup","An HL7v2 logical group construct."],["SchemaPackage","A schema package contains a set of schemas and type definitions."],["SchemaSegment","An HL7v2 Segment."],["SchematizedData","The content of an HL7v2 message in a structured format as specified by a schema."],["SearchResourcesRequest","Request to search the resources in the specified FHIR store."],["Segment","A segment in a structured format."],["SetIamPolicyRequest","Request message for `SetIamPolicy` method."],["Signature","User signature."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."],["StreamConfig","Contains configuration for streaming FHIR export."],["TagFilterList","List of tags to be filtered."],["TestIamPermissionsRequest","Request message for `TestIamPermissions` method."],["TestIamPermissionsResponse","Response message for `TestIamPermissions` method."],["TextConfig","There is no detailed description."],["Type","A type definition for some HL7v2 type (incl. Segments and Datatypes)."],["UserDataMapping","Maps a resource to the associated user and Attributes."],["VersionSource","Describes a selector for extracting and matching an MSH field to a value."]]});