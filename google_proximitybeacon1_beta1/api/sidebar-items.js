initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["AdvertisedId","Defines a unique identifier of a beacon as broadcast by the device."],["AttachmentInfo","A subset of attachment information served via the `beaconinfo.getforobserved` method, used when your users encounter your beacons."],["Beacon","Details of a beacon device."],["BeaconActivateCall","Activates a beacon. A beacon that is active will return information and attachment data when queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will do nothing (but will return a successful response code)."],["BeaconAttachment","Project-specific data associated with a beacon."],["BeaconAttachmentBatchDeleteCall","Deletes multiple attachments on a given beacon. This operation is permanent and cannot be undone."],["BeaconAttachmentCreateCall","Associates the given data with the specified beacon. Attachment data must contain two parts:"],["BeaconAttachmentDeleteCall","Deletes the specified attachment for the given beacon. Each attachment has a unique attachment name (`attachmentName`) which is returned when you fetch the attachment data via this API. You specify this with the delete request to control which attachment is removed. This operation cannot be undone."],["BeaconAttachmentListCall","Returns the attachments for the specified beacon that match the specified namespaced-type pattern."],["BeaconDeactivateCall","Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already inactive beacon will do nothing (but will return a successful response code)."],["BeaconDecommissionCall","Decommissions the specified beacon in the service. This beacon will no longer be returned from `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register a beacon with this ID again."],["BeaconDeleteCall","Deletes the specified beacon including all diagnostics data for the beacon as well as any attachments on the beacon (including those belonging to other projects). This operation cannot be undone."],["BeaconDiagnosticListCall","List the diagnostics for a single beacon. You can also list diagnostics for all the beacons owned by your Google Developers Console project by using the beacon name `beacons/-`."],["BeaconGetCall","Returns detailed information about the specified beacon."],["BeaconInfo","A subset of beacon information served via the `beaconinfo.getforobserved` method, which you call when users of your app encounter your beacons."],["BeaconListCall","Searches the beacon registry for beacons that match the given search criteria. Only those beacons that the client has permission to list will be returned."],["BeaconMethods","A builder providing access to all methods supported on beacon resources. It is not used directly, but through the `Proximitybeacon` hub."],["BeaconRegisterCall","Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique within the system. An ID can be registered only once."],["BeaconUpdateCall","Updates the information about the specified beacon. Any field that you do not populate in the submitted beacon will be permanently erased, so you should follow the \"read, modify, write\" pattern to avoid inadvertently destroying data."],["BeaconinfoGetforobservedCall","Given one or more beacon observations, returns any beacon information and attachments accessible to your application. Authorize by using the API key for the application."],["BeaconinfoMethods","A builder providing access to all methods supported on beaconinfo resources. It is not used directly, but through the `Proximitybeacon` hub."],["Date","Represents a whole or partial calendar date, e.g. a birthday. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the Proleptic Gregorian Calendar. This can represent:"],["DeleteAttachmentsResponse","Response for a request to delete attachments."],["Diagnostics","Diagnostics for a single beacon."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:"],["EphemeralIdRegistration","Write-only registration parameters for beacons using Eddystone-EID format. Two ways of securely registering an Eddystone-EID beacon with the service are supported:"],["EphemeralIdRegistrationParams","Information a client needs to provision and register beacons that broadcast Eddystone-EID format beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See the Eddystone specification at GitHub."],["GetInfoForObservedBeaconsRequest","Request for beacon and attachment information about beacons that a mobile client has encountered \"in the wild\"."],["GetInfoForObservedBeaconsResponse","Information about the requested beacons, optionally including attachment data."],["IndoorLevel","Indoor level, a human-readable string as returned by Google Maps APIs, useful to indicate which floor of a building a beacon is located on."],["LatLng","An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges."],["ListBeaconAttachmentsResponse","Response to `ListBeaconAttachments` that contains the requested attachments."],["ListBeaconsResponse","Response that contains list beacon results and pagination help."],["ListDiagnosticsResponse","Response that contains the requested diagnostics."],["ListNamespacesResponse","Response to ListNamespacesRequest that contains all the project's namespaces."],["MethodGetEidparamCall","Gets the Proximity Beacon API's current public key and associated parameters used to initiate the Diffie-Hellman key exchange required to register a beacon that broadcasts the Eddystone-EID format. This key changes periodically; clients may cache it and re-use the same public key to provision and register multiple beacons. However, clients should be prepared to refresh this key when they encounter an error registering an Eddystone-EID beacon."],["MethodMethods","A builder providing access to all free methods, which are not associated with a particular resource. It is not used directly, but through the `Proximitybeacon` hub."],["Namespace","An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it."],["NamespaceListCall","Lists all attachment namespaces owned by your Google Developers Console project. Attachment data associated with a beacon must include a namespaced type, and the namespace must be owned by your project."],["NamespaceMethods","A builder providing access to all methods supported on namespace resources. It is not used directly, but through the `Proximitybeacon` hub."],["NamespaceUpdateCall","Updates the information about the specified namespace. Only the namespace visibility can be updated."],["Observation","Represents one beacon observed once."],["Proximitybeacon","Central instance to access all Proximitybeacon related resource activities"]]});