initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["AppEngineHttpTarget","App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt."],["AppEngineRouting","App Engine Routing. For more information about services, versions, and instances see An Overview of App Engine, Microservices Architecture on Google App Engine, App Engine Standard request routing, and App Engine Flex request routing."],["CloudScheduler","Central instance to access all CloudScheduler related resource activities"],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["HttpTarget","Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered."],["Job","Configuration for a job. The maximum allowed size for a job is 100KB."],["ListJobsResponse","Response message for listing jobs using ListJobs."],["ListLocationsResponse","The response message for Locations.ListLocations."],["Location","A resource that represents Google Cloud Platform location."],["OAuthToken","Contains information needed for generating an OAuth token. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com."],["OidcToken","Contains information needed for generating an OpenID Connect token. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself."],["PauseJobRequest","Request message for PauseJob."],["ProjectLocationGetCall","Gets information about a location."],["ProjectLocationJobCreateCall","Creates a job."],["ProjectLocationJobDeleteCall","Deletes a job."],["ProjectLocationJobGetCall","Gets a job."],["ProjectLocationJobListCall","Lists jobs."],["ProjectLocationJobPatchCall","Updates a job. If successful, the updated Job is returned. If the job does not exist, `NOT_FOUND` is returned. If UpdateJob does not successfully return, it is possible for the job to be in an Job.State.UPDATE_FAILED state. A job in this state may not be executed. If this happens, retry the UpdateJob request until a successful response is received."],["ProjectLocationJobPauseCall","Pauses a job. If a job is paused then the system will stop executing the job until it is re-enabled via ResumeJob. The state of the job is stored in state; if paused it will be set to Job.State.PAUSED. A job must be in Job.State.ENABLED to be paused."],["ProjectLocationJobResumeCall","Resume a job. This method reenables a job after it has been Job.State.PAUSED. The state of a job is stored in Job.state; after calling this method it will be set to Job.State.ENABLED. A job must be in Job.State.PAUSED to be resumed."],["ProjectLocationJobRunCall","Forces a job to run now. When this method is called, Cloud Scheduler will dispatch the job, even if the job is already running."],["ProjectLocationListCall","Lists information about the supported locations for this service."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `CloudScheduler` hub."],["PubsubTarget","Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic."],["ResumeJobRequest","Request message for ResumeJob."],["RetryConfig","Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig."],["RunJobRequest","Request message for forcing a job to run now using RunJob."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."]]});