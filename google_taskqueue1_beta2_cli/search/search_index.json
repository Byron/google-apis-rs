{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The taskqueue1-beta2 command-line interface (CLI) allows to use most features of the Google taskqueue service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the taskqueue API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-taskqueue1_beta2-cli Find the source code on github . Usage This documentation was generated from the taskqueue API at revision 20160428 . The CLI is at version 5.0.4 . taskqueue1-beta2 [options] taskqueues get <project> <taskqueue> [-p <v>]... [-o <out>] tasks delete <project> <taskqueue> <task> [-p <v>]... get <project> <taskqueue> <task> [-p <v>]... [-o <out>] insert <project> <taskqueue> (-r <kv>)... [-p <v>]... [-o <out>] lease <project> <taskqueue> <num-tasks> <lease-secs> [-p <v>]... [-o <out>] list <project> <taskqueue> [-p <v>]... [-o <out>] patch <project> <taskqueue> <task> <new-lease-seconds> (-r <kv>)... [-p <v>]... [-o <out>] update <project> <taskqueue> <task> <new-lease-seconds> (-r <kv>)... [-p <v>]... [-o <out>] taskqueue1-beta2 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with taskqueue1-beta2- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/taskqueue1-beta2-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/taskqueue1-beta2-secret.json , assuming that the required taskqueue API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. taskqueue1-beta2 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-taskqueue1_beta2-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the taskqueue API at revision 20160428 . The CLI is at version 5.0.4 . taskqueue1-beta2 [options] taskqueues get <project> <taskqueue> [-p <v>]... [-o <out>] tasks delete <project> <taskqueue> <task> [-p <v>]... get <project> <taskqueue> <task> [-p <v>]... [-o <out>] insert <project> <taskqueue> (-r <kv>)... [-p <v>]... [-o <out>] lease <project> <taskqueue> <num-tasks> <lease-secs> [-p <v>]... [-o <out>] list <project> <taskqueue> [-p <v>]... [-o <out>] patch <project> <taskqueue> <task> <new-lease-seconds> (-r <kv>)... [-p <v>]... [-o <out>] update <project> <taskqueue> <task> <new-lease-seconds> (-r <kv>)... [-p <v>]... [-o <out>] taskqueue1-beta2 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with taskqueue1-beta2- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/taskqueue1-beta2-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/taskqueue1-beta2-secret.json , assuming that the required taskqueue API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. taskqueue1-beta2 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"taskqueues_get/","text":"Get detailed information about a TaskQueue. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> taskqueues get ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) The id of the taskqueue to get the properties of. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p get-stats=boolean Whether to get stats. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Get"},{"location":"taskqueues_get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> taskqueues get ...","title":"Scopes"},{"location":"taskqueues_get/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) The id of the taskqueue to get the properties of.","title":"Required Scalar Arguments"},{"location":"taskqueues_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"taskqueues_get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p get-stats=boolean Whether to get stats. Optional.","title":"Optional Method Properties"},{"location":"taskqueues_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_delete/","text":"Delete a task from a TaskQueue. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks delete ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) The taskqueue to delete a task from. <task> (string) The id of the task to delete. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Delete"},{"location":"tasks_delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks delete ...","title":"Scopes"},{"location":"tasks_delete/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) The taskqueue to delete a task from. <task> (string) The id of the task to delete.","title":"Required Scalar Arguments"},{"location":"tasks_delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_get/","text":"Get a particular task from a TaskQueue. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks get ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) The taskqueue in which the task belongs. <task> (string) The task to get properties of. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Get"},{"location":"tasks_get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks get ...","title":"Scopes"},{"location":"tasks_get/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) The taskqueue in which the task belongs. <task> (string) The task to get properties of.","title":"Required Scalar Arguments"},{"location":"tasks_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"tasks_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_insert/","text":"Insert a new task in a TaskQueue Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks insert ... Required Scalar Arguments <project> (string) The project under which the queue lies <taskqueue> (string) The taskqueue to insert the task into Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Task: enqueue-timestamp: string id: string kind: string lease-timestamp: string payload-base64: string queue-name: string retry-count: integer tag: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enqueue-timestamp=et Time (in seconds since the epoch) at which the task was enqueued. id=magna Name of the task. kind=no The kind of object returned, in this case set to task. lease-timestamp=ipsum Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker. payload-base64=voluptua. A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded. queue-name=at Name of the queue that the task is in. retry-count=93 The number of leases applied to this task. tag=sed Tag for the task, could be used later to lease tasks grouped by a specific tag. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Insert"},{"location":"tasks_insert/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks insert ...","title":"Scopes"},{"location":"tasks_insert/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies <taskqueue> (string) The taskqueue to insert the task into","title":"Required Scalar Arguments"},{"location":"tasks_insert/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Task: enqueue-timestamp: string id: string kind: string lease-timestamp: string payload-base64: string queue-name: string retry-count: integer tag: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enqueue-timestamp=et Time (in seconds since the epoch) at which the task was enqueued. id=magna Name of the task. kind=no The kind of object returned, in this case set to task. lease-timestamp=ipsum Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker. payload-base64=voluptua. A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded. queue-name=at Name of the queue that the task is in. retry-count=93 The number of leases applied to this task. tag=sed Tag for the task, could be used later to lease tasks grouped by a specific tag.","title":"Required Request Value"},{"location":"tasks_insert/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"tasks_insert/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"tasks_insert/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_lease/","text":"Lease 1 or more tasks from a TaskQueue. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks lease ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) The taskqueue to lease a task from. <num-tasks> (integer) The number of tasks to lease. <lease-secs> (integer) The lease in seconds. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p group-by-tag=boolean When true, all returned tasks will have the same tag -p tag=string The tag allowed for tasks in the response. Must only be specified if group_by_tag is true. If group_by_tag is true and tag is not specified the tag will be that of the oldest task by eta, i.e. the first available tag Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Lease"},{"location":"tasks_lease/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks lease ...","title":"Scopes"},{"location":"tasks_lease/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) The taskqueue to lease a task from. <num-tasks> (integer) The number of tasks to lease. <lease-secs> (integer) The lease in seconds.","title":"Required Scalar Arguments"},{"location":"tasks_lease/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"tasks_lease/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p group-by-tag=boolean When true, all returned tasks will have the same tag -p tag=string The tag allowed for tasks in the response. Must only be specified if group_by_tag is true. If group_by_tag is true and tag is not specified the tag will be that of the oldest task by eta, i.e. the first available tag","title":"Optional Method Properties"},{"location":"tasks_lease/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_list/","text":"List Tasks in a TaskQueue Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks list ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) The id of the taskqueue to list tasks from. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"List"},{"location":"tasks_list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks list ...","title":"Scopes"},{"location":"tasks_list/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) The id of the taskqueue to list tasks from.","title":"Required Scalar Arguments"},{"location":"tasks_list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"tasks_list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_patch/","text":"Update tasks that are leased out of a TaskQueue. This method supports patch semantics. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks patch ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) No description provided. <task> (string) No description provided. <new-lease-seconds> (integer) The new lease in seconds. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Task: enqueue-timestamp: string id: string kind: string lease-timestamp: string payload-base64: string queue-name: string retry-count: integer tag: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enqueue-timestamp=amet. Time (in seconds since the epoch) at which the task was enqueued. id=takimata Name of the task. kind=amet. The kind of object returned, in this case set to task. lease-timestamp=duo Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker. payload-base64=ipsum A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded. queue-name=gubergren Name of the queue that the task is in. retry-count=50 The number of leases applied to this task. tag=gubergren Tag for the task, could be used later to lease tasks grouped by a specific tag. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Patch"},{"location":"tasks_patch/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks patch ...","title":"Scopes"},{"location":"tasks_patch/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) No description provided. <task> (string) No description provided. <new-lease-seconds> (integer) The new lease in seconds.","title":"Required Scalar Arguments"},{"location":"tasks_patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Task: enqueue-timestamp: string id: string kind: string lease-timestamp: string payload-base64: string queue-name: string retry-count: integer tag: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enqueue-timestamp=amet. Time (in seconds since the epoch) at which the task was enqueued. id=takimata Name of the task. kind=amet. The kind of object returned, in this case set to task. lease-timestamp=duo Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker. payload-base64=ipsum A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded. queue-name=gubergren Name of the queue that the task is in. retry-count=50 The number of leases applied to this task. tag=gubergren Tag for the task, could be used later to lease tasks grouped by a specific tag.","title":"Required Request Value"},{"location":"tasks_patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"tasks_patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"tasks_patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"},{"location":"tasks_update/","text":"Update tasks that are leased out of a TaskQueue. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks update ... Required Scalar Arguments <project> (string) The project under which the queue lies. <taskqueue> (string) No description provided. <task> (string) No description provided. <new-lease-seconds> (integer) The new lease in seconds. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Task: enqueue-timestamp: string id: string kind: string lease-timestamp: string payload-base64: string queue-name: string retry-count: integer tag: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enqueue-timestamp=eos Time (in seconds since the epoch) at which the task was enqueued. id=dolor Name of the task. kind=ea The kind of object returned, in this case set to task. lease-timestamp=ipsum Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker. payload-base64=invidunt A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded. queue-name=amet Name of the queue that the task is in. retry-count=81 The number of leases applied to this task. tag=ipsum Tag for the task, could be used later to lease tasks grouped by a specific tag. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Update"},{"location":"tasks_update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/taskqueue https://www.googleapis.com/auth/taskqueue.consumer If unset, the scope for this method defaults to https://www.googleapis.com/auth/taskqueue . You can set the scope for this method like this: taskqueue1-beta2 --scope <scope> tasks update ...","title":"Scopes"},{"location":"tasks_update/#required-scalar-arguments","text":"<project> (string) The project under which the queue lies. <taskqueue> (string) No description provided. <task> (string) No description provided. <new-lease-seconds> (integer) The new lease in seconds.","title":"Required Scalar Arguments"},{"location":"tasks_update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Task: enqueue-timestamp: string id: string kind: string lease-timestamp: string payload-base64: string queue-name: string retry-count: integer tag: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . enqueue-timestamp=eos Time (in seconds since the epoch) at which the task was enqueued. id=dolor Name of the task. kind=ea The kind of object returned, in this case set to task. lease-timestamp=ipsum Time (in seconds since the epoch) at which the task lease will expire. This value is 0 if the task isnt currently leased out to a worker. payload-base64=invidunt A bag of bytes which is the task payload. The payload on the JSON side is always Base64 encoded. queue-name=amet Name of the queue that the task is in. retry-count=81 The number of leases applied to this task. tag=ipsum Tag for the task, could be used later to lease tasks grouped by a specific tag.","title":"Required Request Value"},{"location":"tasks_update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"tasks_update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"tasks_update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p alt=string Data format for the response. -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. -p user-ip=string IP address of the site where the request originates. Use this if you want to enforce per-user limits.","title":"Optional General Properties"}]}