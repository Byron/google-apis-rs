initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["Annotation","Text annotation with a set of attributes."],["AttributeValue","The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute."],["Attributes","A set of attributes, each in the format `[KEY]:[VALUE]`."],["BatchWriteSpansRequest","The request message for the `BatchWriteSpans` method."],["CloudTrace","Central instance to access all CloudTrace related resource activities"],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["Link","A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project."],["Links","A collection of links, which are references from this span to a span in the same or different trace."],["MessageEvent","An event describing a message sent/received between Spans."],["Module","Binary module."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `CloudTrace` hub."],["ProjectTraceBatchWriteCall","Sends new spans to new or existing traces. You cannot update existing spans."],["ProjectTraceSpanCreateSpanCall","Creates a new span."],["Span","A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguousâ€”there may be gaps or overlaps between spans in a trace."],["StackFrame","Represents a single stack frame in a stack trace."],["StackFrames","A collection of stack frames, which can be truncated."],["StackTrace","A call stack appearing in a trace."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."],["TimeEvent","A time-stamped annotation or message event in the Span."],["TimeEvents","A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans."],["TruncatableString","Represents a string that might be shortened to a specified length."]]});