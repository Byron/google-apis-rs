initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["AllocateIdsRequest","The request for Datastore.AllocateIds."],["AllocateIdsResponse","The response for Datastore.AllocateIds."],["ArrayValue","An array value."],["BeginTransactionRequest","The request for Datastore.BeginTransaction."],["BeginTransactionResponse","The response for Datastore.BeginTransaction."],["CommitRequest","The request for Datastore.Commit."],["CommitResponse","The response for Datastore.Commit."],["CompositeFilter","A filter that merges multiple other filters using the given operator."],["Datastore","Central instance to access all Datastore related resource activities"],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["Entity","A Datastore data object. An entity is limited to 1 megabyte when stored. That roughly corresponds to a limit of 1 megabyte for the serialized form of this message."],["EntityResult","The result of fetching an entity from Datastore."],["Filter","A holder for any type of filter."],["GoogleDatastoreAdminV1EntityFilter","Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']"],["GoogleDatastoreAdminV1ExportEntitiesRequest","The request for google.datastore.admin.v1.DatastoreAdmin.ExportEntities."],["GoogleDatastoreAdminV1ImportEntitiesRequest","The request for google.datastore.admin.v1.DatastoreAdmin.ImportEntities."],["GoogleDatastoreAdminV1Index","Datastore composite index definition."],["GoogleDatastoreAdminV1IndexedProperty","A property of an index."],["GoogleDatastoreAdminV1ListIndexesResponse","The response for google.datastore.admin.v1.DatastoreAdmin.ListIndexes."],["GoogleLongrunningListOperationsResponse","The response message for Operations.ListOperations."],["GoogleLongrunningOperation","This resource represents a long-running operation that is the result of a network API call."],["GqlQuery","A GQL query."],["GqlQueryParameter","A binding parameter for a GQL query."],["Key","A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."],["KindExpression","A representation of a kind."],["LatLng","An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges."],["LookupRequest","The request for Datastore.Lookup."],["LookupResponse","The response for Datastore.Lookup."],["Mutation","A mutation to apply to an entity."],["MutationResult","The result of applying a mutation."],["PartitionId","A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `\"\"`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state."],["PathElement","A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."],["ProjectAllocateIdCall","Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted."],["ProjectBeginTransactionCall","Begins a new transaction."],["ProjectCommitCall","Commits a transaction, optionally creating, deleting or modifying some entities."],["ProjectExportCall","Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage."],["ProjectImportCall","Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore."],["ProjectIndexeCreateCall","Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created."],["ProjectIndexeDeleteCall","Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again."],["ProjectIndexeGetCall","Gets an index."],["ProjectIndexeListCall","Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results."],["ProjectLookupCall","Looks up entities by key."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `Datastore` hub."],["ProjectOperationCancelCall","Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."],["ProjectOperationDeleteCall","Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."],["ProjectOperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."],["ProjectOperationListCall","Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."],["ProjectReserveIdCall","Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore."],["ProjectRollbackCall","Rolls back a transaction."],["ProjectRunQueryCall","Queries for entities."],["Projection","A representation of a property in a projection."],["PropertyFilter","A filter on a specific property."],["PropertyOrder","The desired order for a specific property."],["PropertyReference","A reference to a property relative to the kind expressions."],["Query","A query for entities."],["QueryResultBatch","A batch of results produced by a query."],["ReadOnly","Options specific to read-only transactions."],["ReadOptions","The options shared by read requests."],["ReadWrite","Options specific to read / write transactions."],["ReserveIdsRequest","The request for Datastore.ReserveIds."],["ReserveIdsResponse","The response for Datastore.ReserveIds."],["RollbackRequest","The request for Datastore.Rollback."],["RollbackResponse","The response for Datastore.Rollback. (an empty message)."],["RunQueryRequest","The request for Datastore.RunQuery."],["RunQueryResponse","The response for Datastore.RunQuery."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."],["TransactionOptions","Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests."],["Value","A message that can hold any of the supported value types and associated metadata."]]});