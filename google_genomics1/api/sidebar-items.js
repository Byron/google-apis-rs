initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["CancelOperationRequest","The request message for Operations.CancelOperation."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["Genomics","Central instance to access all Genomics related resource activities"],["ListOperationsResponse","The response message for Operations.ListOperations."],["Operation","This resource represents a long-running operation that is the result of a network API call."],["OperationCancelCall","Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following Google IAM permission: * `genomics.operations.cancel`"],["OperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Authorization requires the following Google IAM permission: * `genomics.operations.get`"],["OperationListCall","Lists operations that match the specified filter in the request. Authorization requires the following Google IAM permission: * `genomics.operations.list`"],["OperationMethods","A builder providing access to all methods supported on operation resources. It is not used directly, but through the `Genomics` hub."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."]]});