{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The cloudtrace1 command-line interface (CLI) allows to use most features of the Google Cloud Trace service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the Cloud Trace API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-cloudtrace1-cli Find the source code on github . Usage This documentation was generated from the Cloud Trace API at revision 20240223 . The CLI is at version 5.0.4 . cloudtrace1 [options] projects patch-traces <project-id> (-r <kv>)... [-p <v>]... [-o <out>] traces-get <project-id> <trace-id> [-p <v>]... [-o <out>] traces-list <project-id> [-p <v>]... [-o <out>] cloudtrace1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with cloudtrace1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/cloudtrace1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/cloudtrace1-secret.json , assuming that the required cloudtrace API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. cloudtrace1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-cloudtrace1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the Cloud Trace API at revision 20240223 . The CLI is at version 5.0.4 . cloudtrace1 [options] projects patch-traces <project-id> (-r <kv>)... [-p <v>]... [-o <out>] traces-get <project-id> <trace-id> [-p <v>]... [-o <out>] traces-list <project-id> [-p <v>]... [-o <out>] cloudtrace1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with cloudtrace1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/cloudtrace1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/cloudtrace1-secret.json , assuming that the required cloudtrace API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. cloudtrace1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"projects_patch-traces/","text":"Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/trace.append If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudtrace1 --scope <scope> projects patch-traces ... Required Scalar Argument <project-id> (string) Required. ID of the Cloud project where the trace data is stored. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Traces: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Patch Traces"},{"location":"projects_patch-traces/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/trace.append If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudtrace1 --scope <scope> projects patch-traces ...","title":"Scopes"},{"location":"projects_patch-traces/#required-scalar-argument","text":"<project-id> (string) Required. ID of the Cloud project where the trace data is stored.","title":"Required Scalar Argument"},{"location":"projects_patch-traces/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Traces: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"projects_patch-traces/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_patch-traces/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_patch-traces/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_traces-get/","text":"Gets a single trace by its ID. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/trace.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/trace.readonly . You can set the scope for this method like this: cloudtrace1 --scope <scope> projects traces-get ... Required Scalar Arguments <project-id> (string) Required. ID of the Cloud project where the trace data is stored. <trace-id> (string) Required. ID of the trace to return. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Traces Get"},{"location":"projects_traces-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/trace.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/trace.readonly . You can set the scope for this method like this: cloudtrace1 --scope <scope> projects traces-get ...","title":"Scopes"},{"location":"projects_traces-get/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the Cloud project where the trace data is stored. <trace-id> (string) Required. ID of the trace to return.","title":"Required Scalar Arguments"},{"location":"projects_traces-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_traces-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_traces-list/","text":"Returns a list of traces that match the specified filter conditions. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/trace.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/trace.readonly . You can set the scope for this method like this: cloudtrace1 --scope <scope> projects traces-list ... Required Scalar Argument <project-id> (string) Required. ID of the Cloud project where the trace data is stored. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p end-time=string End of the time interval (inclusive) during which the trace data was collected from the application. -p filter=string Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol ( + ) to the search term. Multiple terms are ANDed. Syntax: * root:NAME_PREFIX or NAME_PREFIX : Return traces where any root span starts with NAME_PREFIX . * +root:NAME or +NAME : Return traces where any root span's name is exactly NAME . * span:NAME_PREFIX : Return traces where any span starts with NAME_PREFIX . * +span:NAME : Return traces where any span's name is exactly NAME . * latency:DURATION : Return traces whose overall latency is greater or equal to than DURATION . Accepted units are nanoseconds ( ns ), milliseconds ( ms ), and seconds ( s ). Default is ms . For example, latency:24ms returns traces whose overall latency is greater than or equal to 24 milliseconds. * label:LABEL_KEY : Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair's value (including empty values). * LABEL_KEY:VALUE_PREFIX : Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with VALUE_PREFIX . Both a key and a value must be specified. * +LABEL_KEY:VALUE : Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * method:VALUE : Equivalent to /http/method:VALUE . * url:VALUE : Equivalent to /http/url:VALUE . -p order-by=string Optional. Field used to sort the returned traces. Can be one of the following: * trace_id * name ( name field of root span in the trace) * duration (difference between end_time and start_time fields of the root span) * start ( start_time field of the root span) Descending order can be specified by appending desc to the sort field (for example, name desc ). Only one sort field is permitted. -p page-size=integer Optional. Maximum number of traces to return. If not specified or <= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. -p page-token=string Token identifying the page of results to return. If provided, use the value of the next_page_token field from a previous request. -p start-time=string Start of the time interval (inclusive) during which the trace data was collected from the application. -p view=string Optional. Type of data returned for traces in the list. Default is MINIMAL . Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Traces List"},{"location":"projects_traces-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/trace.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/trace.readonly . You can set the scope for this method like this: cloudtrace1 --scope <scope> projects traces-list ...","title":"Scopes"},{"location":"projects_traces-list/#required-scalar-argument","text":"<project-id> (string) Required. ID of the Cloud project where the trace data is stored.","title":"Required Scalar Argument"},{"location":"projects_traces-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_traces-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p end-time=string End of the time interval (inclusive) during which the trace data was collected from the application. -p filter=string Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol ( + ) to the search term. Multiple terms are ANDed. Syntax: * root:NAME_PREFIX or NAME_PREFIX : Return traces where any root span starts with NAME_PREFIX . * +root:NAME or +NAME : Return traces where any root span's name is exactly NAME . * span:NAME_PREFIX : Return traces where any span starts with NAME_PREFIX . * +span:NAME : Return traces where any span's name is exactly NAME . * latency:DURATION : Return traces whose overall latency is greater or equal to than DURATION . Accepted units are nanoseconds ( ns ), milliseconds ( ms ), and seconds ( s ). Default is ms . For example, latency:24ms returns traces whose overall latency is greater than or equal to 24 milliseconds. * label:LABEL_KEY : Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair's value (including empty values). * LABEL_KEY:VALUE_PREFIX : Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with VALUE_PREFIX . Both a key and a value must be specified. * +LABEL_KEY:VALUE : Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * method:VALUE : Equivalent to /http/method:VALUE . * url:VALUE : Equivalent to /http/url:VALUE . -p order-by=string Optional. Field used to sort the returned traces. Can be one of the following: * trace_id * name ( name field of root span in the trace) * duration (difference between end_time and start_time fields of the root span) * start ( start_time field of the root span) Descending order can be specified by appending desc to the sort field (for example, name desc ). Only one sort field is permitted. -p page-size=integer Optional. Maximum number of traces to return. If not specified or <= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. -p page-token=string Token identifying the page of results to return. If provided, use the value of the next_page_token field from a previous request. -p start-time=string Start of the time interval (inclusive) during which the trace data was collected from the application. -p view=string Optional. Type of data returned for traces in the list. Default is MINIMAL .","title":"Optional Method Properties"},{"location":"projects_traces-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}