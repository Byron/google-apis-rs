initSidebarItems({"struct":[["AutnumGetCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["AutnumMethods","A builder providing access to all methods supported on autnum resources. It is not used directly, but through the `DomainsRDAP` hub."],["DomainGetCall","Look up RDAP information for a domain by name."],["DomainMethods","A builder providing access to all methods supported on domain resources. It is not used directly, but through the `DomainsRDAP` hub."],["DomainsRDAP","Central instance to access all DomainsRDAP related resource activities"],["EntityGetCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["EntityMethods","A builder providing access to all methods supported on entity resources. It is not used directly, but through the `DomainsRDAP` hub."],["HttpBody","Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."],["IpGetCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["IpMethods","A builder providing access to all methods supported on ip resources. It is not used directly, but through the `DomainsRDAP` hub."],["Link","Links object defined in section 4.2 of RFC 7483."],["MethodGetDomainCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["MethodGetEntityCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["MethodGetHelpCall","Get help information for the RDAP API, including links to documentation."],["MethodGetIpCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["MethodGetNameserverCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["MethodMethods","A builder providing access to all free methods, which are not associated with a particular resource. It is not used directly, but through the `DomainsRDAP` hub."],["NameserverGetCall","The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error."],["NameserverMethods","A builder providing access to all methods supported on nameserver resources. It is not used directly, but through the `DomainsRDAP` hub."],["Notice","Notices object defined in section 4.3 of RFC 7483."],["RdapResponse","Response to a general RDAP query."]]});