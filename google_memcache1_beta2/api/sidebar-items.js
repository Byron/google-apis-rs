initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["ApplyParametersRequest","Request for ApplyParameters."],["ApplySoftwareUpdateRequest","Request for ApplySoftwareUpdate."],["CancelOperationRequest","The request message for Operations.CancelOperation."],["CloudMemorystoreForMemcached","Central instance to access all CloudMemorystoreForMemcached related resource activities"],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["Instance","A Memorystore for Memcached instance"],["InstanceMessage","There is no detailed description."],["ListInstancesResponse","Response for ListInstances."],["ListLocationsResponse","The response message for Locations.ListLocations."],["ListOperationsResponse","The response message for Operations.ListOperations."],["Location","A resource that represents Google Cloud Platform location."],["MemcacheParameters","The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes."],["Node","There is no detailed description."],["NodeConfig","Configuration for a Memcached Node."],["Operation","This resource represents a long-running operation that is the result of a network API call."],["ProjectLocationGetCall","Gets information about a location."],["ProjectLocationInstanceApplyParameterCall","`ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance."],["ProjectLocationInstanceApplySoftwareUpdateCall","Updates software on the selected nodes of the Instance."],["ProjectLocationInstanceCreateCall","Creates a new Instance in a given location."],["ProjectLocationInstanceDeleteCall","Deletes a single Instance."],["ProjectLocationInstanceGetCall","Gets details of a single Instance."],["ProjectLocationInstanceListCall","Lists Instances in a given location."],["ProjectLocationInstancePatchCall","Updates an existing Instance in a given project and location."],["ProjectLocationInstanceUpdateParameterCall","Updates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance."],["ProjectLocationListCall","Lists information about the supported locations for this service."],["ProjectLocationOperationCancelCall","Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."],["ProjectLocationOperationDeleteCall","Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."],["ProjectLocationOperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."],["ProjectLocationOperationListCall","Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `CloudMemorystoreForMemcached` hub."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."],["UpdateParametersRequest","Request for UpdateParameters."]]});