initSidebarItems({"struct":[["FirebaseRemoteConfig","Central instance to access all FirebaseRemoteConfig related resource activities"],["ProjectGetRemoteConfigCall","Get the latest version Remote Configuration for a project. Returns the RemoteConfig as the payload, and also the eTag as a response header."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `FirebaseRemoteConfig` hub."],["ProjectUpdateRemoteConfigCall","Update a RemoteConfig. We treat this as an always-existing resource (when it is not found in our data store, we treat it as version 0, a template with zero conditions and zero parameters). Hence there are no Create or Delete operations. Returns the updated template when successful (and the updated eTag as a response header), or an error if things go wrong. Possible error messages:"],["RemoteConfig","The RemoteConfig consists of a list of conditions (which can be thought of as named \"if\" statements) and a map of parameters (parameter key to a structure containing an optional default value, as well as a optional submap of (condition name to value when that condition is true)."],["RemoteConfigCondition","A single RemoteConfig Condition.  A list of these (because order matters) are part of a single RemoteConfig template."],["RemoteConfigParameter","While default_value and conditional_values are each optional, at least one of the two is required - otherwise, the parameter is meaningless (and an exception will be thrown by the validation logic)."],["RemoteConfigParameterValue","A RemoteConfigParameter's \"value\" (either the default value, or the value associated with a condition name) is either a string, or the \"use_in_app_default\" indicator (which means to leave out the parameter from the returned <key, value> map that is the output of the parameter fetch). We represent the \"use_in_app_default\" as a bool, but (when using the boolean instead of the string) it should always be true."]]});