{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The sheets4 command-line interface (CLI) allows to use most features of the Google Sheets service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the Sheets API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-sheets4-cli Find the source code on github . Usage This documentation was generated from the Sheets API at revision 20240229 . The CLI is at version 5.0.4 . sheets4 [options] spreadsheets batch-update <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] create (-r <kv>)... [-p <v>]... [-o <out>] developer-metadata-get <spreadsheet-id> <metadata-id> [-p <v>]... [-o <out>] developer-metadata-search <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] get <spreadsheet-id> [-p <v>]... [-o <out>] get-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] sheets-copy-to <spreadsheet-id> <sheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-append <spreadsheet-id> <range> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-clear <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-clear-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-get <spreadsheet-id> [-p <v>]... [-o <out>] values-batch-get-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-update <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-update-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-clear <spreadsheet-id> <range> (-r <kv>)... [-p <v>]... [-o <out>] values-get <spreadsheet-id> <range> [-p <v>]... [-o <out>] values-update <spreadsheet-id> <range> (-r <kv>)... [-p <v>]... [-o <out>] sheets4 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with sheets4- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/sheets4-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/sheets4-secret.json , assuming that the required sheets API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. sheets4 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-sheets4-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the Sheets API at revision 20240229 . The CLI is at version 5.0.4 . sheets4 [options] spreadsheets batch-update <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] create (-r <kv>)... [-p <v>]... [-o <out>] developer-metadata-get <spreadsheet-id> <metadata-id> [-p <v>]... [-o <out>] developer-metadata-search <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] get <spreadsheet-id> [-p <v>]... [-o <out>] get-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] sheets-copy-to <spreadsheet-id> <sheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-append <spreadsheet-id> <range> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-clear <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-clear-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-get <spreadsheet-id> [-p <v>]... [-o <out>] values-batch-get-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-update <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-batch-update-by-data-filter <spreadsheet-id> (-r <kv>)... [-p <v>]... [-o <out>] values-clear <spreadsheet-id> <range> (-r <kv>)... [-p <v>]... [-o <out>] values-get <spreadsheet-id> <range> [-p <v>]... [-o <out>] values-update <spreadsheet-id> <range> (-r <kv>)... [-p <v>]... [-o <out>] sheets4 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with sheets4- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/sheets4-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/sheets4-secret.json , assuming that the required sheets API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. sheets4 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"spreadsheets_batch-update/","text":"Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets batch-update ... Required Scalar Argument <spreadsheet-id> (string) The spreadsheet to apply the updates to. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchUpdateSpreadsheetRequest: include-spreadsheet-in-response: boolean response-include-grid-data: boolean response-ranges: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-spreadsheet-in-response=true Determines if the update response should include the spreadsheet resource. response-include-grid-data=false True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request. response-ranges=amet. Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Batch Update"},{"location":"spreadsheets_batch-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets batch-update ...","title":"Scopes"},{"location":"spreadsheets_batch-update/#required-scalar-argument","text":"<spreadsheet-id> (string) The spreadsheet to apply the updates to.","title":"Required Scalar Argument"},{"location":"spreadsheets_batch-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchUpdateSpreadsheetRequest: include-spreadsheet-in-response: boolean response-include-grid-data: boolean response-ranges: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-spreadsheet-in-response=true Determines if the update response should include the spreadsheet resource. response-include-grid-data=false True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request. response-ranges=amet. Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"spreadsheets_batch-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_batch-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_batch-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_create/","text":"Creates a spreadsheet, returning the newly created spreadsheet. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets create ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Spreadsheet: properties: auto-recalc: string default-format: background-color: alpha: number blue: number green: number red: number background-color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string borders: bottom: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer left: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer right: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer top: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer horizontal-alignment: string hyperlink-display-type: string number-format: pattern: string type: string padding: bottom: integer left: integer right: integer top: integer text-direction: string text-format: bold: boolean font-family: string font-size: integer foreground-color: alpha: number blue: number green: number red: number foreground-color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string italic: boolean link: uri: string strikethrough: boolean underline: boolean text-rotation: angle: integer vertical: boolean vertical-alignment: string wrap-strategy: string iterative-calculation-settings: convergence-threshold: number max-iterations: integer locale: string spreadsheet-theme: primary-font-family: string time-zone: string title: string spreadsheet-id: string spreadsheet-url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .properties auto-recalc=takimata The amount of time to wait before volatile functions are recalculated. default-format.background-color alpha=0.38370480861420864 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.7896128249156874 The amount of blue in the color as a value in the interval [0, 1]. green=0.9217265098962596 The amount of green in the color as a value in the interval [0, 1]. red=0.30763338797950246 The amount of red in the color as a value in the interval [0, 1]. ..background-color-style.rgb-color alpha=0.9922470725858205 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.20494600207758173 The amount of blue in the color as a value in the interval [0, 1]. green=0.6562776331888889 The amount of green in the color as a value in the interval [0, 1]. red=0.912305342889376 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=invidunt Theme color. ..borders.bottom.color alpha=0.42548765853373427 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.635197500875138 The amount of blue in the color as a value in the interval [0, 1]. green=0.9001265173058445 The amount of green in the color as a value in the interval [0, 1]. red=0.5053930334687853 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.6681221451468909 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.888331125703361 The amount of blue in the color as a value in the interval [0, 1]. green=0.4033695817113857 The amount of green in the color as a value in the interval [0, 1]. red=0.737544430792817 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=gubergren Theme color. .. style=ea The style of the border. width=2 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ..left.color alpha=0.8325065326181772 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.5944568076620798 The amount of blue in the color as a value in the interval [0, 1]. green=0.46093367968783205 The amount of green in the color as a value in the interval [0, 1]. red=0.9575633866430626 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.7957202632117738 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.31372789799617684 The amount of blue in the color as a value in the interval [0, 1]. green=0.6905413711203235 The amount of green in the color as a value in the interval [0, 1]. red=0.9150999978526841 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=sed Theme color. .. style=et The style of the border. width=33 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ..right.color alpha=0.8039909988714865 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.5477575441248734 The amount of blue in the color as a value in the interval [0, 1]. green=0.6383502522516505 The amount of green in the color as a value in the interval [0, 1]. red=0.9694857568940014 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.9697780726648698 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.7735052857092053 The amount of blue in the color as a value in the interval [0, 1]. green=0.07223777776561668 The amount of green in the color as a value in the interval [0, 1]. red=0.9625057030686941 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=et Theme color. .. style=sadipscing The style of the border. width=86 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ..top.color alpha=0.017140519879742522 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.19681975392268636 The amount of blue in the color as a value in the interval [0, 1]. green=0.10459029141758258 The amount of green in the color as a value in the interval [0, 1]. red=0.19657477328425788 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.7491113388279885 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.9996547162401588 The amount of blue in the color as a value in the interval [0, 1]. green=0.5686782919934609 The amount of green in the color as a value in the interval [0, 1]. red=0.012465497817154336 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=accusam Theme color. .. style=takimata The style of the border. width=55 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ... horizontal-alignment=voluptua. The horizontal alignment of the value in the cell. hyperlink-display-type=et If one exists, how a hyperlink should be displayed in the cell. number-format pattern=erat Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the Date and Number Formats guide for more information about the supported patterns. type=consetetur The type of the number format. When writing, this field must be set. ..padding bottom=99 The bottom padding of the cell. left=71 The left padding of the cell. right=92 The right padding of the cell. top=82 The top padding of the cell. .. text-direction=gubergren The direction of the text in the cell. text-format bold=false True if the text is bold. font-family=accusam The font family. font-size=23 The size of the font. foreground-color alpha=0.5290758052968516 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.5284480987860815 The amount of blue in the color as a value in the interval [0, 1]. green=0.7753213022845796 The amount of green in the color as a value in the interval [0, 1]. red=0.05043422241780038 The amount of red in the color as a value in the interval [0, 1]. ..foreground-color-style.rgb-color alpha=0.4946595631810975 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.7364988594037298 The amount of blue in the color as a value in the interval [0, 1]. green=0.4551855025693473 The amount of green in the color as a value in the interval [0, 1]. red=0.8987894283575105 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=et Theme color. .. italic=true True if the text is italicized. link uri=aliquyam The link identifier. .. strikethrough=true True if the text has a strikethrough. underline=true True if the text is underlined. ..text-rotation angle=33 The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction vertical=false If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l | .. vertical-alignment=no The vertical alignment of the value in the cell. wrap-strategy=et The wrap strategy for the value in the cell. ..iterative-calculation-settings convergence-threshold=0.9478375320054573 When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop. max-iterations=21 When iterative calculation is enabled, the maximum number of calculation rounds to perform. .. locale=no The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as en * an ISO 639-2 language code such as fil , if no 639-1 code exists * a combination of the ISO language code and country code, such as en_US Note: when updating this field, not all locales/languages are supported. spreadsheet-theme primary-font-family=nonumy Name of the primary font family. .. time-zone=at The time zone of the spreadsheet, in CLDR format such as America/New_York . If the time zone isn't recognized, this may be a custom time zone such as GMT-07:00 . title=sadipscing The title of the spreadsheet. .. spreadsheet-id=aliquyam The ID of the spreadsheet. This field is read-only. spreadsheet-url=dolores The url of the spreadsheet. This field is read-only. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Create"},{"location":"spreadsheets_create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets create ...","title":"Scopes"},{"location":"spreadsheets_create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Spreadsheet: properties: auto-recalc: string default-format: background-color: alpha: number blue: number green: number red: number background-color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string borders: bottom: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer left: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer right: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer top: color: alpha: number blue: number green: number red: number color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string style: string width: integer horizontal-alignment: string hyperlink-display-type: string number-format: pattern: string type: string padding: bottom: integer left: integer right: integer top: integer text-direction: string text-format: bold: boolean font-family: string font-size: integer foreground-color: alpha: number blue: number green: number red: number foreground-color-style: rgb-color: alpha: number blue: number green: number red: number theme-color: string italic: boolean link: uri: string strikethrough: boolean underline: boolean text-rotation: angle: integer vertical: boolean vertical-alignment: string wrap-strategy: string iterative-calculation-settings: convergence-threshold: number max-iterations: integer locale: string spreadsheet-theme: primary-font-family: string time-zone: string title: string spreadsheet-id: string spreadsheet-url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .properties auto-recalc=takimata The amount of time to wait before volatile functions are recalculated. default-format.background-color alpha=0.38370480861420864 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.7896128249156874 The amount of blue in the color as a value in the interval [0, 1]. green=0.9217265098962596 The amount of green in the color as a value in the interval [0, 1]. red=0.30763338797950246 The amount of red in the color as a value in the interval [0, 1]. ..background-color-style.rgb-color alpha=0.9922470725858205 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.20494600207758173 The amount of blue in the color as a value in the interval [0, 1]. green=0.6562776331888889 The amount of green in the color as a value in the interval [0, 1]. red=0.912305342889376 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=invidunt Theme color. ..borders.bottom.color alpha=0.42548765853373427 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.635197500875138 The amount of blue in the color as a value in the interval [0, 1]. green=0.9001265173058445 The amount of green in the color as a value in the interval [0, 1]. red=0.5053930334687853 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.6681221451468909 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.888331125703361 The amount of blue in the color as a value in the interval [0, 1]. green=0.4033695817113857 The amount of green in the color as a value in the interval [0, 1]. red=0.737544430792817 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=gubergren Theme color. .. style=ea The style of the border. width=2 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ..left.color alpha=0.8325065326181772 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.5944568076620798 The amount of blue in the color as a value in the interval [0, 1]. green=0.46093367968783205 The amount of green in the color as a value in the interval [0, 1]. red=0.9575633866430626 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.7957202632117738 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.31372789799617684 The amount of blue in the color as a value in the interval [0, 1]. green=0.6905413711203235 The amount of green in the color as a value in the interval [0, 1]. red=0.9150999978526841 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=sed Theme color. .. style=et The style of the border. width=33 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ..right.color alpha=0.8039909988714865 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.5477575441248734 The amount of blue in the color as a value in the interval [0, 1]. green=0.6383502522516505 The amount of green in the color as a value in the interval [0, 1]. red=0.9694857568940014 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.9697780726648698 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.7735052857092053 The amount of blue in the color as a value in the interval [0, 1]. green=0.07223777776561668 The amount of green in the color as a value in the interval [0, 1]. red=0.9625057030686941 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=et Theme color. .. style=sadipscing The style of the border. width=86 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ..top.color alpha=0.017140519879742522 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.19681975392268636 The amount of blue in the color as a value in the interval [0, 1]. green=0.10459029141758258 The amount of green in the color as a value in the interval [0, 1]. red=0.19657477328425788 The amount of red in the color as a value in the interval [0, 1]. ..color-style.rgb-color alpha=0.7491113388279885 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.9996547162401588 The amount of blue in the color as a value in the interval [0, 1]. green=0.5686782919934609 The amount of green in the color as a value in the interval [0, 1]. red=0.012465497817154336 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=accusam Theme color. .. style=takimata The style of the border. width=55 The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field. ... horizontal-alignment=voluptua. The horizontal alignment of the value in the cell. hyperlink-display-type=et If one exists, how a hyperlink should be displayed in the cell. number-format pattern=erat Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the Date and Number Formats guide for more information about the supported patterns. type=consetetur The type of the number format. When writing, this field must be set. ..padding bottom=99 The bottom padding of the cell. left=71 The left padding of the cell. right=92 The right padding of the cell. top=82 The top padding of the cell. .. text-direction=gubergren The direction of the text in the cell. text-format bold=false True if the text is bold. font-family=accusam The font family. font-size=23 The size of the font. foreground-color alpha=0.5290758052968516 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.5284480987860815 The amount of blue in the color as a value in the interval [0, 1]. green=0.7753213022845796 The amount of green in the color as a value in the interval [0, 1]. red=0.05043422241780038 The amount of red in the color as a value in the interval [0, 1]. ..foreground-color-style.rgb-color alpha=0.4946595631810975 The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). blue=0.7364988594037298 The amount of blue in the color as a value in the interval [0, 1]. green=0.4551855025693473 The amount of green in the color as a value in the interval [0, 1]. red=0.8987894283575105 The amount of red in the color as a value in the interval [0, 1]. .. theme-color=et Theme color. .. italic=true True if the text is italicized. link uri=aliquyam The link identifier. .. strikethrough=true True if the text has a strikethrough. underline=true True if the text is underlined. ..text-rotation angle=33 The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction vertical=false If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l | .. vertical-alignment=no The vertical alignment of the value in the cell. wrap-strategy=et The wrap strategy for the value in the cell. ..iterative-calculation-settings convergence-threshold=0.9478375320054573 When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop. max-iterations=21 When iterative calculation is enabled, the maximum number of calculation rounds to perform. .. locale=no The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as en * an ISO 639-2 language code such as fil , if no 639-1 code exists * a combination of the ISO language code and country code, such as en_US Note: when updating this field, not all locales/languages are supported. spreadsheet-theme primary-font-family=nonumy Name of the primary font family. .. time-zone=at The time zone of the spreadsheet, in CLDR format such as America/New_York . If the time zone isn't recognized, this may be a custom time zone such as GMT-07:00 . title=sadipscing The title of the spreadsheet. .. spreadsheet-id=aliquyam The ID of the spreadsheet. This field is read-only. spreadsheet-url=dolores The url of the spreadsheet. This field is read-only.","title":"Required Request Value"},{"location":"spreadsheets_create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_developer-metadata-get/","text":"Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets developer-metadata-get ... Required Scalar Arguments <spreadsheet-id> (string) The ID of the spreadsheet to retrieve metadata from. <metadata-id> (integer) The ID of the developer metadata to retrieve. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Developer Metadata Get"},{"location":"spreadsheets_developer-metadata-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets developer-metadata-get ...","title":"Scopes"},{"location":"spreadsheets_developer-metadata-get/#required-scalar-arguments","text":"<spreadsheet-id> (string) The ID of the spreadsheet to retrieve metadata from. <metadata-id> (integer) The ID of the developer metadata to retrieve.","title":"Required Scalar Arguments"},{"location":"spreadsheets_developer-metadata-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_developer-metadata-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_developer-metadata-search/","text":"Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets developer-metadata-search ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to retrieve metadata from. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SearchDeveloperMetadataRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Developer Metadata Search"},{"location":"spreadsheets_developer-metadata-search/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets developer-metadata-search ...","title":"Scopes"},{"location":"spreadsheets_developer-metadata-search/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to retrieve metadata from.","title":"Required Scalar Argument"},{"location":"spreadsheets_developer-metadata-search/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: SearchDeveloperMetadataRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"spreadsheets_developer-metadata-search/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_developer-metadata-search/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_developer-metadata-search/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_get-by-data-filter/","text":"Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a field mask listing your desired fields using the fields URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the includeGridData parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets get-by-data-filter ... Required Scalar Argument <spreadsheet-id> (string) The spreadsheet to request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GetSpreadsheetByDataFilterRequest: include-grid-data: boolean can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-grid-data=false True if grid data should be returned. This parameter is ignored if a field mask was set in the request. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get By Data Filter"},{"location":"spreadsheets_get-by-data-filter/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets get-by-data-filter ...","title":"Scopes"},{"location":"spreadsheets_get-by-data-filter/#required-scalar-argument","text":"<spreadsheet-id> (string) The spreadsheet to request.","title":"Required Scalar Argument"},{"location":"spreadsheets_get-by-data-filter/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GetSpreadsheetByDataFilterRequest: include-grid-data: boolean can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-grid-data=false True if grid data should be returned. This parameter is ignored if a field mask was set in the request.","title":"Required Request Value"},{"location":"spreadsheets_get-by-data-filter/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_get-by-data-filter/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_get-by-data-filter/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_get/","text":"Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a field mask listing your desired fields using the fields URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the includeGridData parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using A1 notation . You can define a single cell (for example, A1 ) or multiple cells (for example, A1:D5 ). You can also get cells from other sheets within the same spreadsheet (for example, Sheet2!A1:C4 ) or retrieve multiple ranges at once (for example, ?ranges=A1:D5&amp;ranges=Sheet2!A1:C4 ). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/spreadsheets.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive.readonly . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets get ... Required Scalar Argument <spreadsheet-id> (string) The spreadsheet to request. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-grid-data=boolean True if grid data should be returned. This parameter is ignored if a field mask was set in the request. -p ranges=string The ranges to retrieve from the spreadsheet. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"spreadsheets_get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/spreadsheets.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive.readonly . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets get ...","title":"Scopes"},{"location":"spreadsheets_get/#required-scalar-argument","text":"<spreadsheet-id> (string) The spreadsheet to request.","title":"Required Scalar Argument"},{"location":"spreadsheets_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-grid-data=boolean True if grid data should be returned. This parameter is ignored if a field mask was set in the request. -p ranges=string The ranges to retrieve from the spreadsheet.","title":"Optional Method Properties"},{"location":"spreadsheets_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_sheets-copy-to/","text":"Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets sheets-copy-to ... Required Scalar Arguments <spreadsheet-id> (string) The ID of the spreadsheet containing the sheet to copy. <sheet-id> (integer) The ID of the sheet to copy. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CopySheetToAnotherSpreadsheetRequest: destination-spreadsheet-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . destination-spreadsheet-id=erat The ID of the spreadsheet to copy the sheet to. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Sheets Copy To"},{"location":"spreadsheets_sheets-copy-to/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets sheets-copy-to ...","title":"Scopes"},{"location":"spreadsheets_sheets-copy-to/#required-scalar-arguments","text":"<spreadsheet-id> (string) The ID of the spreadsheet containing the sheet to copy. <sheet-id> (integer) The ID of the sheet to copy.","title":"Required Scalar Arguments"},{"location":"spreadsheets_sheets-copy-to/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CopySheetToAnotherSpreadsheetRequest: destination-spreadsheet-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . destination-spreadsheet-id=erat The ID of the spreadsheet to copy the sheet to.","title":"Required Request Value"},{"location":"spreadsheets_sheets-copy-to/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_sheets-copy-to/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_sheets-copy-to/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-append/","text":"Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the guide and sample code for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The valueInputOption only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-append ... Required Scalar Arguments <spreadsheet-id> (string) The ID of the spreadsheet to update. <range> (string) The A1 notation of a range to search for a logical table of data. Values are appended after the last row of the table. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ValueRange: major-dimension: string range: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . major-dimension=aliquyam The major dimension of the values. For output, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then requesting range=A1:B2,majorDimension=ROWS will return [[1,2],[3,4]] , whereas requesting range=A1:B2,majorDimension=COLUMNS will return [[1,3],[2,4]] . For input, with range=A1:B2,majorDimension=ROWS then [[1,2],[3,4]] will set A1=1,B1=2,A2=3,B2=4 . With range=A1:B2,majorDimension=COLUMNS then [[1,2],[3,4]] will set A1=1,B1=3,A2=2,B2=4 . When writing, if this field is not set, it defaults to ROWS. range=amet The range the values cover, in A1 notation . For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-values-in-response=boolean Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values. -p insert-data-option=string How the input data should be inserted. -p response-date-time-render-option=string Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p response-value-render-option=string Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. -p value-input-option=string How the input data should be interpreted. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Append"},{"location":"spreadsheets_values-append/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-append ...","title":"Scopes"},{"location":"spreadsheets_values-append/#required-scalar-arguments","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update. <range> (string) The A1 notation of a range to search for a logical table of data. Values are appended after the last row of the table.","title":"Required Scalar Arguments"},{"location":"spreadsheets_values-append/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ValueRange: major-dimension: string range: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . major-dimension=aliquyam The major dimension of the values. For output, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then requesting range=A1:B2,majorDimension=ROWS will return [[1,2],[3,4]] , whereas requesting range=A1:B2,majorDimension=COLUMNS will return [[1,3],[2,4]] . For input, with range=A1:B2,majorDimension=ROWS then [[1,2],[3,4]] will set A1=1,B1=2,A2=3,B2=4 . With range=A1:B2,majorDimension=COLUMNS then [[1,2],[3,4]] will set A1=1,B1=3,A2=2,B2=4 . When writing, if this field is not set, it defaults to ROWS. range=amet The range the values cover, in A1 notation . For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.","title":"Required Request Value"},{"location":"spreadsheets_values-append/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-append/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-append/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-values-in-response=boolean Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values. -p insert-data-option=string How the input data should be inserted. -p response-date-time-render-option=string Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p response-value-render-option=string Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. -p value-input-option=string How the input data should be interpreted.","title":"Optional Method Properties"},{"location":"spreadsheets_values-append/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-batch-clear-by-data-filter/","text":"Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-clear-by-data-filter ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchClearValuesByDataFilterRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Batch Clear By Data Filter"},{"location":"spreadsheets_values-batch-clear-by-data-filter/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-clear-by-data-filter ...","title":"Scopes"},{"location":"spreadsheets_values-batch-clear-by-data-filter/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update.","title":"Required Scalar Argument"},{"location":"spreadsheets_values-batch-clear-by-data-filter/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchClearValuesByDataFilterRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"spreadsheets_values-batch-clear-by-data-filter/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-batch-clear-by-data-filter/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-batch-clear-by-data-filter/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-batch-clear/","text":"Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-clear ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchClearValuesRequest: ranges: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . ranges=est The ranges to clear, in A1 notation or R1C1 notation . Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Batch Clear"},{"location":"spreadsheets_values-batch-clear/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-clear ...","title":"Scopes"},{"location":"spreadsheets_values-batch-clear/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update.","title":"Required Scalar Argument"},{"location":"spreadsheets_values-batch-clear/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchClearValuesRequest: ranges: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . ranges=est The ranges to clear, in A1 notation or R1C1 notation . Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"spreadsheets_values-batch-clear/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-batch-clear/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-batch-clear/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-batch-get-by-data-filter/","text":"Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-get-by-data-filter ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to retrieve data from. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchGetValuesByDataFilterRequest: date-time-render-option: string major-dimension: string value-render-option: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . date-time-render-option=et How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. major-dimension=sea The major dimension that results should use. For example, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then a request that selects that range and sets majorDimension=ROWS returns [[1,2],[3,4]] , whereas a request that sets majorDimension=COLUMNS returns [[1,3],[2,4]] . value-render-option=consetetur How values should be represented in the output. The default render option is FORMATTED_VALUE. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Batch Get By Data Filter"},{"location":"spreadsheets_values-batch-get-by-data-filter/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-get-by-data-filter ...","title":"Scopes"},{"location":"spreadsheets_values-batch-get-by-data-filter/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to retrieve data from.","title":"Required Scalar Argument"},{"location":"spreadsheets_values-batch-get-by-data-filter/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchGetValuesByDataFilterRequest: date-time-render-option: string major-dimension: string value-render-option: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . date-time-render-option=et How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. major-dimension=sea The major dimension that results should use. For example, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then a request that selects that range and sets majorDimension=ROWS returns [[1,2],[3,4]] , whereas a request that sets majorDimension=COLUMNS returns [[1,3],[2,4]] . value-render-option=consetetur How values should be represented in the output. The default render option is FORMATTED_VALUE.","title":"Required Request Value"},{"location":"spreadsheets_values-batch-get-by-data-filter/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-batch-get-by-data-filter/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-batch-get-by-data-filter/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-batch-get/","text":"Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/spreadsheets.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive.readonly . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-get ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to retrieve data from. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p date-time-render-option=string How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p major-dimension=string The major dimension that results should use. For example, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then requesting ranges=[&#34;A1:B2&#34;],majorDimension=ROWS returns [[1,2],[3,4]] , whereas requesting ranges=[&#34;A1:B2&#34;],majorDimension=COLUMNS returns [[1,3],[2,4]] . -p ranges=string The A1 notation or R1C1 notation of the range to retrieve values from. -p value-render-option=string How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Batch Get"},{"location":"spreadsheets_values-batch-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/spreadsheets.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive.readonly . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-get ...","title":"Scopes"},{"location":"spreadsheets_values-batch-get/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to retrieve data from.","title":"Required Scalar Argument"},{"location":"spreadsheets_values-batch-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-batch-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p date-time-render-option=string How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p major-dimension=string The major dimension that results should use. For example, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then requesting ranges=[&#34;A1:B2&#34;],majorDimension=ROWS returns [[1,2],[3,4]] , whereas requesting ranges=[&#34;A1:B2&#34;],majorDimension=COLUMNS returns [[1,3],[2,4]] . -p ranges=string The A1 notation or R1C1 notation of the range to retrieve values from. -p value-render-option=string How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.","title":"Optional Method Properties"},{"location":"spreadsheets_values-batch-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-batch-update-by-data-filter/","text":"Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-update-by-data-filter ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchUpdateValuesByDataFilterRequest: include-values-in-response: boolean response-date-time-render-option: string response-value-render-option: string value-input-option: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-values-in-response=false Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The updatedData field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns). response-date-time-render-option=duo Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. response-value-render-option=diam Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. value-input-option=est How the input data should be interpreted. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Batch Update By Data Filter"},{"location":"spreadsheets_values-batch-update-by-data-filter/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-update-by-data-filter ...","title":"Scopes"},{"location":"spreadsheets_values-batch-update-by-data-filter/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update.","title":"Required Scalar Argument"},{"location":"spreadsheets_values-batch-update-by-data-filter/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchUpdateValuesByDataFilterRequest: include-values-in-response: boolean response-date-time-render-option: string response-value-render-option: string value-input-option: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-values-in-response=false Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The updatedData field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns). response-date-time-render-option=duo Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. response-value-render-option=diam Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. value-input-option=est How the input data should be interpreted.","title":"Required Request Value"},{"location":"spreadsheets_values-batch-update-by-data-filter/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-batch-update-by-data-filter/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-batch-update-by-data-filter/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-batch-update/","text":"Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-update ... Required Scalar Argument <spreadsheet-id> (string) The ID of the spreadsheet to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchUpdateValuesRequest: include-values-in-response: boolean response-date-time-render-option: string response-value-render-option: string value-input-option: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-values-in-response=true Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The updatedData field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns). response-date-time-render-option=stet Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. response-value-render-option=est Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. value-input-option=aliquyam How the input data should be interpreted. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Batch Update"},{"location":"spreadsheets_values-batch-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-batch-update ...","title":"Scopes"},{"location":"spreadsheets_values-batch-update/#required-scalar-argument","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update.","title":"Required Scalar Argument"},{"location":"spreadsheets_values-batch-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchUpdateValuesRequest: include-values-in-response: boolean response-date-time-render-option: string response-value-render-option: string value-input-option: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . include-values-in-response=true Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The updatedData field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns). response-date-time-render-option=stet Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. response-value-render-option=est Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. value-input-option=aliquyam How the input data should be interpreted.","title":"Required Request Value"},{"location":"spreadsheets_values-batch-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-batch-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-batch-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-clear/","text":"Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-clear ... Required Scalar Arguments <spreadsheet-id> (string) The ID of the spreadsheet to update. <range> (string) The A1 notation or R1C1 notation of the values to clear. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ClearValuesRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Clear"},{"location":"spreadsheets_values-clear/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-clear ...","title":"Scopes"},{"location":"spreadsheets_values-clear/#required-scalar-arguments","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update. <range> (string) The A1 notation or R1C1 notation of the values to clear.","title":"Required Scalar Arguments"},{"location":"spreadsheets_values-clear/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ClearValuesRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"spreadsheets_values-clear/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-clear/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-clear/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-get/","text":"Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/spreadsheets.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive.readonly . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-get ... Required Scalar Arguments <spreadsheet-id> (string) The ID of the spreadsheet to retrieve data from. <range> (string) The A1 notation or R1C1 notation of the range to retrieve values from. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p date-time-render-option=string How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p major-dimension=string The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: A1=1,B1=2,A2=3,B2=4 , then requesting range=Sheet1!A1:B2?majorDimension=ROWS returns [[1,2],[3,4]] , whereas requesting range=Sheet1!A1:B2?majorDimension=COLUMNS returns [[1,3],[2,4]] . -p value-render-option=string How values should be represented in the output. The default render option is FORMATTED_VALUE. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Get"},{"location":"spreadsheets_values-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/spreadsheets.readonly If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive.readonly . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-get ...","title":"Scopes"},{"location":"spreadsheets_values-get/#required-scalar-arguments","text":"<spreadsheet-id> (string) The ID of the spreadsheet to retrieve data from. <range> (string) The A1 notation or R1C1 notation of the range to retrieve values from.","title":"Required Scalar Arguments"},{"location":"spreadsheets_values-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p date-time-render-option=string How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p major-dimension=string The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: A1=1,B1=2,A2=3,B2=4 , then requesting range=Sheet1!A1:B2?majorDimension=ROWS returns [[1,2],[3,4]] , whereas requesting range=Sheet1!A1:B2?majorDimension=COLUMNS returns [[1,3],[2,4]] . -p value-render-option=string How values should be represented in the output. The default render option is FORMATTED_VALUE.","title":"Optional Method Properties"},{"location":"spreadsheets_values-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"spreadsheets_values-update/","text":"Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-update ... Required Scalar Arguments <spreadsheet-id> (string) The ID of the spreadsheet to update. <range> (string) The A1 notation of the values to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ValueRange: major-dimension: string range: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . major-dimension=sit The major dimension of the values. For output, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then requesting range=A1:B2,majorDimension=ROWS will return [[1,2],[3,4]] , whereas requesting range=A1:B2,majorDimension=COLUMNS will return [[1,3],[2,4]] . For input, with range=A1:B2,majorDimension=ROWS then [[1,2],[3,4]] will set A1=1,B1=2,A2=3,B2=4 . With range=A1:B2,majorDimension=COLUMNS then [[1,2],[3,4]] will set A1=1,B1=3,A2=2,B2=4 . When writing, if this field is not set, it defaults to ROWS. range=sed The range the values cover, in A1 notation . For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-values-in-response=boolean Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns). -p response-date-time-render-option=string Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p response-value-render-option=string Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. -p value-input-option=string How the input data should be interpreted. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Values Update"},{"location":"spreadsheets_values-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets If unset, the scope for this method defaults to https://www.googleapis.com/auth/drive . You can set the scope for this method like this: sheets4 --scope <scope> spreadsheets values-update ...","title":"Scopes"},{"location":"spreadsheets_values-update/#required-scalar-arguments","text":"<spreadsheet-id> (string) The ID of the spreadsheet to update. <range> (string) The A1 notation of the values to update.","title":"Required Scalar Arguments"},{"location":"spreadsheets_values-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ValueRange: major-dimension: string range: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . major-dimension=sit The major dimension of the values. For output, if the spreadsheet data is: A1=1,B1=2,A2=3,B2=4 , then requesting range=A1:B2,majorDimension=ROWS will return [[1,2],[3,4]] , whereas requesting range=A1:B2,majorDimension=COLUMNS will return [[1,3],[2,4]] . For input, with range=A1:B2,majorDimension=ROWS then [[1,2],[3,4]] will set A1=1,B1=2,A2=3,B2=4 . With range=A1:B2,majorDimension=COLUMNS then [[1,2],[3,4]] will set A1=1,B1=3,A2=2,B2=4 . When writing, if this field is not set, it defaults to ROWS. range=sed The range the values cover, in A1 notation . For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.","title":"Required Request Value"},{"location":"spreadsheets_values-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"spreadsheets_values-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"spreadsheets_values-update/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p include-values-in-response=boolean Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns). -p response-date-time-render-option=string Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER. -p response-value-render-option=string Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE. -p value-input-option=string How the input data should be interpreted.","title":"Optional Method Properties"},{"location":"spreadsheets_values-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}