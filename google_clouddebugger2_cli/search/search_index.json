{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The clouddebugger2 command-line interface (CLI) allows to use most features of the Google Cloud Debugger service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the Cloud Debugger API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-clouddebugger2-cli Find the source code on github . Usage This documentation was generated from the Cloud Debugger API at revision 20230113 . The CLI is at version 5.0.4 . clouddebugger2 [options] controller debuggees-breakpoints-list <debuggee-id> [-p <v>]... [-o <out>] debuggees-breakpoints-update <debuggee-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] debuggees-register (-r <kv>)... [-p <v>]... [-o <out>] debugger debuggees-breakpoints-delete <debuggee-id> <breakpoint-id> [-p <v>]... [-o <out>] debuggees-breakpoints-get <debuggee-id> <breakpoint-id> [-p <v>]... [-o <out>] debuggees-breakpoints-list <debuggee-id> [-p <v>]... [-o <out>] debuggees-breakpoints-set <debuggee-id> (-r <kv>)... [-p <v>]... [-o <out>] debuggees-list [-p <v>]... [-o <out>] clouddebugger2 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with clouddebugger2- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/clouddebugger2-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/clouddebugger2-secret.json , assuming that the required clouddebugger API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. clouddebugger2 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-clouddebugger2-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the Cloud Debugger API at revision 20230113 . The CLI is at version 5.0.4 . clouddebugger2 [options] controller debuggees-breakpoints-list <debuggee-id> [-p <v>]... [-o <out>] debuggees-breakpoints-update <debuggee-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] debuggees-register (-r <kv>)... [-p <v>]... [-o <out>] debugger debuggees-breakpoints-delete <debuggee-id> <breakpoint-id> [-p <v>]... [-o <out>] debuggees-breakpoints-get <debuggee-id> <breakpoint-id> [-p <v>]... [-o <out>] debuggees-breakpoints-list <debuggee-id> [-p <v>]... [-o <out>] debuggees-breakpoints-set <debuggee-id> (-r <kv>)... [-p <v>]... [-o <out>] debuggees-list [-p <v>]... [-o <out>] clouddebugger2 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with clouddebugger2- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/clouddebugger2-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/clouddebugger2-secret.json , assuming that the required clouddebugger API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. clouddebugger2 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"controller_debuggees-breakpoints-list/","text":"Returns the list of all active breakpoints for the debuggee. The breakpoint specification ( location , condition , and expressions fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn't change the breakpoint semantics. This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> controller debuggees-breakpoints-list ... Required Scalar Argument <debuggee-id> (string) Required. Identifies the debuggee. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p agent-id=string Identifies the agent. This is the ID returned in the RegisterDebuggee response. -p success-on-timeout=boolean If set to true (recommended), returns google.rpc.Code.OK status and sets the wait_expired response field to true when the server-selected timeout has expired. If set to false (deprecated), returns google.rpc.Code.ABORTED status when the server-selected timeout has expired. -p wait-token=string A token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server-selected timeout has expired. The value should be set from the next_wait_token field in the last response. The initial value should be set to &#34;init&#34; . Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Breakpoints List"},{"location":"controller_debuggees-breakpoints-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> controller debuggees-breakpoints-list ...","title":"Scopes"},{"location":"controller_debuggees-breakpoints-list/#required-scalar-argument","text":"<debuggee-id> (string) Required. Identifies the debuggee.","title":"Required Scalar Argument"},{"location":"controller_debuggees-breakpoints-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"controller_debuggees-breakpoints-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p agent-id=string Identifies the agent. This is the ID returned in the RegisterDebuggee response. -p success-on-timeout=boolean If set to true (recommended), returns google.rpc.Code.OK status and sets the wait_expired response field to true when the server-selected timeout has expired. If set to false (deprecated), returns google.rpc.Code.ABORTED status when the server-selected timeout has expired. -p wait-token=string A token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server-selected timeout has expired. The value should be set from the next_wait_token field in the last response. The initial value should be set to &#34;init&#34; .","title":"Optional Method Properties"},{"location":"controller_debuggees-breakpoints-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"controller_debuggees-breakpoints-update/","text":"Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service. Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the location , condition and expressions fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> controller debuggees-breakpoints-update ... Required Scalar Arguments <debuggee-id> (string) Required. Identifies the debuggee being debugged. <id> (string) Breakpoint identifier, unique in the scope of the debuggee. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: UpdateActiveBreakpointRequest: breakpoint: action: string canary-expire-time: string condition: string create-time: string expressions: [string] final-time: string id: string is-final-state: boolean labels: { string: string } location: column: integer line: integer path: string log-level: string log-message-format: string state: string status: description: format: string parameters: [string] is-error: boolean refers-to: string user-email: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .breakpoint action=et Action that the agent should perform when the code at the breakpoint location is hit. canary-expire-time=magna The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state. condition=no Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location. create-time=ipsum Time this breakpoint was created by the server in seconds resolution. expressions=voluptua. List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is LOG , the evaluated expressions are included in log statements. Each invocation of this argument appends the given value to the array. final-time=at Time this breakpoint was finalized as seen by the server in seconds resolution. id=sanctus Breakpoint identifier, unique in the scope of the debuggee. is-final-state=false When true, indicates that this is a final result and the breakpoint state will not change from here on. labels=key=amet. A set of custom breakpoint properties, populated by the agent, to be displayed to the user. the value will be associated with the given key location column=42 Column within a line. The first column in a line as the value 1 . Agents that do not support setting breakpoints on specific columns ignore this field. line=49 Line inside the file. The first line in the file has the value 1 . path=duo Path to the source file within the source context of the target binary. .. log-level=ipsum Indicates the severity of the log. Only relevant when action is LOG . log-message-format=gubergren Only relevant when action is LOG . Defines the message to log when the breakpoint hits. The message may include parameter placeholders $0 , $1 , etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in log_message_format are not logged. Example: Message received, id = $0, count = $1 with expressions = [ message.id, message.count ] . state=lorem The current state of the breakpoint. status.description format=gubergren Format template for the message. The format uses placeholders $0 , $1 , etc. to reference parameters. $$ can be used to denote the $ character. Examples: * Failed to load &#39;$0&#39; which helps debug $1 the first time it is loaded. Again, $0 is very important. * Please pay $$10 to use $0 instead of $1. parameters=eos Optional parameters to be embedded into the message. Each invocation of this argument appends the given value to the array. .. is-error=true Distinguishes errors from informational messages. refers-to=invidunt Reference to which the message applies. .. user-email=amet E-mail address of the user that created this breakpoint About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Breakpoints Update"},{"location":"controller_debuggees-breakpoints-update/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> controller debuggees-breakpoints-update ...","title":"Scopes"},{"location":"controller_debuggees-breakpoints-update/#required-scalar-arguments","text":"<debuggee-id> (string) Required. Identifies the debuggee being debugged. <id> (string) Breakpoint identifier, unique in the scope of the debuggee.","title":"Required Scalar Arguments"},{"location":"controller_debuggees-breakpoints-update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: UpdateActiveBreakpointRequest: breakpoint: action: string canary-expire-time: string condition: string create-time: string expressions: [string] final-time: string id: string is-final-state: boolean labels: { string: string } location: column: integer line: integer path: string log-level: string log-message-format: string state: string status: description: format: string parameters: [string] is-error: boolean refers-to: string user-email: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .breakpoint action=et Action that the agent should perform when the code at the breakpoint location is hit. canary-expire-time=magna The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state. condition=no Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location. create-time=ipsum Time this breakpoint was created by the server in seconds resolution. expressions=voluptua. List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is LOG , the evaluated expressions are included in log statements. Each invocation of this argument appends the given value to the array. final-time=at Time this breakpoint was finalized as seen by the server in seconds resolution. id=sanctus Breakpoint identifier, unique in the scope of the debuggee. is-final-state=false When true, indicates that this is a final result and the breakpoint state will not change from here on. labels=key=amet. A set of custom breakpoint properties, populated by the agent, to be displayed to the user. the value will be associated with the given key location column=42 Column within a line. The first column in a line as the value 1 . Agents that do not support setting breakpoints on specific columns ignore this field. line=49 Line inside the file. The first line in the file has the value 1 . path=duo Path to the source file within the source context of the target binary. .. log-level=ipsum Indicates the severity of the log. Only relevant when action is LOG . log-message-format=gubergren Only relevant when action is LOG . Defines the message to log when the breakpoint hits. The message may include parameter placeholders $0 , $1 , etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in log_message_format are not logged. Example: Message received, id = $0, count = $1 with expressions = [ message.id, message.count ] . state=lorem The current state of the breakpoint. status.description format=gubergren Format template for the message. The format uses placeholders $0 , $1 , etc. to reference parameters. $$ can be used to denote the $ character. Examples: * Failed to load &#39;$0&#39; which helps debug $1 the first time it is loaded. Again, $0 is very important. * Please pay $$10 to use $0 instead of $1. parameters=eos Optional parameters to be embedded into the message. Each invocation of this argument appends the given value to the array. .. is-error=true Distinguishes errors from informational messages. refers-to=invidunt Reference to which the message applies. .. user-email=amet E-mail address of the user that created this breakpoint","title":"Required Request Value"},{"location":"controller_debuggees-breakpoints-update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"controller_debuggees-breakpoints-update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"controller_debuggees-breakpoints-update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"controller_debuggees-register/","text":"Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable debuggee_id . Agents should call this method again whenever google.rpc.Code.NOT_FOUND is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the debuggee_id format. Agents must handle debuggee_id value changing upon re-registration. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> controller debuggees-register ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RegisterDebuggeeRequest: debuggee: agent-version: string canary-mode: string description: string id: string is-disabled: boolean is-inactive: boolean labels: { string: string } project: string status: description: format: string parameters: [string] is-error: boolean refers-to: string uniquifier: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .debuggee agent-version=duo Version ID of the agent. Schema: domain/language-platform/vmajor.minor (for example google.com/java-gcp/v1.1 ). canary-mode=ipsum Used when setting breakpoint canary for this debuggee. description=sed Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended. id=ut Unique identifier for the debuggee generated by the controller service. is-disabled=true If set to true , indicates that the agent should disable itself and detach from the debuggee. is-inactive=true If set to true , indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped. labels=key=ipsum A set of custom debuggee properties, populated by the agent, to be displayed to the user. the value will be associated with the given key project=est Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project. status.description format=gubergren Format template for the message. The format uses placeholders $0 , $1 , etc. to reference parameters. $$ can be used to denote the $ character. Examples: * Failed to load &#39;$0&#39; which helps debug $1 the first time it is loaded. Again, $0 is very important. * Please pay $$10 to use $0 instead of $1. parameters=ea Optional parameters to be embedded into the message. Each invocation of this argument appends the given value to the array. .. is-error=false Distinguishes errors from informational messages. refers-to=lorem Reference to which the message applies. .. uniquifier=eos Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Register"},{"location":"controller_debuggees-register/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> controller debuggees-register ...","title":"Scopes"},{"location":"controller_debuggees-register/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RegisterDebuggeeRequest: debuggee: agent-version: string canary-mode: string description: string id: string is-disabled: boolean is-inactive: boolean labels: { string: string } project: string status: description: format: string parameters: [string] is-error: boolean refers-to: string uniquifier: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .debuggee agent-version=duo Version ID of the agent. Schema: domain/language-platform/vmajor.minor (for example google.com/java-gcp/v1.1 ). canary-mode=ipsum Used when setting breakpoint canary for this debuggee. description=sed Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended. id=ut Unique identifier for the debuggee generated by the controller service. is-disabled=true If set to true , indicates that the agent should disable itself and detach from the debuggee. is-inactive=true If set to true , indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped. labels=key=ipsum A set of custom debuggee properties, populated by the agent, to be displayed to the user. the value will be associated with the given key project=est Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project. status.description format=gubergren Format template for the message. The format uses placeholders $0 , $1 , etc. to reference parameters. $$ can be used to denote the $ character. Examples: * Failed to load &#39;$0&#39; which helps debug $1 the first time it is loaded. Again, $0 is very important. * Please pay $$10 to use $0 instead of $1. parameters=ea Optional parameters to be embedded into the message. Each invocation of this argument appends the given value to the array. .. is-error=false Distinguishes errors from informational messages. refers-to=lorem Reference to which the message applies. .. uniquifier=eos Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.","title":"Required Request Value"},{"location":"controller_debuggees-register/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"controller_debuggees-register/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"controller_debuggees-register/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"debugger_debuggees-breakpoints-delete/","text":"Deletes the breakpoint from the debuggee. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-delete ... Required Scalar Arguments <debuggee-id> (string) Required. ID of the debuggee whose breakpoint to delete. <breakpoint-id> (string) Required. ID of the breakpoint to delete. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Breakpoints Delete"},{"location":"debugger_debuggees-breakpoints-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-delete ...","title":"Scopes"},{"location":"debugger_debuggees-breakpoints-delete/#required-scalar-arguments","text":"<debuggee-id> (string) Required. ID of the debuggee whose breakpoint to delete. <breakpoint-id> (string) Required. ID of the breakpoint to delete.","title":"Required Scalar Arguments"},{"location":"debugger_debuggees-breakpoints-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"debugger_debuggees-breakpoints-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ).","title":"Optional Method Properties"},{"location":"debugger_debuggees-breakpoints-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"debugger_debuggees-breakpoints-get/","text":"Gets breakpoint information. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-get ... Required Scalar Arguments <debuggee-id> (string) Required. ID of the debuggee whose breakpoint to get. <breakpoint-id> (string) Required. ID of the breakpoint to get. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Breakpoints Get"},{"location":"debugger_debuggees-breakpoints-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-get ...","title":"Scopes"},{"location":"debugger_debuggees-breakpoints-get/#required-scalar-arguments","text":"<debuggee-id> (string) Required. ID of the debuggee whose breakpoint to get. <breakpoint-id> (string) Required. ID of the breakpoint to get.","title":"Required Scalar Arguments"},{"location":"debugger_debuggees-breakpoints-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"debugger_debuggees-breakpoints-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ).","title":"Optional Method Properties"},{"location":"debugger_debuggees-breakpoints-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"debugger_debuggees-breakpoints-list/","text":"Lists all breakpoints for the debuggee. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-list ... Required Scalar Argument <debuggee-id> (string) Required. ID of the debuggee whose breakpoints to list. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p action-value=string Only breakpoints with the specified action will pass the filter. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). -p include-all-users=boolean When set to true , the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller. -p include-inactive=boolean When set to true , the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints. -p strip-results=boolean This field is deprecated. The following fields are always stripped out of the result: stack_frames , evaluated_expressions and variable_table . -p wait-token=string A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code google.rpc.Code.ABORTED (RPC) is returned on wait timeout, which should be called again with the same wait_token . Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Breakpoints List"},{"location":"debugger_debuggees-breakpoints-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-list ...","title":"Scopes"},{"location":"debugger_debuggees-breakpoints-list/#required-scalar-argument","text":"<debuggee-id> (string) Required. ID of the debuggee whose breakpoints to list.","title":"Required Scalar Argument"},{"location":"debugger_debuggees-breakpoints-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"debugger_debuggees-breakpoints-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p action-value=string Only breakpoints with the specified action will pass the filter. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). -p include-all-users=boolean When set to true , the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller. -p include-inactive=boolean When set to true , the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints. -p strip-results=boolean This field is deprecated. The following fields are always stripped out of the result: stack_frames , evaluated_expressions and variable_table . -p wait-token=string A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code google.rpc.Code.ABORTED (RPC) is returned on wait timeout, which should be called again with the same wait_token .","title":"Optional Method Properties"},{"location":"debugger_debuggees-breakpoints-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"debugger_debuggees-breakpoints-set/","text":"Sets the breakpoint to the debuggee. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-set ... Required Scalar Argument <debuggee-id> (string) Required. ID of the debuggee where the breakpoint is to be set. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Breakpoint: action: string canary-expire-time: string condition: string create-time: string expressions: [string] final-time: string id: string is-final-state: boolean labels: { string: string } location: column: integer line: integer path: string log-level: string log-message-format: string state: string status: description: format: string parameters: [string] is-error: boolean refers-to: string user-email: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . action=labore Action that the agent should perform when the code at the breakpoint location is hit. canary-expire-time=sed The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state. condition=duo Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location. create-time=sed Time this breakpoint was created by the server in seconds resolution. expressions=no List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is LOG , the evaluated expressions are included in log statements. Each invocation of this argument appends the given value to the array. final-time=stet Time this breakpoint was finalized as seen by the server in seconds resolution. id=kasd Breakpoint identifier, unique in the scope of the debuggee. is-final-state=true When true, indicates that this is a final result and the breakpoint state will not change from here on. labels=key=et A set of custom breakpoint properties, populated by the agent, to be displayed to the user. the value will be associated with the given key location column=33 Column within a line. The first column in a line as the value 1 . Agents that do not support setting breakpoints on specific columns ignore this field. line=25 Line inside the file. The first line in the file has the value 1 . path=erat Path to the source file within the source context of the target binary. .. log-level=sed Indicates the severity of the log. Only relevant when action is LOG . log-message-format=duo Only relevant when action is LOG . Defines the message to log when the breakpoint hits. The message may include parameter placeholders $0 , $1 , etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in log_message_format are not logged. Example: Message received, id = $0, count = $1 with expressions = [ message.id, message.count ] . state=dolore The current state of the breakpoint. status.description format=et Format template for the message. The format uses placeholders $0 , $1 , etc. to reference parameters. $$ can be used to denote the $ character. Examples: * Failed to load &#39;$0&#39; which helps debug $1 the first time it is loaded. Again, $0 is very important. * Please pay $$10 to use $0 instead of $1. parameters=voluptua. Optional parameters to be embedded into the message. Each invocation of this argument appends the given value to the array. .. is-error=false Distinguishes errors from informational messages. refers-to=diam Reference to which the message applies. .. user-email=dolor E-mail address of the user that created this breakpoint About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p canary-option=string The canary option set by the user upon setting breakpoint. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees Breakpoints Set"},{"location":"debugger_debuggees-breakpoints-set/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-breakpoints-set ...","title":"Scopes"},{"location":"debugger_debuggees-breakpoints-set/#required-scalar-argument","text":"<debuggee-id> (string) Required. ID of the debuggee where the breakpoint is to be set.","title":"Required Scalar Argument"},{"location":"debugger_debuggees-breakpoints-set/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Breakpoint: action: string canary-expire-time: string condition: string create-time: string expressions: [string] final-time: string id: string is-final-state: boolean labels: { string: string } location: column: integer line: integer path: string log-level: string log-message-format: string state: string status: description: format: string parameters: [string] is-error: boolean refers-to: string user-email: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . action=labore Action that the agent should perform when the code at the breakpoint location is hit. canary-expire-time=sed The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state. condition=duo Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location. create-time=sed Time this breakpoint was created by the server in seconds resolution. expressions=no List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is LOG , the evaluated expressions are included in log statements. Each invocation of this argument appends the given value to the array. final-time=stet Time this breakpoint was finalized as seen by the server in seconds resolution. id=kasd Breakpoint identifier, unique in the scope of the debuggee. is-final-state=true When true, indicates that this is a final result and the breakpoint state will not change from here on. labels=key=et A set of custom breakpoint properties, populated by the agent, to be displayed to the user. the value will be associated with the given key location column=33 Column within a line. The first column in a line as the value 1 . Agents that do not support setting breakpoints on specific columns ignore this field. line=25 Line inside the file. The first line in the file has the value 1 . path=erat Path to the source file within the source context of the target binary. .. log-level=sed Indicates the severity of the log. Only relevant when action is LOG . log-message-format=duo Only relevant when action is LOG . Defines the message to log when the breakpoint hits. The message may include parameter placeholders $0 , $1 , etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in log_message_format are not logged. Example: Message received, id = $0, count = $1 with expressions = [ message.id, message.count ] . state=dolore The current state of the breakpoint. status.description format=et Format template for the message. The format uses placeholders $0 , $1 , etc. to reference parameters. $$ can be used to denote the $ character. Examples: * Failed to load &#39;$0&#39; which helps debug $1 the first time it is loaded. Again, $0 is very important. * Please pay $$10 to use $0 instead of $1. parameters=voluptua. Optional parameters to be embedded into the message. Each invocation of this argument appends the given value to the array. .. is-error=false Distinguishes errors from informational messages. refers-to=diam Reference to which the message applies. .. user-email=dolor E-mail address of the user that created this breakpoint","title":"Required Request Value"},{"location":"debugger_debuggees-breakpoints-set/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"debugger_debuggees-breakpoints-set/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"debugger_debuggees-breakpoints-set/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p canary-option=string The canary option set by the user upon setting breakpoint. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ).","title":"Optional Method Properties"},{"location":"debugger_debuggees-breakpoints-set/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"debugger_debuggees-list/","text":"Lists all the debuggees that the user has access to. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-list ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). -p include-inactive=boolean When set to true , the result includes all debuggees. Otherwise, the result includes only debuggees that are active. -p project=string Required. Project number of a Google Cloud project whose debuggees to list. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Debuggees List"},{"location":"debugger_debuggees-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud_debugger If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: clouddebugger2 --scope <scope> debugger debuggees-list ...","title":"Scopes"},{"location":"debugger_debuggees-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"debugger_debuggees-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p client-version=string Required. The client version making the call. Schema: domain/type/version (e.g., google.com/intellij/v1 ). -p include-inactive=boolean When set to true , the result includes all debuggees. Otherwise, the result includes only debuggees that are active. -p project=string Required. Project number of a Google Cloud project whose debuggees to list.","title":"Optional Method Properties"},{"location":"debugger_debuggees-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}