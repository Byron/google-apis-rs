use super::*;
/// A specification of the type and number of accelerator cards attached to the instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorConfig {
    /// The number of the guest accelerator cards exposed to this instance.
    #[serde(rename="acceleratorCount")]
    
    pub accelerator_count: Option<i32>,
    /// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
    #[serde(rename="acceleratorType")]
    
    pub accelerator_type: Option<String>,
}

impl client::Part for AcceleratorConfig {}


/// Represents an Accelerator Type resource. Google Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list accelerator types](AcceleratorTypeAggregatedListCall) (none)
/// * [get accelerator types](AcceleratorTypeGetCall) (response)
/// * [list accelerator types](AcceleratorTypeListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorType {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] The deprecation status associated with this accelerator type.
    
    pub deprecated: Option<DeprecationStatus>,
    /// [Output Only] An optional textual description of the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types.
    
    pub kind: Option<String>,
    /// [Output Only] Maximum number of accelerator cards allowed per instance.
    #[serde(rename="maximumCardsPerInstance")]
    
    pub maximum_cards_per_instance: Option<i32>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] Server-defined, fully qualified URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub zone: Option<String>,
}

impl client::Resource for AcceleratorType {}
impl client::ResponseResult for AcceleratorType {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list accelerator types](AcceleratorTypeAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypeAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of AcceleratorTypesScopedList resources.
    
    pub items: Option<HashMap<String, AcceleratorTypesScopedList>>,
    /// [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<AcceleratorTypeAggregatedListWarning>,
}

impl client::ResponseResult for AcceleratorTypeAggregatedList {}


/// Contains a list of accelerator types.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list accelerator types](AcceleratorTypeListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypeList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of AcceleratorType resources.
    
    pub items: Option<Vec<AcceleratorType>>,
    /// [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<AcceleratorTypeListWarning>,
}

impl client::ResponseResult for AcceleratorTypeList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypesScopedList {
    /// [Output Only] A list of accelerator types contained in this scope.
    #[serde(rename="acceleratorTypes")]
    
    pub accelerator_types: Option<Vec<AcceleratorType>>,
    /// [Output Only] An informational warning that appears when the accelerator types list is empty.
    
    pub warning: Option<AcceleratorTypesScopedListWarning>,
}

impl client::Part for AcceleratorTypesScopedList {}


/// An access configuration attached to an instance’s network interface. Only one access config per instance is supported.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add access config instances](InstanceAddAccessConfigCall) (request)
/// * [update access config instances](InstanceUpdateAccessConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AccessConfig {
    /// The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
    #[serde(rename="externalIpv6")]
    
    pub external_ipv6: Option<String>,
    /// The prefix length of the external IPv6 range.
    #[serde(rename="externalIpv6PrefixLength")]
    
    pub external_ipv6_prefix_length: Option<i32>,
    /// [Output Only] Type of the resource. Always compute#accessConfig for access configs.
    
    pub kind: Option<String>,
    /// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
    
    pub name: Option<String>,
    /// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
    #[serde(rename="natIP")]
    
    pub nat_ip: Option<String>,
    /// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
    #[serde(rename="networkTier")]
    
    pub network_tier: Option<AccessConfigNetworkTierEnum>,
    /// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig, a default PTR record will be createc for first IP in associated external IPv6 range.
    #[serde(rename="publicPtrDomainName")]
    
    pub public_ptr_domain_name: Option<String>,
    /// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A default PTR record will be created if the VM has external IPv6 range associated.
    #[serde(rename="setPublicPtr")]
    
    pub set_public_ptr: Option<bool>,
    /// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
    #[serde(rename="type")]
    
    pub type_: Option<AccessConfigTypeEnum>,
}

impl client::RequestValue for AccessConfig {}


/// Represents an IP Address resource. Google Compute Engine has two IP Address resources: * [Global (external and internal)](https://cloud.google.com/compute/docs/reference/rest/v1/globalAddresses) * [Regional (external and internal)](https://cloud.google.com/compute/docs/reference/rest/v1/addresses) For more information, see Reserving a static external IP address.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get addresses](AddressGetCall) (response)
/// * [insert addresses](AddressInsertCall) (request)
/// * [get global addresses](GlobalAddressGetCall) (response)
/// * [insert global addresses](GlobalAddressInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Address {
    /// The static IP address represented by this resource.
    
    pub address: Option<String>,
    /// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
    #[serde(rename="addressType")]
    
    pub address_type: Option<AddresAddressTypeEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this field when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
    #[serde(rename="ipVersion")]
    
    pub ip_version: Option<AddresIpVersionEnum>,
    /// The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation.
    #[serde(rename="ipv6EndpointType")]
    
    pub ipv6_endpoint_type: Option<AddresIpv6EndpointTypeEnum>,
    /// [Output Only] Type of the resource. Always compute#address for addresses.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    
    pub name: Option<String>,
    /// The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose.
    
    pub network: Option<String>,
    /// This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM.
    #[serde(rename="networkTier")]
    
    pub network_tier: Option<AddresNetworkTierEnum>,
    /// The prefix length if the resource represents an IP range.
    #[serde(rename="prefixLength")]
    
    pub prefix_length: Option<i32>,
    /// The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose. 
    
    pub purpose: Option<AddresPurposeEnum>,
    /// [Output Only] The URL of the region where a regional address resides. For regional addresses, you must specify the region as a path parameter in the HTTP request URL. *This field is not applicable to global addresses.*
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
    
    pub status: Option<AddresStatusEnum>,
    /// The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose.
    
    pub subnetwork: Option<String>,
    /// [Output Only] The URLs of the resources that are using this address.
    
    pub users: Option<Vec<String>>,
}

impl client::RequestValue for Address {}
impl client::ResponseResult for Address {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list addresses](AddressAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of AddressesScopedList resources.
    
    pub items: Option<HashMap<String, AddressesScopedList>>,
    /// [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<AddressAggregatedListWarning>,
}

impl client::ResponseResult for AddressAggregatedList {}


/// Contains a list of addresses.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list addresses](AddressListCall) (response)
/// * [list global addresses](GlobalAddressListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Address resources.
    
    pub items: Option<Vec<Address>>,
    /// [Output Only] Type of resource. Always compute#addressList for lists of addresses.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<AddressListWarning>,
}

impl client::ResponseResult for AddressList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressesScopedList {
    /// [Output Only] A list of addresses contained in this scope.
    
    pub addresses: Option<Vec<Address>>,
    /// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<AddressesScopedListWarning>,
}

impl client::Part for AddressesScopedList {}


/// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AdvancedMachineFeatures {
    /// Whether to enable nested virtualization or not (default is false).
    #[serde(rename="enableNestedVirtualization")]
    
    pub enable_nested_virtualization: Option<bool>,
    /// Whether to enable UEFI networking for instance creation.
    #[serde(rename="enableUefiNetworking")]
    
    pub enable_uefi_networking: Option<bool>,
    /// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
    #[serde(rename="threadsPerCore")]
    
    pub threads_per_core: Option<i32>,
    /// The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
    #[serde(rename="visibleCoreCount")]
    
    pub visible_core_count: Option<i32>,
}

impl client::Part for AdvancedMachineFeatures {}


/// An alias IP range attached to an instance's network interface.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AliasIpRange {
    /// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
    #[serde(rename="subnetworkRangeName")]
    
    pub subnetwork_range_name: Option<String>,
}

impl client::Part for AliasIpRange {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AllocationResourceStatus {
    /// no description provided
    #[serde(rename="specificSkuAllocation")]
    
    pub specific_sku_allocation: Option<AllocationResourceStatusSpecificSKUAllocation>,
}

impl client::Part for AllocationResourceStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AllocationResourceStatusSpecificSKUAllocation {
    /// no description provided
    #[serde(rename="sourceInstanceTemplateId")]
    
    pub source_instance_template_id: Option<String>,
}

impl client::Part for AllocationResourceStatusSpecificSKUAllocation {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
    /// Specifies the size of the disk in base-2 GB.
    #[serde(rename="diskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub disk_size_gb: Option<i64>,
    /// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
    
    pub interface: Option<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceEnum>,
}

impl client::Part for AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {}


/// Properties of the SKU instances being reserved. Next ID: 9
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AllocationSpecificSKUAllocationReservedInstanceProperties {
    /// Specifies accelerator type and count.
    #[serde(rename="guestAccelerators")]
    
    pub guest_accelerators: Option<Vec<AcceleratorConfig>>,
    /// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
    #[serde(rename="localSsds")]
    
    pub local_ssds: Option<Vec<AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk>>,
    /// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
    #[serde(rename="locationHint")]
    
    pub location_hint: Option<String>,
    /// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
    #[serde(rename="machineType")]
    
    pub machine_type: Option<String>,
    /// Minimum cpu platform the reservation.
    #[serde(rename="minCpuPlatform")]
    
    pub min_cpu_platform: Option<String>,
}

impl client::Part for AllocationSpecificSKUAllocationReservedInstanceProperties {}


/// This reservation type allows to pre allocate specific instance configuration. Next ID: 6
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AllocationSpecificSKUReservation {
    /// [Output Only] Indicates how many instances are actually usable currently.
    #[serde(rename="assuredCount")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub assured_count: Option<i64>,
    /// Specifies the number of resources that are allocated.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub count: Option<i64>,
    /// [Output Only] Indicates how many instances are in use.
    #[serde(rename="inUseCount")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub in_use_count: Option<i64>,
    /// The instance properties for the reservation.
    #[serde(rename="instanceProperties")]
    
    pub instance_properties: Option<AllocationSpecificSKUAllocationReservedInstanceProperties>,
    /// Specifies the instance template to create the reservation. If you use this field, you must exclude the instanceProperties field. This field is optional, and it can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate 
    #[serde(rename="sourceInstanceTemplate")]
    
    pub source_instance_template: Option<String>,
}

impl client::Part for AllocationSpecificSKUReservation {}


/// An instance-attached disk resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [attach disk instances](InstanceAttachDiskCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AttachedDisk {
    /// [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64.
    
    pub architecture: Option<AttachedDiskArchitectureEnum>,
    /// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
    #[serde(rename="autoDelete")]
    
    pub auto_delete: Option<bool>,
    /// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
    
    pub boot: Option<bool>,
    /// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
    #[serde(rename="deviceName")]
    
    pub device_name: Option<String>,
    /// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
    #[serde(rename="diskEncryptionKey")]
    
    pub disk_encryption_key: Option<CustomerEncryptionKey>,
    /// The size of the disk in GB.
    #[serde(rename="diskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub disk_size_gb: Option<i64>,
    /// [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
    #[serde(rename="forceAttach")]
    
    pub force_attach: Option<bool>,
    /// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    #[serde(rename="guestOsFeatures")]
    
    pub guest_os_features: Option<Vec<GuestOsFeature>>,
    /// [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
    
    pub index: Option<i32>,
    /// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
    #[serde(rename="initializeParams")]
    
    pub initialize_params: Option<AttachedDiskInitializeParams>,
    /// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
    
    pub interface: Option<AttachedDiskInterfaceEnum>,
    /// [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
    
    pub kind: Option<String>,
    /// [Output Only] Any valid publicly visible licenses.
    
    pub licenses: Option<Vec<String>>,
    /// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
    
    pub mode: Option<AttachedDiskModeEnum>,
    /// [Output Only] shielded vm initial state stored on disk
    #[serde(rename="shieldedInstanceInitialState")]
    
    pub shielded_instance_initial_state: Option<InitialStateConfig>,
    /// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk.
    
    pub source: Option<String>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
    #[serde(rename="type")]
    
    pub type_: Option<AttachedDiskTypeEnum>,
}

impl client::RequestValue for AttachedDisk {}


/// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AttachedDiskInitializeParams {
    /// The architecture of the attached disk. Valid values are arm64 or x86_64.
    
    pub architecture: Option<AttachedDiskInitializeParamArchitectureEnum>,
    /// An optional description. Provide this property when creating the disk.
    
    pub description: Option<String>,
    /// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
    #[serde(rename="diskName")]
    
    pub disk_name: Option<String>,
    /// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
    #[serde(rename="diskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub disk_size_gb: Option<i64>,
    /// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you specify this field when creating a VM, you can provide either the full or partial URL. For example, the following values are valid: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType If you specify this field when creating or updating an instance template or all-instances configuration, specify the type of the disk, not the URL. For example: pd-standard.
    #[serde(rename="diskType")]
    
    pub disk_type: Option<String>,
    /// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
    
    pub labels: Option<HashMap<String, String>>,
    /// A list of publicly visible licenses. Reserved for Google's use.
    
    pub licenses: Option<Vec<String>>,
    /// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
    #[serde(rename="onUpdateAction")]
    
    pub on_update_action: Option<AttachedDiskInitializeParamOnUpdateActionEnum>,
    /// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
    #[serde(rename="provisionedIops")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub provisioned_iops: Option<i64>,
    /// Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
    #[serde(rename="resourceManagerTags")]
    
    pub resource_manager_tags: Option<HashMap<String, String>>,
    /// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
    /// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
    #[serde(rename="sourceImage")]
    
    pub source_image: Option<String>,
    /// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. InstanceTemplate and InstancePropertiesPatch do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
    #[serde(rename="sourceImageEncryptionKey")]
    
    pub source_image_encryption_key: Option<CustomerEncryptionKey>,
    /// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
    #[serde(rename="sourceSnapshot")]
    
    pub source_snapshot: Option<String>,
    /// The customer-supplied encryption key of the source snapshot.
    #[serde(rename="sourceSnapshotEncryptionKey")]
    
    pub source_snapshot_encryption_key: Option<CustomerEncryptionKey>,
}

impl client::Part for AttachedDiskInitializeParams {}


/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AuditConfig {
    /// The configuration for logging of each type of permission.
    #[serde(rename="auditLogConfigs")]
    
    pub audit_log_configs: Option<Vec<AuditLogConfig>>,
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="exemptedMembers")]
    
    pub exempted_members: Option<Vec<String>>,
    /// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
    
    pub service: Option<String>,
}

impl client::Part for AuditConfig {}


/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AuditLogConfig {
    /// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
    #[serde(rename="exemptedMembers")]
    
    pub exempted_members: Option<Vec<String>>,
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="ignoreChildExemptions")]
    
    pub ignore_child_exemptions: Option<bool>,
    /// The log type that this config enables.
    #[serde(rename="logType")]
    
    pub log_type: Option<AuditLogConfigLogTypeEnum>,
}

impl client::Part for AuditLogConfig {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AuthorizationLoggingOptions {
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="permissionType")]
    
    pub permission_type: Option<AuthorizationLoggingOptionPermissionTypeEnum>,
}

impl client::Part for AuthorizationLoggingOptions {}


/// Represents an Autoscaler resource. Google Compute Engine has two Autoscaler resources: * [Zonal](https://cloud.google.com/compute/docs/reference/rest/v1/autoscalers) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionAutoscalers) Use autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances. For zonal managed instance groups resource, use the autoscaler resource. For regional managed instance groups, use the regionAutoscalers resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list autoscalers](AutoscalerAggregatedListCall) (none)
/// * [delete autoscalers](AutoscalerDeleteCall) (none)
/// * [get autoscalers](AutoscalerGetCall) (response)
/// * [insert autoscalers](AutoscalerInsertCall) (request)
/// * [list autoscalers](AutoscalerListCall) (none)
/// * [patch autoscalers](AutoscalerPatchCall) (request)
/// * [update autoscalers](AutoscalerUpdateCall) (request)
/// * [get region autoscalers](RegionAutoscalerGetCall) (response)
/// * [insert region autoscalers](RegionAutoscalerInsertCall) (request)
/// * [patch region autoscalers](RegionAutoscalerPatchCall) (request)
/// * [update region autoscalers](RegionAutoscalerUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Autoscaler {
    /// The configuration parameters for the autoscaling algorithm. You can define one or more signals for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization. If none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.
    #[serde(rename="autoscalingPolicy")]
    
    pub autoscaling_policy: Option<AutoscalingPolicy>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#autoscaler for autoscalers.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates the recommended MIG size even when the autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to an existing managed instance group or autoscaler did not generate its prediction.
    #[serde(rename="recommendedSize")]
    
    pub recommended_size: Option<i32>,
    /// [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope).
    
    pub region: Option<String>,
    /// [Output Only] Status information of existing scaling schedules.
    #[serde(rename="scalingScheduleStatus")]
    
    pub scaling_schedule_status: Option<HashMap<String, ScalingScheduleStatus>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The status of the autoscaler configuration. Current set of possible values: - PENDING: Autoscaler backend hasn't read new/updated configuration. - DELETING: Configuration is being deleted. - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field. New values might be added in the future.
    
    pub status: Option<AutoscalerStatusEnum>,
    /// [Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you might encounter.
    #[serde(rename="statusDetails")]
    
    pub status_details: Option<Vec<AutoscalerStatusDetails>>,
    /// URL of the managed instance group that this autoscaler will scale. This field is required when creating an autoscaler.
    
    pub target: Option<String>,
    /// [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope).
    
    pub zone: Option<String>,
}

impl client::RequestValue for Autoscaler {}
impl client::Resource for Autoscaler {}
impl client::ResponseResult for Autoscaler {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list autoscalers](AutoscalerAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of AutoscalersScopedList resources.
    
    pub items: Option<HashMap<String, AutoscalersScopedList>>,
    /// [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources. end_interface: MixerListResponseWithEtagBuilder
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<AutoscalerAggregatedListWarning>,
}

impl client::ResponseResult for AutoscalerAggregatedList {}


/// Contains a list of Autoscaler resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list autoscalers](AutoscalerListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Autoscaler resources.
    
    pub items: Option<Vec<Autoscaler>>,
    /// [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<AutoscalerListWarning>,
}

impl client::ResponseResult for AutoscalerList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerStatusDetails {
    /// The status message.
    
    pub message: Option<String>,
    /// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
    #[serde(rename="type")]
    
    pub type_: Option<AutoscalerStatusDetailTypeEnum>,
}

impl client::Part for AutoscalerStatusDetails {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalersScopedList {
    /// [Output Only] A list of autoscalers contained in this scope.
    
    pub autoscalers: Option<Vec<Autoscaler>>,
    /// [Output Only] Informational warning which replaces the list of autoscalers when the list is empty.
    
    pub warning: Option<AutoscalersScopedListWarning>,
}

impl client::Part for AutoscalersScopedList {}


/// Cloud Autoscaler policy.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalingPolicy {
    /// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
    #[serde(rename="coolDownPeriodSec")]
    
    pub cool_down_period_sec: Option<i32>,
    /// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
    #[serde(rename="cpuUtilization")]
    
    pub cpu_utilization: Option<AutoscalingPolicyCpuUtilization>,
    /// Configuration parameters of autoscaling based on a custom metric.
    #[serde(rename="customMetricUtilizations")]
    
    pub custom_metric_utilizations: Option<Vec<AutoscalingPolicyCustomMetricUtilization>>,
    /// Configuration parameters of autoscaling based on load balancer.
    #[serde(rename="loadBalancingUtilization")]
    
    pub load_balancing_utilization: Option<AutoscalingPolicyLoadBalancingUtilization>,
    /// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
    #[serde(rename="maxNumReplicas")]
    
    pub max_num_replicas: Option<i32>,
    /// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
    #[serde(rename="minNumReplicas")]
    
    pub min_num_replicas: Option<i32>,
    /// Defines operating mode for this policy.
    
    pub mode: Option<AutoscalingPolicyModeEnum>,
    /// no description provided
    #[serde(rename="scaleInControl")]
    
    pub scale_in_control: Option<AutoscalingPolicyScaleInControl>,
    /// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
    #[serde(rename="scalingSchedules")]
    
    pub scaling_schedules: Option<HashMap<String, AutoscalingPolicyScalingSchedule>>,
}

impl client::Part for AutoscalingPolicy {}


/// CPU utilization policy.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalingPolicyCpuUtilization {
    /// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
    #[serde(rename="predictiveMethod")]
    
    pub predictive_method: Option<AutoscalingPolicyCpuUtilizationPredictiveMethodEnum>,
    /// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
    #[serde(rename="utilizationTarget")]
    
    pub utilization_target: Option<f64>,
}

impl client::Part for AutoscalingPolicyCpuUtilization {}


/// Custom utilization metric policy.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalingPolicyCustomMetricUtilization {
    /// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
    
    pub filter: Option<String>,
    /// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
    
    pub metric: Option<String>,
    /// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
    #[serde(rename="singleInstanceAssignment")]
    
    pub single_instance_assignment: Option<f64>,
    /// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
    #[serde(rename="utilizationTarget")]
    
    pub utilization_target: Option<f64>,
    /// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
    #[serde(rename="utilizationTargetType")]
    
    pub utilization_target_type: Option<AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeEnum>,
}

impl client::Part for AutoscalingPolicyCustomMetricUtilization {}


/// Configuration parameters of autoscaling based on load balancing.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalingPolicyLoadBalancingUtilization {
    /// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
    #[serde(rename="utilizationTarget")]
    
    pub utilization_target: Option<f64>,
}

impl client::Part for AutoscalingPolicyLoadBalancingUtilization {}


/// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalingPolicyScaleInControl {
    /// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
    #[serde(rename="maxScaledInReplicas")]
    
    pub max_scaled_in_replicas: Option<FixedOrPercent>,
    /// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
    #[serde(rename="timeWindowSec")]
    
    pub time_window_sec: Option<i32>,
}

impl client::Part for AutoscalingPolicyScaleInControl {}


/// Scaling based on user-defined schedule. The message describes a single scaling schedule. A scaling schedule changes the minimum number of VM instances an autoscaler can recommend, which can trigger scaling out.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalingPolicyScalingSchedule {
    /// A description of a scaling schedule.
    
    pub description: Option<String>,
    /// A boolean value that specifies whether a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect. This field is optional, and its value is false by default.
    
    pub disabled: Option<bool>,
    /// The duration of time intervals, in seconds, for which this scaling schedule is to run. The minimum allowed value is 300. This field is required.
    #[serde(rename="durationSec")]
    
    pub duration_sec: Option<i32>,
    /// The minimum number of VM instances that the autoscaler will recommend in time intervals starting according to schedule. This field is required.
    #[serde(rename="minRequiredReplicas")]
    
    pub min_required_replicas: Option<i32>,
    /// The start timestamps of time intervals when this scaling schedule is to provide a scaling signal. This field uses the extended cron format (with an optional year field). The expression can describe a single timestamp if the optional year is set, in which case the scaling schedule runs once. The schedule is interpreted with respect to time_zone. This field is required. Note: These timestamps only describe when autoscaler starts providing the scaling signal. The VMs need additional time to become serving.
    
    pub schedule: Option<String>,
    /// The time zone to use when interpreting the schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database. This field is assigned a default value of “UTC” if left empty.
    #[serde(rename="timeZone")]
    
    pub time_zone: Option<String>,
}

impl client::Part for AutoscalingPolicyScalingSchedule {}


/// Message containing information of one individual backend.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Backend {
    /// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
    #[serde(rename="balancingMode")]
    
    pub balancing_mode: Option<BackendBalancingModeEnum>,
    /// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service. Not available with backends that don't support using a balancingMode. This includes backends such as global internet NEGs, regional serverless NEGs, and PSC NEGs.
    #[serde(rename="capacityScaler")]
    
    pub capacity_scaler: Option<f32>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
    
    pub failover: Option<bool>,
    /// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
    
    pub group: Option<String>,
    /// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
    #[serde(rename="maxConnections")]
    
    pub max_connections: Option<i32>,
    /// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
    #[serde(rename="maxConnectionsPerEndpoint")]
    
    pub max_connections_per_endpoint: Option<i32>,
    /// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
    #[serde(rename="maxConnectionsPerInstance")]
    
    pub max_connections_per_instance: Option<i32>,
    /// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
    #[serde(rename="maxRate")]
    
    pub max_rate: Option<i32>,
    /// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
    #[serde(rename="maxRatePerEndpoint")]
    
    pub max_rate_per_endpoint: Option<f32>,
    /// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
    #[serde(rename="maxRatePerInstance")]
    
    pub max_rate_per_instance: Option<f32>,
    /// Optional parameter to define a target capacity for the UTILIZATION balancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
    #[serde(rename="maxUtilization")]
    
    pub max_utilization: Option<f32>,
}

impl client::Part for Backend {}


/// Represents a Cloud Storage Bucket resource. This Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add signed url key backend buckets](BackendBucketAddSignedUrlKeyCall) (none)
/// * [delete backend buckets](BackendBucketDeleteCall) (none)
/// * [delete signed url key backend buckets](BackendBucketDeleteSignedUrlKeyCall) (none)
/// * [get backend buckets](BackendBucketGetCall) (response)
/// * [insert backend buckets](BackendBucketInsertCall) (request)
/// * [list backend buckets](BackendBucketListCall) (none)
/// * [patch backend buckets](BackendBucketPatchCall) (request)
/// * [set edge security policy backend buckets](BackendBucketSetEdgeSecurityPolicyCall) (none)
/// * [update backend buckets](BackendBucketUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucket {
    /// Cloud Storage bucket name.
    #[serde(rename="bucketName")]
    
    pub bucket_name: Option<String>,
    /// Cloud CDN configuration for this BackendBucket.
    #[serde(rename="cdnPolicy")]
    
    pub cdn_policy: Option<BackendBucketCdnPolicy>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    #[serde(rename="compressionMode")]
    
    pub compression_mode: Option<BackendBucketCompressionModeEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// Headers that the HTTP/S load balancer should add to proxied responses.
    #[serde(rename="customResponseHeaders")]
    
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional textual description of the resource; provided by the client when the resource is created.
    
    pub description: Option<String>,
    /// [Output Only] The resource URL for the edge security policy associated with this backend bucket.
    #[serde(rename="edgeSecurityPolicy")]
    
    pub edge_security_policy: Option<String>,
    /// If true, enable Cloud CDN for this BackendBucket.
    #[serde(rename="enableCdn")]
    
    pub enable_cdn: Option<bool>,
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// Type of the resource.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::RequestValue for BackendBucket {}
impl client::Resource for BackendBucket {}
impl client::ResponseResult for BackendBucket {}


/// Message containing Cloud CDN configuration for a backend bucket.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    #[serde(rename="bypassCacheOnRequestHeaders")]
    
    pub bypass_cache_on_request_headers: Option<Vec<BackendBucketCdnPolicyBypassCacheOnRequestHeader>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    #[serde(rename="cacheKeyPolicy")]
    
    pub cache_key_policy: Option<BackendBucketCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    #[serde(rename="cacheMode")]
    
    pub cache_mode: Option<BackendBucketCdnPolicyCacheModeEnum>,
    /// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
    #[serde(rename="clientTtl")]
    
    pub client_ttl: Option<i32>,
    /// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(rename="defaultTtl")]
    
    pub default_ttl: Option<i32>,
    /// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(rename="maxTtl")]
    
    pub max_ttl: Option<i32>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
    #[serde(rename="negativeCaching")]
    
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
    #[serde(rename="negativeCachingPolicy")]
    
    pub negative_caching_policy: Option<Vec<BackendBucketCdnPolicyNegativeCachingPolicy>>,
    /// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    #[serde(rename="requestCoalescing")]
    
    pub request_coalescing: Option<bool>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
    #[serde(rename="serveWhileStale")]
    
    pub serve_while_stale: Option<i32>,
    /// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
    #[serde(rename="signedUrlCacheMaxAgeSec")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub signed_url_cache_max_age_sec: Option<i64>,
    /// [Output Only] Names of the keys for signing request URLs.
    #[serde(rename="signedUrlKeyNames")]
    
    pub signed_url_key_names: Option<Vec<String>>,
}

impl client::Part for BackendBucketCdnPolicy {}


/// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketCdnPolicyBypassCacheOnRequestHeader {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(rename="headerName")]
    
    pub header_name: Option<String>,
}

impl client::Part for BackendBucketCdnPolicyBypassCacheOnRequestHeader {}


/// Message containing what to include in the cache key for a request for Cloud CDN.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketCdnPolicyCacheKeyPolicy {
    /// Allows HTTP request headers (by name) to be used in the cache key.
    #[serde(rename="includeHttpHeaders")]
    
    pub include_http_headers: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys. Default parameters are always included. '&' and '=' will be percent encoded and not treated as delimiters.
    #[serde(rename="queryStringWhitelist")]
    
    pub query_string_whitelist: Option<Vec<String>>,
}

impl client::Part for BackendBucketCdnPolicyCacheKeyPolicy {}


/// Specify CDN TTLs for response error codes.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
    
    pub code: Option<i32>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    
    pub ttl: Option<i32>,
}

impl client::Part for BackendBucketCdnPolicyNegativeCachingPolicy {}


/// Contains a list of BackendBucket resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list backend buckets](BackendBucketListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of BackendBucket resources.
    
    pub items: Option<Vec<BackendBucket>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<BackendBucketListWarning>,
}

impl client::ResponseResult for BackendBucketList {}


/// Represents a Backend Service resource. A backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly. Backend services in Google Compute Engine can be either regionally or globally scoped. * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionBackendServices) For more information, see Backend Services.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add signed url key backend services](BackendServiceAddSignedUrlKeyCall) (none)
/// * [aggregated list backend services](BackendServiceAggregatedListCall) (none)
/// * [delete backend services](BackendServiceDeleteCall) (none)
/// * [delete signed url key backend services](BackendServiceDeleteSignedUrlKeyCall) (none)
/// * [get backend services](BackendServiceGetCall) (response)
/// * [get health backend services](BackendServiceGetHealthCall) (none)
/// * [get iam policy backend services](BackendServiceGetIamPolicyCall) (none)
/// * [insert backend services](BackendServiceInsertCall) (request)
/// * [list backend services](BackendServiceListCall) (none)
/// * [patch backend services](BackendServicePatchCall) (request)
/// * [set edge security policy backend services](BackendServiceSetEdgeSecurityPolicyCall) (none)
/// * [set iam policy backend services](BackendServiceSetIamPolicyCall) (none)
/// * [set security policy backend services](BackendServiceSetSecurityPolicyCall) (none)
/// * [update backend services](BackendServiceUpdateCall) (request)
/// * [get region backend services](RegionBackendServiceGetCall) (response)
/// * [insert region backend services](RegionBackendServiceInsertCall) (request)
/// * [patch region backend services](RegionBackendServicePatchCall) (request)
/// * [update region backend services](RegionBackendServiceUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendService {
    /// Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="affinityCookieTtlSec")]
    
    pub affinity_cookie_ttl_sec: Option<i32>,
    /// The list of backends that serve this BackendService.
    
    pub backends: Option<Vec<Backend>>,
    /// Cloud CDN configuration for this BackendService. Only available for specified load balancer types.
    #[serde(rename="cdnPolicy")]
    
    pub cdn_policy: Option<BackendServiceCdnPolicy>,
    /// no description provided
    #[serde(rename="circuitBreakers")]
    
    pub circuit_breakers: Option<CircuitBreakers>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    #[serde(rename="compressionMode")]
    
    pub compression_mode: Option<BackendServiceCompressionModeEnum>,
    /// no description provided
    #[serde(rename="connectionDraining")]
    
    pub connection_draining: Option<ConnectionDraining>,
    /// Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP/UDP Load Balancing.
    #[serde(rename="connectionTrackingPolicy")]
    
    pub connection_tracking_policy: Option<BackendServiceConnectionTrackingPolicy>,
    /// Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. 
    #[serde(rename="consistentHash")]
    
    pub consistent_hash: Option<ConsistentHashLoadBalancerSettings>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
    #[serde(rename="customRequestHeaders")]
    
    pub custom_request_headers: Option<Vec<String>>,
    /// Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).
    #[serde(rename="customResponseHeaders")]
    
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The resource URL for the edge security policy associated with this backend service.
    #[serde(rename="edgeSecurityPolicy")]
    
    pub edge_security_policy: Option<String>,
    /// If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer.
    #[serde(rename="enableCDN")]
    
    pub enable_cdn: Option<bool>,
    /// Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
    #[serde(rename="failoverPolicy")]
    
    pub failover_policy: Option<BackendServiceFailoverPolicy>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
    #[serde(rename="healthChecks")]
    
    pub health_checks: Option<Vec<String>>,
    /// The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing.
    
    pub iap: Option<BackendServiceIAP>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#backendService for backend services.
    
    pub kind: Option<String>,
    /// Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
    #[serde(rename="loadBalancingScheme")]
    
    pub load_balancing_scheme: Option<BackendServiceLoadBalancingSchemeEnum>,
    /// A list of locality load balancing policies to be used in order of preference. Either the policy or the customPolicy field should be set. Overrides any value set in the localityLbPolicy field. localityLbPolicies is only supported when the BackendService is referenced by a URL Map that is referenced by a target gRPC proxy that has the validateForProxyless field set to true.
    #[serde(rename="localityLbPolicies")]
    
    pub locality_lb_policies: Option<Vec<BackendServiceLocalityLoadBalancingPolicyConfig>>,
    /// The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="localityLbPolicy")]
    
    pub locality_lb_policy: Option<BackendServiceLocalityLbPolicyEnum>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
    #[serde(rename="logConfig")]
    
    pub log_config: Option<BackendServiceLogConfig>,
    /// Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL_SELF_MANAGED.
    #[serde(rename="maxStreamDuration")]
    
    pub max_stream_duration: Option<Duration>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.
    
    pub network: Option<String>,
    /// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2, or GRPC, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. 
    #[serde(rename="outlierDetection")]
    
    pub outlier_detection: Option<OutlierDetection>,
    /// Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port.
    
    pub port: Option<i32>,
    /// A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port_name.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
    
    pub protocol: Option<BackendServiceProtocolEnum>,
    /// [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] The resource URL for the security policy associated with this backend service.
    #[serde(rename="securityPolicy")]
    
    pub security_policy: Option<String>,
    /// This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    #[serde(rename="securitySettings")]
    
    pub security_settings: Option<SecuritySettings>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL_SELF_MANAGED. If set, lists of backends and health checks must be both empty.
    #[serde(rename="serviceBindings")]
    
    pub service_bindings: Option<Vec<String>>,
    /// Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
    #[serde(rename="sessionAffinity")]
    
    pub session_affinity: Option<BackendServiceSessionAffinityEnum>,
    /// no description provided
    
    pub subsetting: Option<Subsetting>,
    /// The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
    #[serde(rename="timeoutSec")]
    
    pub timeout_sec: Option<i32>,
}

impl client::RequestValue for BackendService {}
impl client::Resource for BackendService {}
impl client::ResponseResult for BackendService {}


/// Contains a list of BackendServicesScopedList.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list backend services](BackendServiceAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of BackendServicesScopedList resources.
    
    pub items: Option<HashMap<String, BackendServicesScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<BackendServiceAggregatedListWarning>,
}

impl client::ResponseResult for BackendServiceAggregatedList {}


/// Message containing Cloud CDN configuration for a backend service.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    #[serde(rename="bypassCacheOnRequestHeaders")]
    
    pub bypass_cache_on_request_headers: Option<Vec<BackendServiceCdnPolicyBypassCacheOnRequestHeader>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    #[serde(rename="cacheKeyPolicy")]
    
    pub cache_key_policy: Option<CacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    #[serde(rename="cacheMode")]
    
    pub cache_mode: Option<BackendServiceCdnPolicyCacheModeEnum>,
    /// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
    #[serde(rename="clientTtl")]
    
    pub client_ttl: Option<i32>,
    /// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(rename="defaultTtl")]
    
    pub default_ttl: Option<i32>,
    /// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(rename="maxTtl")]
    
    pub max_ttl: Option<i32>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
    #[serde(rename="negativeCaching")]
    
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
    #[serde(rename="negativeCachingPolicy")]
    
    pub negative_caching_policy: Option<Vec<BackendServiceCdnPolicyNegativeCachingPolicy>>,
    /// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    #[serde(rename="requestCoalescing")]
    
    pub request_coalescing: Option<bool>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
    #[serde(rename="serveWhileStale")]
    
    pub serve_while_stale: Option<i32>,
    /// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
    #[serde(rename="signedUrlCacheMaxAgeSec")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub signed_url_cache_max_age_sec: Option<i64>,
    /// [Output Only] Names of the keys for signing request URLs.
    #[serde(rename="signedUrlKeyNames")]
    
    pub signed_url_key_names: Option<Vec<String>>,
}

impl client::Part for BackendServiceCdnPolicy {}


/// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceCdnPolicyBypassCacheOnRequestHeader {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(rename="headerName")]
    
    pub header_name: Option<String>,
}

impl client::Part for BackendServiceCdnPolicyBypassCacheOnRequestHeader {}


/// Specify CDN TTLs for response error codes.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
    
    pub code: Option<i32>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    
    pub ttl: Option<i32>,
}

impl client::Part for BackendServiceCdnPolicyNegativeCachingPolicy {}


/// Connection Tracking configuration for this BackendService.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceConnectionTrackingPolicy {
    /// Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).
    #[serde(rename="connectionPersistenceOnUnhealthyBackends")]
    
    pub connection_persistence_on_unhealthy_backends: Option<BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum>,
    /// Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
    #[serde(rename="enableStrongAffinity")]
    
    pub enable_strong_affinity: Option<bool>,
    /// Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For Internal TCP/UDP Load Balancing: - The minimum (default) is 10 minutes and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT_IP_NO_DESTINATION, CLIENT_IP or CLIENT_IP_PROTO, and Tracking Mode is PER_SESSION). For Network Load Balancer the default is 60 seconds. This option is not available publicly.
    #[serde(rename="idleTimeoutSec")]
    
    pub idle_timeout_sec: Option<i32>,
    /// Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode).
    #[serde(rename="trackingMode")]
    
    pub tracking_mode: Option<BackendServiceConnectionTrackingPolicyTrackingModeEnum>,
}

impl client::Part for BackendServiceConnectionTrackingPolicy {}


/// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceFailoverPolicy {
    /// This can be set to true only if the protocol is TCP. The default is false.
    #[serde(rename="disableConnectionDrainOnFailover")]
    
    pub disable_connection_drain_on_failover: Option<bool>,
    /// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). The default is false.
    #[serde(rename="dropTrafficIfUnhealthy")]
    
    pub drop_traffic_if_unhealthy: Option<bool>,
    /// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
    #[serde(rename="failoverRatio")]
    
    pub failover_ratio: Option<f32>,
}

impl client::Part for BackendServiceFailoverPolicy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get health backend services](BackendServiceGetHealthCall) (response)
/// * [get health region backend services](RegionBackendServiceGetHealthCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceGroupHealth {
    /// Metadata defined as annotations on the network endpoint group.
    
    pub annotations: Option<HashMap<String, String>>,
    /// Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks.
    #[serde(rename="healthStatus")]
    
    pub health_status: Option<Vec<HealthStatus>>,
    /// [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services.
    
    pub kind: Option<String>,
}

impl client::ResponseResult for BackendServiceGroupHealth {}


/// Identity-Aware Proxy
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceIAP {
    /// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
    
    pub enabled: Option<bool>,
    /// OAuth2 client ID to use for the authentication flow.
    #[serde(rename="oauth2ClientId")]
    
    pub oauth2_client_id: Option<String>,
    /// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
    #[serde(rename="oauth2ClientSecret")]
    
    pub oauth2_client_secret: Option<String>,
    /// [Output Only] SHA256 hash value for the field oauth2_client_secret above.
    #[serde(rename="oauth2ClientSecretSha256")]
    
    pub oauth2_client_secret_sha256: Option<String>,
}

impl client::Part for BackendServiceIAP {}


/// Contains a list of BackendService resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list backend services](BackendServiceListCall) (response)
/// * [list region backend services](RegionBackendServiceListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of BackendService resources.
    
    pub items: Option<Vec<BackendService>>,
    /// [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<BackendServiceListWarning>,
}

impl client::ResponseResult for BackendServiceList {}


/// Container for either a built-in LB policy supported by gRPC or Envoy or a custom one implemented by the end user.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceLocalityLoadBalancingPolicyConfig {
    /// no description provided
    #[serde(rename="customPolicy")]
    
    pub custom_policy: Option<BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy>,
    /// no description provided
    
    pub policy: Option<BackendServiceLocalityLoadBalancingPolicyConfigPolicy>,
}

impl client::Part for BackendServiceLocalityLoadBalancingPolicyConfig {}


/// The configuration for a custom policy implemented by the user and deployed with the client.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy {
    /// An optional, arbitrary JSON object with configuration data, understood by a locally installed custom policy implementation.
    
    pub data: Option<String>,
    /// Identifies the custom policy. The value should match the type the custom implementation is registered with on the gRPC clients. It should follow protocol buffer message naming conventions and include the full path (e.g. myorg.CustomLbPolicy). The maximum length is 256 characters. Note that specifying the same custom policy more than once for a backend is not a valid configuration and will be rejected.
    
    pub name: Option<String>,
}

impl client::Part for BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy {}


/// The configuration for a built-in load balancing policy.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceLocalityLoadBalancingPolicyConfigPolicy {
    /// The name of a locality load balancer policy to be used. The value should be one of the predefined ones as supported by localityLbPolicy, although at the moment only ROUND_ROBIN is supported. This field should only be populated when the customPolicy field is not used. Note that specifying the same policy more than once for a backend is not a valid configuration and will be rejected.
    
    pub name: Option<BackendServiceLocalityLoadBalancingPolicyConfigPolicyNameEnum>,
}

impl client::Part for BackendServiceLocalityLoadBalancingPolicyConfigPolicy {}


/// The available logging options for the load balancer traffic served by this backend service.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceLogConfig {
    /// Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false.
    
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
    #[serde(rename="sampleRate")]
    
    pub sample_rate: Option<f32>,
}

impl client::Part for BackendServiceLogConfig {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceReference {
    /// no description provided
    #[serde(rename="backendService")]
    
    pub backend_service: Option<String>,
}

impl client::Part for BackendServiceReference {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServicesScopedList {
    /// A list of BackendServices contained in this scope.
    #[serde(rename="backendServices")]
    
    pub backend_services: Option<Vec<BackendService>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<BackendServicesScopedListWarning>,
}

impl client::Part for BackendServicesScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BfdPacket {
    /// The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="authenticationPresent")]
    
    pub authentication_present: Option<bool>,
    /// The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="controlPlaneIndependent")]
    
    pub control_plane_independent: Option<bool>,
    /// The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880
    
    pub demand: Option<bool>,
    /// The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
    
    pub diagnostic: Option<BfdPacketDiagnosticEnum>,
    /// The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="final")]
    
    pub final_: Option<bool>,
    /// The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880
    
    pub length: Option<u32>,
    /// The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="minEchoRxIntervalMs")]
    
    pub min_echo_rx_interval_ms: Option<u32>,
    /// The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="minRxIntervalMs")]
    
    pub min_rx_interval_ms: Option<u32>,
    /// The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="minTxIntervalMs")]
    
    pub min_tx_interval_ms: Option<u32>,
    /// The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880
    
    pub multiplier: Option<u32>,
    /// The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880
    
    pub multipoint: Option<bool>,
    /// The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="myDiscriminator")]
    
    pub my_discriminator: Option<u32>,
    /// The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880
    
    pub poll: Option<bool>,
    /// The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
    
    pub state: Option<BfdPacketStateEnum>,
    /// The version number of the BFD protocol, as specified in section 4.1 of RFC5880.
    
    pub version: Option<u32>,
    /// The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
    #[serde(rename="yourDiscriminator")]
    
    pub your_discriminator: Option<u32>,
}

impl client::Part for BfdPacket {}


/// Next free: 15
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BfdStatus {
    /// The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
    #[serde(rename="bfdSessionInitializationMode")]
    
    pub bfd_session_initialization_mode: Option<BfdStatuBfdSessionInitializationModeEnum>,
    /// Unix timestamp of the most recent config update.
    #[serde(rename="configUpdateTimestampMicros")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub config_update_timestamp_micros: Option<i64>,
    /// Control packet counts for the current BFD session.
    #[serde(rename="controlPacketCounts")]
    
    pub control_packet_counts: Option<BfdStatusPacketCounts>,
    /// Inter-packet time interval statistics for control packets.
    #[serde(rename="controlPacketIntervals")]
    
    pub control_packet_intervals: Option<Vec<PacketIntervals>>,
    /// The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
    #[serde(rename="localDiagnostic")]
    
    pub local_diagnostic: Option<BfdStatuLocalDiagnosticEnum>,
    /// The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
    #[serde(rename="localState")]
    
    pub local_state: Option<BfdStatuLocalStateEnum>,
    /// Negotiated transmit interval for control packets.
    #[serde(rename="negotiatedLocalControlTxIntervalMs")]
    
    pub negotiated_local_control_tx_interval_ms: Option<u32>,
    /// The most recent Rx control packet for this BFD session.
    #[serde(rename="rxPacket")]
    
    pub rx_packet: Option<BfdPacket>,
    /// The most recent Tx control packet for this BFD session.
    #[serde(rename="txPacket")]
    
    pub tx_packet: Option<BfdPacket>,
    /// Session uptime in milliseconds. Value will be 0 if session is not up.
    #[serde(rename="uptimeMs")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub uptime_ms: Option<i64>,
}

impl client::Part for BfdStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BfdStatusPacketCounts {
    /// Number of packets received since the beginning of the current BFD session.
    #[serde(rename="numRx")]
    
    pub num_rx: Option<u32>,
    /// Number of packets received that were rejected because of errors since the beginning of the current BFD session.
    #[serde(rename="numRxRejected")]
    
    pub num_rx_rejected: Option<u32>,
    /// Number of packets received that were successfully processed since the beginning of the current BFD session.
    #[serde(rename="numRxSuccessful")]
    
    pub num_rx_successful: Option<u32>,
    /// Number of packets transmitted since the beginning of the current BFD session.
    #[serde(rename="numTx")]
    
    pub num_tx: Option<u32>,
}

impl client::Part for BfdStatusPacketCounts {}


/// Associates `members`, or principals, with a `role`.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Binding {
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="bindingId")]
    
    pub binding_id: Option<String>,
    /// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
    
    pub condition: Option<Expr>,
    /// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
    
    pub members: Option<Vec<String>>,
    /// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    
    pub role: Option<String>,
}

impl client::Part for Binding {}


/// A transient resource used in compute.instances.bulkInsert and compute.regionInstances.bulkInsert . This resource is not persisted anywhere, it is used only for processing the requests.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [bulk insert instances](InstanceBulkInsertCall) (request)
/// * [bulk insert region instances](RegionInstanceBulkInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BulkInsertInstanceResource {
    /// The maximum number of instances to create.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub count: Option<i64>,
    /// The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided.
    #[serde(rename="instanceProperties")]
    
    pub instance_properties: Option<InstanceProperties>,
    /// Policy for chosing target zone. For more information, see Create VMs in bulk .
    #[serde(rename="locationPolicy")]
    
    pub location_policy: Option<LocationPolicy>,
    /// The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted.
    #[serde(rename="minCount")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub min_count: Option<i64>,
    /// The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters.
    #[serde(rename="namePattern")]
    
    pub name_pattern: Option<String>,
    /// Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
    #[serde(rename="perInstanceProperties")]
    
    pub per_instance_properties: Option<HashMap<String, BulkInsertInstanceResourcePerInstanceProperties>>,
    /// Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional.
    #[serde(rename="sourceInstanceTemplate")]
    
    pub source_instance_template: Option<String>,
}

impl client::RequestValue for BulkInsertInstanceResource {}


/// Per-instance properties to be set on individual instances. To be extended in the future.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BulkInsertInstanceResourcePerInstanceProperties {
    /// This field is only temporary. It will be removed. Do not use it.
    
    pub name: Option<String>,
}

impl client::Part for BulkInsertInstanceResourcePerInstanceProperties {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [invalidate cache url maps](UrlMapInvalidateCacheCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CacheInvalidationRule {
    /// If set, this invalidation rule will only apply to requests with a Host header matching host.
    
    pub host: Option<String>,
    /// no description provided
    
    pub path: Option<String>,
}

impl client::RequestValue for CacheInvalidationRule {}


/// Message containing what to include in the cache key for a request for Cloud CDN.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CacheKeyPolicy {
    /// If true, requests to different hosts will be cached separately.
    #[serde(rename="includeHost")]
    
    pub include_host: Option<bool>,
    /// Allows HTTP request headers (by name) to be used in the cache key.
    #[serde(rename="includeHttpHeaders")]
    
    pub include_http_headers: Option<Vec<String>>,
    /// Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
    #[serde(rename="includeNamedCookies")]
    
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(rename="includeProtocol")]
    
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
    #[serde(rename="includeQueryString")]
    
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
    #[serde(rename="queryStringBlacklist")]
    
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
    #[serde(rename="queryStringWhitelist")]
    
    pub query_string_whitelist: Option<Vec<String>>,
}

impl client::Part for CacheKeyPolicy {}


/// Settings controlling the volume of requests, connections and retries to this backend service.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CircuitBreakers {
    /// The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="maxConnections")]
    
    pub max_connections: Option<i32>,
    /// The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="maxPendingRequests")]
    
    pub max_pending_requests: Option<i32>,
    /// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
    #[serde(rename="maxRequests")]
    
    pub max_requests: Option<i32>,
    /// Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="maxRequestsPerConnection")]
    
    pub max_requests_per_connection: Option<i32>,
    /// The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="maxRetries")]
    
    pub max_retries: Option<i32>,
}

impl client::Part for CircuitBreakers {}


/// Represents a regional Commitment resource. Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region commitments](RegionCommitmentGetCall) (response)
/// * [insert region commitments](RegionCommitmentInsertCall) (request)
/// * [update region commitments](RegionCommitmentUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Commitment {
    /// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment.
    #[serde(rename="autoRenew")]
    
    pub auto_renew: Option<bool>,
    /// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
    
    pub category: Option<CommitmentCategoryEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] Commitment end time in RFC3339 text format.
    #[serde(rename="endTimestamp")]
    
    pub end_timestamp: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#commitment for commitments.
    
    pub kind: Option<String>,
    /// The license specification required as part of a license commitment.
    #[serde(rename="licenseResource")]
    
    pub license_resource: Option<LicenseResourceCommitment>,
    /// List of source commitments to be merged into a new commitment.
    #[serde(rename="mergeSourceCommitments")]
    
    pub merge_source_commitments: Option<Vec<String>>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
    
    pub plan: Option<CommitmentPlanEnum>,
    /// [Output Only] URL of the region where this commitment may be used.
    
    pub region: Option<String>,
    /// List of reservations in this commitment.
    
    pub reservations: Option<Vec<Reservation>>,
    /// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together.
    
    pub resources: Option<Vec<ResourceCommitment>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Source commitment to be splitted into a new commitment.
    #[serde(rename="splitSourceCommitment")]
    
    pub split_source_commitment: Option<String>,
    /// [Output Only] Commitment start time in RFC3339 text format.
    #[serde(rename="startTimestamp")]
    
    pub start_timestamp: Option<String>,
    /// [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
    
    pub status: Option<CommitmentStatusEnum>,
    /// [Output Only] An optional, human-readable explanation of the status.
    #[serde(rename="statusMessage")]
    
    pub status_message: Option<String>,
    /// The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
    #[serde(rename="type")]
    
    pub type_: Option<CommitmentTypeEnum>,
}

impl client::RequestValue for Commitment {}
impl client::ResponseResult for Commitment {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list region commitments](RegionCommitmentAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of CommitmentsScopedList resources.
    
    pub items: Option<HashMap<String, CommitmentsScopedList>>,
    /// [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<CommitmentAggregatedListWarning>,
}

impl client::ResponseResult for CommitmentAggregatedList {}


/// Contains a list of Commitment resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region commitments](RegionCommitmentListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Commitment resources.
    
    pub items: Option<Vec<Commitment>>,
    /// [Output Only] Type of resource. Always compute#commitmentList for lists of commitments.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<CommitmentListWarning>,
}

impl client::ResponseResult for CommitmentList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentsScopedList {
    /// [Output Only] A list of commitments contained in this scope.
    
    pub commitments: Option<Vec<Commitment>>,
    /// [Output Only] Informational warning which replaces the list of commitments when the list is empty.
    
    pub warning: Option<CommitmentsScopedListWarning>,
}

impl client::Part for CommitmentsScopedList {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Condition {
    /// This is deprecated and has no effect. Do not use.
    
    pub iam: Option<ConditionIamEnum>,
    /// This is deprecated and has no effect. Do not use.
    
    pub op: Option<ConditionOpEnum>,
    /// This is deprecated and has no effect. Do not use.
    
    pub svc: Option<String>,
    /// This is deprecated and has no effect. Do not use.
    
    pub sys: Option<ConditionSysEnum>,
    /// This is deprecated and has no effect. Do not use.
    
    pub values: Option<Vec<String>>,
}

impl client::Part for Condition {}


/// A set of Confidential Instance options.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ConfidentialInstanceConfig {
    /// Defines whether the instance should have confidential compute enabled.
    #[serde(rename="enableConfidentialCompute")]
    
    pub enable_confidential_compute: Option<bool>,
}

impl client::Part for ConfidentialInstanceConfig {}


/// Message containing connection draining configuration.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ConnectionDraining {
    /// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
    #[serde(rename="drainingTimeoutSec")]
    
    pub draining_timeout_sec: Option<i32>,
}

impl client::Part for ConnectionDraining {}


/// This message defines settings for a consistent hash style load balancer.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ConsistentHashLoadBalancerSettings {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="httpCookie")]
    
    pub http_cookie: Option<ConsistentHashLoadBalancerSettingsHttpCookie>,
    /// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(rename="httpHeaderName")]
    
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
    #[serde(rename="minimumRingSize")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub minimum_ring_size: Option<i64>,
}

impl client::Part for ConsistentHashLoadBalancerSettings {}


/// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ConsistentHashLoadBalancerSettingsHttpCookie {
    /// Name of the cookie.
    
    pub name: Option<String>,
    /// Path to set for the cookie.
    
    pub path: Option<String>,
    /// Lifetime of the cookie.
    
    pub ttl: Option<Duration>,
}

impl client::Part for ConsistentHashLoadBalancerSettingsHttpCookie {}


/// The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CorsPolicy {
    /// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the Access-Control-Allow-Credentials header. Default is false.
    #[serde(rename="allowCredentials")]
    
    pub allow_credentials: Option<bool>,
    /// Specifies the content for the Access-Control-Allow-Headers header.
    #[serde(rename="allowHeaders")]
    
    pub allow_headers: Option<Vec<String>>,
    /// Specifies the content for the Access-Control-Allow-Methods header.
    #[serde(rename="allowMethods")]
    
    pub allow_methods: Option<Vec<String>>,
    /// Specifies a regular expression that matches allowed origins. For more information about the regular expression syntax, see Syntax. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
    #[serde(rename="allowOriginRegexes")]
    
    pub allow_origin_regexes: Option<Vec<String>>,
    /// Specifies the list of origins that is allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    #[serde(rename="allowOrigins")]
    
    pub allow_origins: Option<Vec<String>>,
    /// If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
    
    pub disabled: Option<bool>,
    /// Specifies the content for the Access-Control-Expose-Headers header.
    #[serde(rename="exposeHeaders")]
    
    pub expose_headers: Option<Vec<String>>,
    /// Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header.
    #[serde(rename="maxAge")]
    
    pub max_age: Option<i32>,
}

impl client::Part for CorsPolicy {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CustomerEncryptionKey {
    /// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key 
    #[serde(rename="kmsKeyName")]
    
    pub kms_key_name: Option<String>,
    /// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount": "name@project_id.iam.gserviceaccount.com/ 
    #[serde(rename="kmsKeyServiceAccount")]
    
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=" 
    #[serde(rename="rawKey")]
    
    pub raw_key: Option<String>,
    /// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem 
    #[serde(rename="rsaEncryptedKey")]
    
    pub rsa_encrypted_key: Option<String>,
    /// [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
    
    pub sha256: Option<String>,
}

impl client::Part for CustomerEncryptionKey {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CustomerEncryptionKeyProtectedDisk {
    /// Decrypts data associated with the disk with a customer-supplied encryption key.
    #[serde(rename="diskEncryptionKey")]
    
    pub disk_encryption_key: Option<CustomerEncryptionKey>,
    /// Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks. For example: "source": "/compute/v1/projects/project_id/zones/zone/disks/ disk_name 
    
    pub source: Option<String>,
}

impl client::Part for CustomerEncryptionKeyProtectedDisk {}


/// Deprecation status for a public resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [deprecate images](ImageDeprecateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DeprecationStatus {
    /// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
    
    pub deleted: Option<String>,
    /// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
    
    pub deprecated: Option<String>,
    /// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
    
    pub obsolete: Option<String>,
    /// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
    
    pub replacement: Option<String>,
    /// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
    
    pub state: Option<DeprecationStatuStateEnum>,
}

impl client::RequestValue for DeprecationStatus {}


/// Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](https://cloud.google.com/compute/docs/reference/rest/v1/disks) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add resource policies disks](DiskAddResourcePolicyCall) (none)
/// * [aggregated list disks](DiskAggregatedListCall) (none)
/// * [create snapshot disks](DiskCreateSnapshotCall) (none)
/// * [delete disks](DiskDeleteCall) (none)
/// * [get disks](DiskGetCall) (response)
/// * [get iam policy disks](DiskGetIamPolicyCall) (none)
/// * [insert disks](DiskInsertCall) (request)
/// * [list disks](DiskListCall) (none)
/// * [remove resource policies disks](DiskRemoveResourcePolicyCall) (none)
/// * [resize disks](DiskResizeCall) (none)
/// * [set iam policy disks](DiskSetIamPolicyCall) (none)
/// * [set labels disks](DiskSetLabelCall) (none)
/// * [test iam permissions disks](DiskTestIamPermissionCall) (none)
/// * [get region disks](RegionDiskGetCall) (response)
/// * [insert region disks](RegionDiskInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Disk {
    /// The architecture of the disk. Valid values are ARM64 or X86_64.
    
    pub architecture: Option<DiskArchitectureEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Encrypts the disk using a customer-supplied encryption key or a customer-managed encryption key. Encryption keys do not protect access to metadata of the disk. After you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later. For example, to create a disk snapshot, to create a disk image, to create a machine image, or to attach the disk to a virtual machine. After you encrypt a disk with a customer-managed key, the diskEncryptionKey.kmsKeyName is set to a key *version* name once the disk is created. The disk is encrypted with this version of the key. In the response, diskEncryptionKey.kmsKeyName appears in the following format: "diskEncryptionKey.kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeysVersions/version If you do not provide an encryption key when creating the disk, then the disk is encrypted using an automatically generated key and you don't need to provide a key to use the disk later.
    #[serde(rename="diskEncryptionKey")]
    
    pub disk_encryption_key: Option<CustomerEncryptionKey>,
    /// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    #[serde(rename="guestOsFeatures")]
    
    pub guest_os_features: Option<Vec<GuestOsFeature>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#disk for disks.
    
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels to apply to this disk. These can be later modified by the setLabels method.
    
    pub labels: Option<HashMap<String, String>>,
    /// [Output Only] Last attach timestamp in RFC3339 text format.
    #[serde(rename="lastAttachTimestamp")]
    
    pub last_attach_timestamp: Option<String>,
    /// [Output Only] Last detach timestamp in RFC3339 text format.
    #[serde(rename="lastDetachTimestamp")]
    
    pub last_detach_timestamp: Option<String>,
    /// Integer license codes indicating which licenses are attached to this disk.
    #[serde(rename="licenseCodes")]
    
    #[serde_as(as = "Option<Vec<::client::serde_with::DisplayFromStr>>")]
    pub license_codes: Option<Vec<i64>>,
    /// A list of publicly visible licenses. Reserved for Google's use.
    
    pub licenses: Option<Vec<String>>,
    /// An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API.
    #[serde(rename="locationHint")]
    
    pub location_hint: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Internal use only.
    
    pub options: Option<String>,
    /// Input only. [Input Only] Additional params passed with the request, but not persisted as part of resource payload.
    
    pub params: Option<DiskParams>,
    /// Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.
    #[serde(rename="physicalBlockSizeBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub physical_block_size_bytes: Option<i64>,
    /// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
    #[serde(rename="provisionedIops")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub provisioned_iops: Option<i64>,
    /// [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
    #[serde(rename="replicaZones")]
    
    pub replica_zones: Option<Vec<String>>,
    /// Resource policies applied to this disk for automatic snapshot creations.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined fully-qualified URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are 1 to 65536, inclusive.
    #[serde(rename="sizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub size_gb: Option<i64>,
    /// The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk 
    #[serde(rename="sourceDisk")]
    
    pub source_disk: Option<String>,
    /// [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used.
    #[serde(rename="sourceDiskId")]
    
    pub source_disk_id: Option<String>,
    /// The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family 
    #[serde(rename="sourceImage")]
    
    pub source_image: Option<String>,
    /// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
    #[serde(rename="sourceImageEncryptionKey")]
    
    pub source_image_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.
    #[serde(rename="sourceImageId")]
    
    pub source_image_id: Option<String>,
    /// The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot 
    #[serde(rename="sourceSnapshot")]
    
    pub source_snapshot: Option<String>,
    /// The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
    #[serde(rename="sourceSnapshotEncryptionKey")]
    
    pub source_snapshot_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.
    #[serde(rename="sourceSnapshotId")]
    
    pub source_snapshot_id: Option<String>,
    /// The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead.
    #[serde(rename="sourceStorageObject")]
    
    pub source_storage_object: Option<String>,
    /// [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting. 
    
    pub status: Option<DiskStatusEnum>,
    /// URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types.
    #[serde(rename="type")]
    
    pub type_: Option<String>,
    /// [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance
    
    pub users: Option<Vec<String>>,
    /// [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub zone: Option<String>,
}

impl client::RequestValue for Disk {}
impl client::Resource for Disk {}
impl client::ResponseResult for Disk {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list disks](DiskAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of DisksScopedList resources.
    
    pub items: Option<HashMap<String, DisksScopedList>>,
    /// [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<DiskAggregatedListWarning>,
}

impl client::ResponseResult for DiskAggregatedList {}


/// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskInstantiationConfig {
    /// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
    #[serde(rename="autoDelete")]
    
    pub auto_delete: Option<bool>,
    /// The custom source image to be used to restore this disk when instantiating this instance template.
    #[serde(rename="customImage")]
    
    pub custom_image: Option<String>,
    /// Specifies the device name of the disk to which the configurations apply to.
    #[serde(rename="deviceName")]
    
    pub device_name: Option<String>,
    /// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks. 
    #[serde(rename="instantiateFrom")]
    
    pub instantiate_from: Option<DiskInstantiationConfigInstantiateFromEnum>,
}

impl client::Part for DiskInstantiationConfig {}


/// A list of Disk resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list disks](DiskListCall) (response)
/// * [list region disks](RegionDiskListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Disk resources.
    
    pub items: Option<Vec<Disk>>,
    /// [Output Only] Type of resource. Always compute#diskList for lists of disks.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<DiskListWarning>,
}

impl client::ResponseResult for DiskList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [move disk projects](ProjectMoveDiskCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskMoveRequest {
    /// The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone 
    #[serde(rename="destinationZone")]
    
    pub destination_zone: Option<String>,
    /// The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
    #[serde(rename="targetDisk")]
    
    pub target_disk: Option<String>,
}

impl client::RequestValue for DiskMoveRequest {}


/// Additional disk params.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskParams {
    /// Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
    #[serde(rename="resourceManagerTags")]
    
    pub resource_manager_tags: Option<HashMap<String, String>>,
}

impl client::Part for DiskParams {}


/// Represents a Disk Type resource. Google Compute Engine has two Disk Type resources: * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionDiskTypes) * [Zonal](https://cloud.google.com/compute/docs/reference/rest/v1/diskTypes) You can choose from a variety of disk types based on your needs. For more information, read Storage options. The diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks. The regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list disk types](DiskTypeAggregatedListCall) (none)
/// * [get disk types](DiskTypeGetCall) (response)
/// * [list disk types](DiskTypeListCall) (none)
/// * [get region disk types](RegionDiskTypeGetCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskType {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] Server-defined default disk size in GB.
    #[serde(rename="defaultDiskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub default_disk_size_gb: Option<i64>,
    /// [Output Only] The deprecation status associated with this disk type.
    
    pub deprecated: Option<DeprecationStatus>,
    /// [Output Only] An optional description of this resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#diskType for disk types.
    
    pub kind: Option<String>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] An optional textual description of the valid disk size, such as "10GB-10TB".
    #[serde(rename="validDiskSize")]
    
    pub valid_disk_size: Option<String>,
    /// [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub zone: Option<String>,
}

impl client::Resource for DiskType {}
impl client::ResponseResult for DiskType {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list disk types](DiskTypeAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypeAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of DiskTypesScopedList resources.
    
    pub items: Option<HashMap<String, DiskTypesScopedList>>,
    /// [Output Only] Type of resource. Always compute#diskTypeAggregatedList.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<DiskTypeAggregatedListWarning>,
}

impl client::ResponseResult for DiskTypeAggregatedList {}


/// Contains a list of disk types.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list disk types](DiskTypeListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypeList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of DiskType resources.
    
    pub items: Option<Vec<DiskType>>,
    /// [Output Only] Type of resource. Always compute#diskTypeList for disk types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<DiskTypeListWarning>,
}

impl client::ResponseResult for DiskTypeList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypesScopedList {
    /// [Output Only] A list of disk types contained in this scope.
    #[serde(rename="diskTypes")]
    
    pub disk_types: Option<Vec<DiskType>>,
    /// [Output Only] Informational warning which replaces the list of disk types when the list is empty.
    
    pub warning: Option<DiskTypesScopedListWarning>,
}

impl client::Part for DiskTypesScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add resource policies disks](DiskAddResourcePolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisksAddResourcePoliciesRequest {
    /// Full or relative path to the resource policy to be added to this disk. You can only specify one resource policy.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
}

impl client::RequestValue for DisksAddResourcePoliciesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove resource policies disks](DiskRemoveResourcePolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisksRemoveResourcePoliciesRequest {
    /// Resource policies to be removed from this disk.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
}

impl client::RequestValue for DisksRemoveResourcePoliciesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [resize disks](DiskResizeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisksResizeRequest {
    /// The new size of the persistent disk, which is specified in GB.
    #[serde(rename="sizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub size_gb: Option<i64>,
}

impl client::RequestValue for DisksResizeRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisksScopedList {
    /// [Output Only] A list of disks contained in this scope.
    
    pub disks: Option<Vec<Disk>>,
    /// [Output Only] Informational warning which replaces the list of disks when the list is empty.
    
    pub warning: Option<DisksScopedListWarning>,
}

impl client::Part for DisksScopedList {}


/// A set of Display Device options
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [update display device instances](InstanceUpdateDisplayDeviceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisplayDevice {
    /// Defines whether the instance has Display enabled.
    #[serde(rename="enableDisplay")]
    
    pub enable_display: Option<bool>,
}

impl client::RequestValue for DisplayDevice {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DistributionPolicy {
    /// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
    #[serde(rename="targetShape")]
    
    pub target_shape: Option<DistributionPolicyTargetShapeEnum>,
    /// Zones where the regional managed instance group will create and manage its instances.
    
    pub zones: Option<Vec<DistributionPolicyZoneConfiguration>>,
}

impl client::Part for DistributionPolicy {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DistributionPolicyZoneConfiguration {
    /// The URL of the zone. The zone must exist in the region where the managed instance group is located.
    
    pub zone: Option<String>,
}

impl client::Part for DistributionPolicyZoneConfiguration {}


/// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Duration {
    /// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
    
    pub nanos: Option<i32>,
    /// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub seconds: Option<i64>,
}

impl client::Part for Duration {}


/// Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } }
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ErrorInfo {
    /// The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis.com".
    
    pub domain: Option<String>,
    /// Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the client exceeds the number of instances that can be created in a single (batch) request.
    
    pub metadatas: Option<HashMap<String, String>>,
    /// The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE.
    
    pub reason: Option<String>,
}

impl client::Part for ErrorInfo {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExchangedPeeringRoute {
    /// The destination range of the route.
    #[serde(rename="destRange")]
    
    pub dest_range: Option<String>,
    /// True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict.
    
    pub imported: Option<bool>,
    /// The region of peering route next hop, only applies to dynamic routes.
    #[serde(rename="nextHopRegion")]
    
    pub next_hop_region: Option<String>,
    /// The priority of the peering route.
    
    pub priority: Option<u32>,
    /// The type of the peering route.
    #[serde(rename="type")]
    
    pub type_: Option<ExchangedPeeringRouteTypeEnum>,
}

impl client::Part for ExchangedPeeringRoute {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list peering routes networks](NetworkListPeeringRouteCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExchangedPeeringRoutesList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ExchangedPeeringRoute resources.
    
    pub items: Option<Vec<ExchangedPeeringRoute>>,
    /// [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ExchangedPeeringRoutesListWarning>,
}

impl client::ResponseResult for ExchangedPeeringRoutesList {}


/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Expr {
    /// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    
    pub expression: Option<String>,
    /// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
    
    pub location: Option<String>,
    /// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    
    pub title: Option<String>,
}

impl client::Part for Expr {}


/// Represents an external VPN gateway. External VPN gateway is the on-premises VPN gateway(s) or another cloud provider’s VPN gateway that connects to your Google Cloud VPN gateway. To create a highly available VPN from Google Cloud Platform to your VPN gateway or another cloud provider’s VPN gateway, you must create a external VPN gateway resource with information about the other gateway. For more information about using external VPN gateways, see Creating an HA VPN gateway and tunnel pair to a peer VPN.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete external vpn gateways](ExternalVpnGatewayDeleteCall) (none)
/// * [get external vpn gateways](ExternalVpnGatewayGetCall) (response)
/// * [insert external vpn gateways](ExternalVpnGatewayInsertCall) (request)
/// * [list external vpn gateways](ExternalVpnGatewayListCall) (none)
/// * [set labels external vpn gateways](ExternalVpnGatewaySetLabelCall) (none)
/// * [test iam permissions external vpn gateways](ExternalVpnGatewayTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExternalVpnGateway {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// A list of interfaces for this external VPN gateway. If your peer-side gateway is an on-premises gateway and non-AWS cloud providers' gateway, at most two interfaces can be provided for an external VPN gateway. If your peer side is an AWS virtual private gateway, four interfaces should be provided for an external VPN gateway.
    
    pub interfaces: Option<Vec<ExternalVpnGatewayInterface>>,
    /// [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways.
    
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
    
    pub labels: Option<HashMap<String, String>>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Indicates the user-supplied redundancy type of this external VPN gateway.
    #[serde(rename="redundancyType")]
    
    pub redundancy_type: Option<ExternalVpnGatewayRedundancyTypeEnum>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::RequestValue for ExternalVpnGateway {}
impl client::Resource for ExternalVpnGateway {}
impl client::ResponseResult for ExternalVpnGateway {}


/// The interface for the external VPN gateway.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExternalVpnGatewayInterface {
    /// The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3 
    
    pub id: Option<u32>,
    /// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
}

impl client::Part for ExternalVpnGatewayInterface {}


/// Response to the list request, and contains a list of externalVpnGateways.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list external vpn gateways](ExternalVpnGatewayListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExternalVpnGatewayList {
    /// no description provided
    
    pub etag: Option<String>,
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ExternalVpnGateway resources.
    
    pub items: Option<Vec<ExternalVpnGateway>>,
    /// [Output Only] Type of resource. Always compute#externalVpnGatewayList for lists of externalVpnGateways.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ExternalVpnGatewayListWarning>,
}

impl client::ResponseResult for ExternalVpnGatewayList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FileContentBuffer {
    /// The raw content in the secure keys file.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub content: Option<Vec<u8>>,
    /// The file type of source file.
    #[serde(rename="fileType")]
    
    pub file_type: Option<FileContentBufferFileTypeEnum>,
}

impl client::Part for FileContentBuffer {}


/// Represents a Firewall Rule resource. Firewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete firewalls](FirewallDeleteCall) (none)
/// * [get firewalls](FirewallGetCall) (response)
/// * [insert firewalls](FirewallInsertCall) (request)
/// * [list firewalls](FirewallListCall) (none)
/// * [patch firewalls](FirewallPatchCall) (request)
/// * [update firewalls](FirewallUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Firewall {
    /// The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection.
    
    pub allowed: Option<Vec<FirewallAllowed>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection.
    
    pub denied: Option<Vec<FirewallDenied>>,
    /// An optional description of this resource. Provide this field when you create the resource.
    
    pub description: Option<String>,
    /// If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Both IPv4 and IPv6 are supported.
    #[serde(rename="destinationRanges")]
    
    pub destination_ranges: Option<Vec<String>>,
    /// Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `EGRESS` traffic, you cannot specify the sourceTags fields.
    
    pub direction: Option<FirewallDirectionEnum>,
    /// Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled.
    
    pub disabled: Option<bool>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#firewall for firewall rules.
    
    pub kind: Option<String>,
    /// This field denotes the logging options for a particular firewall rule. If logging is enabled, logs will be exported to Cloud Logging.
    #[serde(rename="logConfig")]
    
    pub log_config: Option<FirewallLogConfig>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    
    pub name: Option<String>,
    /// URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network - projects/myproject/global/networks/my-network - global/networks/default 
    
    pub network: Option<String>,
    /// Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than `65535`.
    
    pub priority: Option<i32>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Both IPv4 and IPv6 are supported.
    #[serde(rename="sourceRanges")]
    
    pub source_ranges: Option<Vec<String>>,
    /// If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags.
    #[serde(rename="sourceServiceAccounts")]
    
    pub source_service_accounts: Option<Vec<String>>,
    /// If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the firewall to apply.
    #[serde(rename="sourceTags")]
    
    pub source_tags: Option<Vec<String>>,
    /// A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.
    #[serde(rename="targetServiceAccounts")]
    
    pub target_service_accounts: Option<Vec<String>>,
    /// A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network.
    #[serde(rename="targetTags")]
    
    pub target_tags: Option<Vec<String>>,
}

impl client::RequestValue for Firewall {}
impl client::Resource for Firewall {}
impl client::ResponseResult for Firewall {}


/// Contains a list of firewalls.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list firewalls](FirewallListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Firewall resources.
    
    pub items: Option<Vec<Firewall>>,
    /// [Output Only] Type of resource. Always compute#firewallList for lists of firewalls.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<FirewallListWarning>,
}

impl client::ResponseResult for FirewallList {}


/// The available logging options for a firewall rule.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallLogConfig {
    /// This field denotes whether to enable logging for a particular firewall rule.
    
    pub enable: Option<bool>,
    /// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
    
    pub metadata: Option<FirewallLogConfigMetadataEnum>,
}

impl client::Part for FirewallLogConfig {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list associations firewall policies](FirewallPolicyListAssociationCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPoliciesListAssociationsResponse {
    /// A list of associations.
    
    pub associations: Option<Vec<FirewallPolicyAssociation>>,
    /// [Output Only] Type of firewallPolicy associations. Always compute#FirewallPoliciesListAssociations for lists of firewallPolicy associations.
    
    pub kind: Option<String>,
}

impl client::ResponseResult for FirewallPoliciesListAssociationsResponse {}


/// Represents a Firewall Policy resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get firewall policies](FirewallPolicyGetCall) (response)
/// * [insert firewall policies](FirewallPolicyInsertCall) (request)
/// * [patch firewall policies](FirewallPolicyPatchCall) (request)
/// * [get network firewall policies](NetworkFirewallPolicyGetCall) (response)
/// * [insert network firewall policies](NetworkFirewallPolicyInsertCall) (request)
/// * [patch network firewall policies](NetworkFirewallPolicyPatchCall) (request)
/// * [get region network firewall policies](RegionNetworkFirewallPolicyGetCall) (response)
/// * [insert region network firewall policies](RegionNetworkFirewallPolicyInsertCall) (request)
/// * [patch region network firewall policies](RegionNetworkFirewallPolicyPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicy {
    /// A list of associations that belong to this firewall policy.
    
    pub associations: Option<Vec<FirewallPolicyAssociation>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Deprecated, please use short name instead. User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename="displayName")]
    
    pub display_name: Option<String>,
    /// Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the firewall policy.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output only] Type of the resource. Always compute#firewallPolicyfor firewall policies
    
    pub kind: Option<String>,
    /// Name of the resource. For Organization Firewall Policies it's a [Output Only] numeric ID allocated by Google Cloud which uniquely identifies the Organization Firewall Policy.
    
    pub name: Option<String>,
    /// [Output Only] The parent of the firewall policy. This field is not applicable to network firewall policies.
    
    pub parent: Option<String>,
    /// [Output Only] URL of the region where the regional firewall policy resides. This field is not applicable to global firewall policies. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
    #[serde(rename="ruleTupleCount")]
    
    pub rule_tuple_count: Option<i32>,
    /// A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a firewall policy, a default rule with action "allow" will be added.
    
    pub rules: Option<Vec<FirewallPolicyRule>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Server-defined URL for this resource with the resource id.
    #[serde(rename="selfLinkWithId")]
    
    pub self_link_with_id: Option<String>,
    /// User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename="shortName")]
    
    pub short_name: Option<String>,
}

impl client::RequestValue for FirewallPolicy {}
impl client::ResponseResult for FirewallPolicy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add association firewall policies](FirewallPolicyAddAssociationCall) (request)
/// * [get association firewall policies](FirewallPolicyGetAssociationCall) (response)
/// * [add association network firewall policies](NetworkFirewallPolicyAddAssociationCall) (request)
/// * [get association network firewall policies](NetworkFirewallPolicyGetAssociationCall) (response)
/// * [add association region network firewall policies](RegionNetworkFirewallPolicyAddAssociationCall) (request)
/// * [get association region network firewall policies](RegionNetworkFirewallPolicyGetAssociationCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyAssociation {
    /// The target that the firewall policy is attached to.
    #[serde(rename="attachmentTarget")]
    
    pub attachment_target: Option<String>,
    /// [Output Only] Deprecated, please use short name instead. The display name of the firewall policy of the association.
    #[serde(rename="displayName")]
    
    pub display_name: Option<String>,
    /// [Output Only] The firewall policy ID of the association.
    #[serde(rename="firewallPolicyId")]
    
    pub firewall_policy_id: Option<String>,
    /// The name for an association.
    
    pub name: Option<String>,
    /// [Output Only] The short name of the firewall policy of the association.
    #[serde(rename="shortName")]
    
    pub short_name: Option<String>,
}

impl client::RequestValue for FirewallPolicyAssociation {}
impl client::ResponseResult for FirewallPolicyAssociation {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list firewall policies](FirewallPolicyListCall) (response)
/// * [list network firewall policies](NetworkFirewallPolicyListCall) (response)
/// * [list region network firewall policies](RegionNetworkFirewallPolicyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of FirewallPolicy resources.
    
    pub items: Option<Vec<FirewallPolicy>>,
    /// [Output Only] Type of resource. Always compute#firewallPolicyList for listsof FirewallPolicies
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<FirewallPolicyListWarning>,
}

impl client::ResponseResult for FirewallPolicyList {}


/// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add rule firewall policies](FirewallPolicyAddRuleCall) (request)
/// * [get rule firewall policies](FirewallPolicyGetRuleCall) (response)
/// * [patch rule firewall policies](FirewallPolicyPatchRuleCall) (request)
/// * [add rule network firewall policies](NetworkFirewallPolicyAddRuleCall) (request)
/// * [get rule network firewall policies](NetworkFirewallPolicyGetRuleCall) (response)
/// * [patch rule network firewall policies](NetworkFirewallPolicyPatchRuleCall) (request)
/// * [add rule region network firewall policies](RegionNetworkFirewallPolicyAddRuleCall) (request)
/// * [get rule region network firewall policies](RegionNetworkFirewallPolicyGetRuleCall) (response)
/// * [patch rule region network firewall policies](RegionNetworkFirewallPolicyPatchRuleCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyRule {
    /// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "goto_next".
    
    pub action: Option<String>,
    /// An optional description for this resource.
    
    pub description: Option<String>,
    /// The direction in which this rule applies.
    
    pub direction: Option<FirewallPolicyRuleDirectionEnum>,
    /// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
    
    pub disabled: Option<bool>,
    /// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
    #[serde(rename="enableLogging")]
    
    pub enable_logging: Option<bool>,
    /// [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
    
    pub kind: Option<String>,
    /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
    #[serde(rename="match")]
    
    pub match_: Option<FirewallPolicyRuleMatcher>,
    /// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
    
    pub priority: Option<i32>,
    /// An optional name for the rule. This field is not a unique identifier and can be updated.
    #[serde(rename="ruleName")]
    
    pub rule_name: Option<String>,
    /// [Output Only] Calculation of the complexity of a single firewall policy rule.
    #[serde(rename="ruleTupleCount")]
    
    pub rule_tuple_count: Option<i32>,
    /// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
    #[serde(rename="targetResources")]
    
    pub target_resources: Option<Vec<String>>,
    /// A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
    #[serde(rename="targetSecureTags")]
    
    pub target_secure_tags: Option<Vec<FirewallPolicyRuleSecureTag>>,
    /// A list of service accounts indicating the sets of instances that are applied with this rule.
    #[serde(rename="targetServiceAccounts")]
    
    pub target_service_accounts: Option<Vec<String>>,
}

impl client::RequestValue for FirewallPolicyRule {}
impl client::ResponseResult for FirewallPolicyRule {}


/// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyRuleMatcher {
    /// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
    #[serde(rename="destIpRanges")]
    
    pub dest_ip_ranges: Option<Vec<String>>,
    /// Pairs of IP protocols and ports that the rule should match.
    #[serde(rename="layer4Configs")]
    
    pub layer4_configs: Option<Vec<FirewallPolicyRuleMatcherLayer4Config>>,
    /// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
    #[serde(rename="srcIpRanges")]
    
    pub src_ip_ranges: Option<Vec<String>>,
    /// List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
    #[serde(rename="srcSecureTags")]
    
    pub src_secure_tags: Option<Vec<FirewallPolicyRuleSecureTag>>,
}

impl client::Part for FirewallPolicyRuleMatcher {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyRuleMatcherLayer4Config {
    /// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
    #[serde(rename="ipProtocol")]
    
    pub ip_protocol: Option<String>,
    /// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
    
    pub ports: Option<Vec<String>>,
}

impl client::Part for FirewallPolicyRuleMatcherLayer4Config {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyRuleSecureTag {
    /// Name of the secure tag, created with TagManager's TagValue API.
    
    pub name: Option<String>,
    /// [Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted.
    
    pub state: Option<FirewallPolicyRuleSecureTagStateEnum>,
}

impl client::Part for FirewallPolicyRuleSecureTag {}


/// Encapsulates numeric value that can be either absolute or relative.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FixedOrPercent {
    /// [Output Only] Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded. 
    
    pub calculated: Option<i32>,
    /// Specifies a fixed number of VM instances. This must be a positive integer.
    
    pub fixed: Option<i32>,
    /// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
    
    pub percent: Option<i32>,
}

impl client::Part for FixedOrPercent {}


/// Represents a Forwarding Rule resource. Forwarding rule resources in Google Cloud can be either regional or global in scope: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/globalForwardingRules) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/forwardingRules) A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud Platform load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway). For more information, read Forwarding rule concepts and Using protocol forwarding.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list forwarding rules](ForwardingRuleAggregatedListCall) (none)
/// * [delete forwarding rules](ForwardingRuleDeleteCall) (none)
/// * [get forwarding rules](ForwardingRuleGetCall) (response)
/// * [insert forwarding rules](ForwardingRuleInsertCall) (request)
/// * [list forwarding rules](ForwardingRuleListCall) (none)
/// * [patch forwarding rules](ForwardingRulePatchCall) (request)
/// * [set labels forwarding rules](ForwardingRuleSetLabelCall) (none)
/// * [set target forwarding rules](ForwardingRuleSetTargetCall) (none)
/// * [get global forwarding rules](GlobalForwardingRuleGetCall) (response)
/// * [insert global forwarding rules](GlobalForwardingRuleInsertCall) (request)
/// * [patch global forwarding rules](GlobalForwardingRulePatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRule {
    /// IP address for which this forwarding rule accepts traffic. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the referenced target or backendService. While creating a forwarding rule, specifying an IPAddress is required under the following circumstances: - When the target is set to targetGrpcProxy and validateForProxyless is set to true, the IPAddress should be set to 0.0.0.0. - When the target is a Private Service Connect Google APIs bundle, you must specify an IPAddress. Otherwise, you can optionally specify an IP address that references an existing static (reserved) IP address resource. When omitted, Google Cloud assigns an ephemeral IP address. Use one of the following formats to specify an IP address while creating a forwarding rule: * IP address number, as in `100.1.2.3` * IPv6 address range, as in `2600:1234::/96` * Full resource URL, as in https://www.googleapis.com/compute/v1/projects/ project_id/regions/region/addresses/address-name * Partial URL or by name, as in: - projects/project_id/regions/region/addresses/address-name - regions/region/addresses/address-name - global/addresses/address-name - address-name The forwarding rule's target or backendService, and in most cases, also the loadBalancingScheme, determine the type of IP address that you can use. For detailed information, see [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). When reading an IPAddress, the API always returns the IP address number.
    #[serde(rename="IPAddress")]
    
    pub ip_address: Option<String>,
    /// The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
    #[serde(rename="IPProtocol")]
    
    pub ip_protocol: Option<ForwardingRuleIPProtocolEnum>,
    /// This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By internal TCP/UDP load balancers, backend service-based network load balancers, and internal and external protocol forwarding. Set this field to true to allow packets addressed to any port or packets lacking destination port information (for example, UDP fragments after the first fragment) to be forwarded to the backends configured with this forwarding rule. The ports, port_range, and allPorts fields are mutually exclusive.
    #[serde(rename="allPorts")]
    
    pub all_ports: Option<bool>,
    /// This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If the field is set to TRUE, clients can access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer.
    #[serde(rename="allowGlobalAccess")]
    
    pub allow_global_access: Option<bool>,
    /// Identifies the backend service to which the forwarding rule sends traffic. Required for Internal TCP/UDP Load Balancing and Network Load Balancing; must be omitted for all other load balancer types.
    #[serde(rename="backendService")]
    
    pub backend_service: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6.
    #[serde(rename="ipVersion")]
    
    pub ip_version: Option<ForwardingRuleIpVersionEnum>,
    /// Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL.
    #[serde(rename="isMirroringCollector")]
    
    pub is_mirroring_collector: Option<bool>,
    /// [Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources.
    
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
    
    pub labels: Option<HashMap<String, String>>,
    /// Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts.
    #[serde(rename="loadBalancingScheme")]
    
    pub load_balancing_scheme: Option<ForwardingRuleLoadBalancingSchemeEnum>,
    /// Opaque filter criteria used by load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to load balancer, xDS clients present node metadata. When there is a match, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. TargetHttpProxy, UrlMap) referenced by the ForwardingRule are not visible to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applifed before those specified in the UrlMap that this ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
    #[serde(rename="metadataFilters")]
    
    pub metadata_filters: Option<Vec<MetadataFilter>>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For Private Service Connect forwarding rules that forward traffic to Google APIs, the forwarding rule name must be a 1-20 characters string with lowercase letters and numbers and must start with a letter.
    
    pub name: Option<String>,
    /// This field is not used for external load balancing. For Internal TCP/UDP Load Balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used. For Private Service Connect forwarding rules that forward traffic to Google APIs, a network must be provided.
    
    pub network: Option<String>,
    /// This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
    #[serde(rename="networkTier")]
    
    pub network_tier: Option<ForwardingRuleNetworkTierEnum>,
    /// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
    #[serde(rename="noAutomateDnsZone")]
    
    pub no_automate_dns_zone: Option<bool>,
    /// This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By backend service-based network load balancers, target pool-based network load balancers, internal proxy load balancers, external proxy load balancers, Traffic Director, external protocol forwarding, and Classic VPN. Some products have restrictions on what ports can be used. See port specifications for details. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The ports, port_range, and allPorts fields are mutually exclusive. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. @pattern: \\d+(?:-\\d+)?
    #[serde(rename="portRange")]
    
    pub port_range: Option<String>,
    /// This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By internal TCP/UDP load balancers, backend service-based network load balancers, and internal protocol forwarding. You can specify a list of up to five ports by number, separated by commas. The ports can be contiguous or discontiguous. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot share any values defined in ports. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot share any values defined in ports. The ports, port_range, and allPorts fields are mutually exclusive. @pattern: \\d+(?:-\\d+)?
    
    pub ports: Option<Vec<String>>,
    /// [Output Only] The PSC connection id of the PSC Forwarding Rule.
    #[serde(rename="pscConnectionId")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub psc_connection_id: Option<u64>,
    /// no description provided
    #[serde(rename="pscConnectionStatus")]
    
    pub psc_connection_status: Option<ForwardingRulePscConnectionStatusEnum>,
    /// [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Service Directory resources to register this forwarding rule with. Currently, only supports a single Service Directory resource.
    #[serde(rename="serviceDirectoryRegistrations")]
    
    pub service_directory_registrations: Option<Vec<ForwardingRuleServiceDirectoryRegistration>>,
    /// An optional prefix to the service name for this Forwarding Rule. If specified, the prefix is the first label of the fully qualified service name. The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. This field is only used for internal load balancing.
    #[serde(rename="serviceLabel")]
    
    pub service_label: Option<String>,
    /// [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal load balancing.
    #[serde(rename="serviceName")]
    
    pub service_name: Option<String>,
    /// This field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule, used in internal load balancing and network load balancing with IPv6. If the network specified is in auto subnet mode, this field is optional. However, a subnetwork must be specified if the network is in custom subnet mode or when creating external forwarding rule with IPv6.
    
    pub subnetwork: Option<String>,
    /// The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must be in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. - For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). - For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle: - vpc-sc - APIs that support VPC Service Controls. - all-apis - All supported Google APIs. - For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment. 
    
    pub target: Option<String>,
}

impl client::RequestValue for ForwardingRule {}
impl client::Resource for ForwardingRule {}
impl client::ResponseResult for ForwardingRule {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list forwarding rules](ForwardingRuleAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ForwardingRulesScopedList resources.
    
    pub items: Option<HashMap<String, ForwardingRulesScopedList>>,
    /// [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ForwardingRuleAggregatedListWarning>,
}

impl client::ResponseResult for ForwardingRuleAggregatedList {}


/// Contains a list of ForwardingRule resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list forwarding rules](ForwardingRuleListCall) (response)
/// * [list global forwarding rules](GlobalForwardingRuleListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ForwardingRule resources.
    
    pub items: Option<Vec<ForwardingRule>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ForwardingRuleListWarning>,
}

impl client::ResponseResult for ForwardingRuleList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleReference {
    /// no description provided
    #[serde(rename="forwardingRule")]
    
    pub forwarding_rule: Option<String>,
}

impl client::Part for ForwardingRuleReference {}


/// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleServiceDirectoryRegistration {
    /// Service Directory namespace to register the forwarding rule under.
    
    pub namespace: Option<String>,
    /// Service Directory service to register the forwarding rule under.
    
    pub service: Option<String>,
    /// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
    #[serde(rename="serviceDirectoryRegion")]
    
    pub service_directory_region: Option<String>,
}

impl client::Part for ForwardingRuleServiceDirectoryRegistration {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRulesScopedList {
    /// A list of forwarding rules contained in this scope.
    #[serde(rename="forwardingRules")]
    
    pub forwarding_rules: Option<Vec<ForwardingRule>>,
    /// Informational warning which replaces the list of forwarding rules when the list is empty.
    
    pub warning: Option<ForwardingRulesScopedListWarning>,
}

impl client::Part for ForwardingRulesScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GRPCHealthCheck {
    /// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
    #[serde(rename="grpcServiceName")]
    
    pub grpc_service_name: Option<String>,
    /// The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535.
    
    pub port: Option<i32>,
    /// Not supported.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    #[serde(rename="portSpecification")]
    
    pub port_specification: Option<GRPCHealthCheckPortSpecificationEnum>,
}

impl client::Part for GRPCHealthCheck {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [attach network endpoints global network endpoint groups](GlobalNetworkEndpointGroupAttachNetworkEndpointCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GlobalNetworkEndpointGroupsAttachEndpointsRequest {
    /// The list of network endpoints to be attached.
    #[serde(rename="networkEndpoints")]
    
    pub network_endpoints: Option<Vec<NetworkEndpoint>>,
}

impl client::RequestValue for GlobalNetworkEndpointGroupsAttachEndpointsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [detach network endpoints global network endpoint groups](GlobalNetworkEndpointGroupDetachNetworkEndpointCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GlobalNetworkEndpointGroupsDetachEndpointsRequest {
    /// The list of network endpoints to be detached.
    #[serde(rename="networkEndpoints")]
    
    pub network_endpoints: Option<Vec<NetworkEndpoint>>,
}

impl client::RequestValue for GlobalNetworkEndpointGroupsDetachEndpointsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set iam policy firewall policies](FirewallPolicySetIamPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GlobalOrganizationSetPolicyRequest {
    /// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
    
    pub bindings: Option<Vec<Binding>>,
    /// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub etag: Option<Vec<u8>>,
    /// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    
    pub policy: Option<Policy>,
}

impl client::RequestValue for GlobalOrganizationSetPolicyRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set labels external vpn gateways](ExternalVpnGatewaySetLabelCall) (request)
/// * [set labels global addresses](GlobalAddressSetLabelCall) (request)
/// * [set labels global forwarding rules](GlobalForwardingRuleSetLabelCall) (request)
/// * [set labels images](ImageSetLabelCall) (request)
/// * [set labels interconnects](InterconnectSetLabelCall) (request)
/// * [set labels security policies](SecurityPolicySetLabelCall) (request)
/// * [set labels snapshots](SnapshotSetLabelCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GlobalSetLabelsRequest {
    /// The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// A list of labels to apply for this resource. Each label must comply with the requirements for labels. For example, "webserver-frontend": "images". A label value can also be empty (e.g. "my-label": "").
    
    pub labels: Option<HashMap<String, String>>,
}

impl client::RequestValue for GlobalSetLabelsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set iam policy backend services](BackendServiceSetIamPolicyCall) (request)
/// * [set iam policy images](ImageSetIamPolicyCall) (request)
/// * [set iam policy instance templates](InstanceTemplateSetIamPolicyCall) (request)
/// * [set iam policy licenses](LicenseSetIamPolicyCall) (request)
/// * [set iam policy machine images](MachineImageSetIamPolicyCall) (request)
/// * [set iam policy network firewall policies](NetworkFirewallPolicySetIamPolicyCall) (request)
/// * [set iam policy snapshots](SnapshotSetIamPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GlobalSetPolicyRequest {
    /// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
    
    pub bindings: Option<Vec<Binding>>,
    /// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub etag: Option<Vec<u8>>,
    /// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    
    pub policy: Option<Policy>,
}

impl client::RequestValue for GlobalSetPolicyRequest {}


/// A guest attributes entry.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get guest attributes instances](InstanceGetGuestAttributeCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GuestAttributes {
    /// [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry.
    
    pub kind: Option<String>,
    /// The path to be queried. This can be the default namespace ('') or a nested namespace ('\/') or a specified key ('\/\').
    #[serde(rename="queryPath")]
    
    pub query_path: Option<String>,
    /// [Output Only] The value of the requested queried path.
    #[serde(rename="queryValue")]
    
    pub query_value: Option<GuestAttributesValue>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The key to search for.
    #[serde(rename="variableKey")]
    
    pub variable_key: Option<String>,
    /// [Output Only] The value found for the requested key.
    #[serde(rename="variableValue")]
    
    pub variable_value: Option<String>,
}

impl client::ResponseResult for GuestAttributes {}


/// A guest attributes namespace/key/value entry.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GuestAttributesEntry {
    /// Key for the guest attribute entry.
    
    pub key: Option<String>,
    /// Namespace for the guest attribute entry.
    
    pub namespace: Option<String>,
    /// Value for the guest attribute entry.
    
    pub value: Option<String>,
}

impl client::Part for GuestAttributesEntry {}


/// Array of guest attribute namespace/key/value tuples.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GuestAttributesValue {
    /// no description provided
    
    pub items: Option<Vec<GuestAttributesEntry>>,
}

impl client::Part for GuestAttributesValue {}


/// Guest OS features.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GuestOsFeature {
    /// The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS - MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_SNP_CAPABLE For more information, see Enabling guest operating system features.
    #[serde(rename="type")]
    
    pub type_: Option<GuestOsFeatureTypeEnum>,
}

impl client::Part for GuestOsFeature {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HTTP2HealthCheck {
    /// The value of the host header in the HTTP/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
    
    pub host: Option<String>,
    /// The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
    
    pub port: Option<i32>,
    /// Not supported.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    #[serde(rename="portSpecification")]
    
    pub port_specification: Option<HTTP2HealthCheckPortSpecificationEnum>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<HTTP2HealthCheckProxyHeaderEnum>,
    /// The request path of the HTTP/2 health check request. The default value is /.
    #[serde(rename="requestPath")]
    
    pub request_path: Option<String>,
    /// Creates a content-based HTTP/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
    
    pub response: Option<String>,
}

impl client::Part for HTTP2HealthCheck {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HTTPHealthCheck {
    /// The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
    
    pub host: Option<String>,
    /// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
    
    pub port: Option<i32>,
    /// Not supported.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    #[serde(rename="portSpecification")]
    
    pub port_specification: Option<HTTPHealthCheckPortSpecificationEnum>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<HTTPHealthCheckProxyHeaderEnum>,
    /// The request path of the HTTP health check request. The default value is /.
    #[serde(rename="requestPath")]
    
    pub request_path: Option<String>,
    /// Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
    
    pub response: Option<String>,
}

impl client::Part for HTTPHealthCheck {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HTTPSHealthCheck {
    /// The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
    
    pub host: Option<String>,
    /// The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
    
    pub port: Option<i32>,
    /// Not supported.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    #[serde(rename="portSpecification")]
    
    pub port_specification: Option<HTTPSHealthCheckPortSpecificationEnum>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<HTTPSHealthCheckProxyHeaderEnum>,
    /// The request path of the HTTPS health check request. The default value is /.
    #[serde(rename="requestPath")]
    
    pub request_path: Option<String>,
    /// Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
    
    pub response: Option<String>,
}

impl client::Part for HTTPSHealthCheck {}


/// Represents a Health Check resource. Google Compute Engine has two Health Check resources: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionHealthChecks) Internal HTTP(S) load balancers must use regional health checks (`compute.v1.regionHealthChecks`). Traffic Director must use global health checks (`compute.v1.HealthChecks`). Internal TCP/UDP load balancers can use either regional or global health checks (`compute.v1.regionHealthChecks` or `compute.v1.HealthChecks`). External HTTP(S), TCP proxy, and SSL proxy load balancers as well as managed instance group auto-healing must use global health checks (`compute.v1.HealthChecks`). Backend service-based network load balancers must use regional health checks (`compute.v1.regionHealthChecks`). Target pool-based network load balancers must use legacy HTTP health checks (`compute.v1.httpHealthChecks`). For more information, see Health checks overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list health checks](HealthCheckAggregatedListCall) (none)
/// * [delete health checks](HealthCheckDeleteCall) (none)
/// * [get health checks](HealthCheckGetCall) (response)
/// * [insert health checks](HealthCheckInsertCall) (request)
/// * [list health checks](HealthCheckListCall) (none)
/// * [patch health checks](HealthCheckPatchCall) (request)
/// * [update health checks](HealthCheckUpdateCall) (request)
/// * [get region health checks](RegionHealthCheckGetCall) (response)
/// * [insert region health checks](RegionHealthCheckInsertCall) (request)
/// * [patch region health checks](RegionHealthCheckPatchCall) (request)
/// * [update region health checks](RegionHealthCheckUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheck {
    /// How often (in seconds) to send a health check. The default value is 5 seconds.
    #[serde(rename="checkIntervalSec")]
    
    pub check_interval_sec: Option<i32>,
    /// [Output Only] Creation timestamp in 3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// no description provided
    #[serde(rename="grpcHealthCheck")]
    
    pub grpc_health_check: Option<GRPCHealthCheck>,
    /// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
    #[serde(rename="healthyThreshold")]
    
    pub healthy_threshold: Option<i32>,
    /// no description provided
    #[serde(rename="http2HealthCheck")]
    
    pub http2_health_check: Option<HTTP2HealthCheck>,
    /// no description provided
    #[serde(rename="httpHealthCheck")]
    
    pub http_health_check: Option<HTTPHealthCheck>,
    /// no description provided
    #[serde(rename="httpsHealthCheck")]
    
    pub https_health_check: Option<HTTPSHealthCheck>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// Type of the resource.
    
    pub kind: Option<String>,
    /// Configure logging on this health check.
    #[serde(rename="logConfig")]
    
    pub log_config: Option<HealthCheckLogConfig>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn’t a dash.
    
    pub name: Option<String>,
    /// [Output Only] Region where the health check resides. Not applicable to global health checks.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// no description provided
    #[serde(rename="sslHealthCheck")]
    
    pub ssl_health_check: Option<SSLHealthCheck>,
    /// no description provided
    #[serde(rename="tcpHealthCheck")]
    
    pub tcp_health_check: Option<TCPHealthCheck>,
    /// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
    #[serde(rename="timeoutSec")]
    
    pub timeout_sec: Option<i32>,
    /// Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
    #[serde(rename="type")]
    
    pub type_: Option<HealthCheckTypeEnum>,
    /// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
    #[serde(rename="unhealthyThreshold")]
    
    pub unhealthy_threshold: Option<i32>,
}

impl client::RequestValue for HealthCheck {}
impl client::Resource for HealthCheck {}
impl client::ResponseResult for HealthCheck {}


/// Contains a list of HealthCheck resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list health checks](HealthCheckListCall) (response)
/// * [list region health checks](RegionHealthCheckListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of HealthCheck resources.
    
    pub items: Option<Vec<HealthCheck>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<HealthCheckListWarning>,
}

impl client::ResponseResult for HealthCheckList {}


/// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckLogConfig {
    /// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
    
    pub enable: Option<bool>,
}

impl client::Part for HealthCheckLogConfig {}


/// A full or valid partial URL to a health check. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check - projects/project-id/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckReference {
    /// no description provided
    #[serde(rename="healthCheck")]
    
    pub health_check: Option<String>,
}

impl client::Part for HealthCheckReference {}


/// Represents a Health-Check as a Service resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region health check services](RegionHealthCheckServiceGetCall) (response)
/// * [insert region health check services](RegionHealthCheckServiceInsertCall) (request)
/// * [patch region health check services](RegionHealthCheckServicePatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckService {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10 for regional HealthCheckService, and not more than 1 for global HealthCheckService. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NetworkEndpointGroups. For global HealthCheckService using global INTERNET_IP_PORT NetworkEndpointGroups, the global HealthChecks must specify sourceRegions, and HealthChecks that specify sourceRegions can only be used with global INTERNET_IP_PORT NetworkEndpointGroups.
    #[serde(rename="healthChecks")]
    
    pub health_checks: Option<Vec<String>>,
    /// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService.
    #[serde(rename="healthStatusAggregationPolicy")]
    
    pub health_status_aggregation_policy: Option<HealthCheckServiceHealthStatusAggregationPolicyEnum>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
    
    pub kind: Option<String>,
    /// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService. For global HealthCheckServices, the NetworkEndpointGroups must be global INTERNET_IP_PORT.
    #[serde(rename="networkEndpointGroups")]
    
    pub network_endpoint_groups: Option<Vec<String>>,
    /// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
    #[serde(rename="notificationEndpoints")]
    
    pub notification_endpoints: Option<Vec<String>>,
    /// [Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::RequestValue for HealthCheckService {}
impl client::ResponseResult for HealthCheckService {}


/// A full or valid partial URL to a health check service. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project-id/regions/us-west1/healthCheckServices/health-check-service - projects/project-id/regions/us-west1/healthCheckServices/health-check-service - regions/us-west1/healthCheckServices/health-check-service 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckServiceReference {
    /// no description provided
    #[serde(rename="healthCheckService")]
    
    pub health_check_service: Option<String>,
}

impl client::Part for HealthCheckServiceReference {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region health check services](RegionHealthCheckServiceListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckServicesList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of HealthCheckService resources.
    
    pub items: Option<Vec<HealthCheckService>>,
    /// [Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<HealthCheckServicesListWarning>,
}

impl client::ResponseResult for HealthCheckServicesList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list health checks](HealthCheckAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthChecksAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of HealthChecksScopedList resources.
    
    pub items: Option<HashMap<String, HealthChecksScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<HealthChecksAggregatedListWarning>,
}

impl client::ResponseResult for HealthChecksAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthChecksScopedList {
    /// A list of HealthChecks contained in this scope.
    #[serde(rename="healthChecks")]
    
    pub health_checks: Option<Vec<HealthCheck>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<HealthChecksScopedListWarning>,
}

impl client::Part for HealthChecksScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthStatus {
    /// Metadata defined as annotations for network endpoint.
    
    pub annotations: Option<HashMap<String, String>>,
    /// URL of the forwarding rule associated with the health status of the instance.
    #[serde(rename="forwardingRule")]
    
    pub forwarding_rule: Option<String>,
    /// A forwarding rule IP address assigned to this instance.
    #[serde(rename="forwardingRuleIp")]
    
    pub forwarding_rule_ip: Option<String>,
    /// Health state of the instance.
    #[serde(rename="healthState")]
    
    pub health_state: Option<HealthStatuHealthStateEnum>,
    /// URL of the instance resource.
    
    pub instance: Option<String>,
    /// For target pool based Network Load Balancing, it indicates the forwarding rule's IP address assigned to this instance. For other types of load balancing, the field indicates VM internal ip.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
    /// The named port of the instance group, not necessarily the port that is health-checked.
    
    pub port: Option<i32>,
    /// no description provided
    
    pub weight: Option<String>,
    /// no description provided
    #[serde(rename="weightError")]
    
    pub weight_error: Option<HealthStatuWeightErrorEnum>,
}

impl client::Part for HealthStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthStatusForNetworkEndpoint {
    /// URL of the backend service associated with the health state of the network endpoint.
    #[serde(rename="backendService")]
    
    pub backend_service: Option<BackendServiceReference>,
    /// URL of the forwarding rule associated with the health state of the network endpoint.
    #[serde(rename="forwardingRule")]
    
    pub forwarding_rule: Option<ForwardingRuleReference>,
    /// URL of the health check associated with the health state of the network endpoint.
    #[serde(rename="healthCheck")]
    
    pub health_check: Option<HealthCheckReference>,
    /// URL of the health check service associated with the health state of the network endpoint.
    #[serde(rename="healthCheckService")]
    
    pub health_check_service: Option<HealthCheckServiceReference>,
    /// Health state of the network endpoint determined based on the health checks configured.
    #[serde(rename="healthState")]
    
    pub health_state: Option<HealthStatusForNetworkEndpointHealthStateEnum>,
}

impl client::Part for HealthStatusForNetworkEndpoint {}


/// Provides links to documentation or for performing an out of band action. For example, if a quota check failed with an error indicating the calling project hasn't enabled the accessed service, this can contain a URL pointing directly to the right place in the developer console to flip the bit.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Help {
    /// URL(s) pointing to additional information on handling the current error.
    
    pub links: Option<Vec<HelpLink>>,
}

impl client::Part for Help {}


/// Describes a URL link.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HelpLink {
    /// Describes what the link offers.
    
    pub description: Option<String>,
    /// The URL of the link.
    
    pub url: Option<String>,
}

impl client::Part for HelpLink {}


/// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HostRule {
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character, and if followed by anything, the immediate following character must be either - or .. * based matching is not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    
    pub hosts: Option<Vec<String>>,
    /// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
    #[serde(rename="pathMatcher")]
    
    pub path_matcher: Option<String>,
}

impl client::Part for HostRule {}


/// Specification for how requests are aborted as part of fault injection.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpFaultAbort {
    /// The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
    #[serde(rename="httpStatus")]
    
    pub http_status: Option<u32>,
    /// The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
    
    pub percentage: Option<f64>,
}

impl client::Part for HttpFaultAbort {}


/// Specifies the delay introduced by the load balancer before forwarding the request to the backend service as part of fault injection.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpFaultDelay {
    /// Specifies the value of the fixed delay interval.
    #[serde(rename="fixedDelay")]
    
    pub fixed_delay: Option<Duration>,
    /// The percentage of traffic for connections, operations, or requests for which a delay is introduced as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
    
    pub percentage: Option<f64>,
}

impl client::Part for HttpFaultDelay {}


/// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpFaultInjection {
    /// The specification for how client requests are aborted as part of fault injection.
    
    pub abort: Option<HttpFaultAbort>,
    /// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
    
    pub delay: Option<HttpFaultDelay>,
}

impl client::Part for HttpFaultInjection {}


/// The request and response header transformations that take effect before the request is passed along to the selected backendService.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHeaderAction {
    /// Headers to add to a matching request before forwarding the request to the backendService.
    #[serde(rename="requestHeadersToAdd")]
    
    pub request_headers_to_add: Option<Vec<HttpHeaderOption>>,
    /// A list of header names for headers that need to be removed from the request before forwarding the request to the backendService.
    #[serde(rename="requestHeadersToRemove")]
    
    pub request_headers_to_remove: Option<Vec<String>>,
    /// Headers to add the response before sending the response back to the client.
    #[serde(rename="responseHeadersToAdd")]
    
    pub response_headers_to_add: Option<Vec<HttpHeaderOption>>,
    /// A list of header names for headers that need to be removed from the response before sending the response back to the client.
    #[serde(rename="responseHeadersToRemove")]
    
    pub response_headers_to_remove: Option<Vec<String>>,
}

impl client::Part for HttpHeaderAction {}


/// matchRule criteria for request header matches.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHeaderMatch {
    /// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    #[serde(rename="exactMatch")]
    
    pub exact_match: Option<String>,
    /// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin`.
    #[serde(rename="headerName")]
    
    pub header_name: Option<String>,
    /// If set to false, the headerMatch is considered a match if the preceding match criteria are met. If set to true, the headerMatch is considered a match if the preceding match criteria are NOT met. The default setting is false. 
    #[serde(rename="invertMatch")]
    
    pub invert_match: Option<bool>,
    /// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    #[serde(rename="prefixMatch")]
    
    pub prefix_match: Option<String>,
    /// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    #[serde(rename="presentMatch")]
    
    pub present_match: Option<bool>,
    /// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. rangeMatch is not supported for load balancers that have loadBalancingScheme set to EXTERNAL.
    #[serde(rename="rangeMatch")]
    
    pub range_match: Option<Int64RangeMatch>,
    /// The value of the header must match the regular expression specified in regexMatch. For more information about regular expression syntax, see Syntax. For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
    #[serde(rename="regexMatch")]
    
    pub regex_match: Option<String>,
    /// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    #[serde(rename="suffixMatch")]
    
    pub suffix_match: Option<String>,
}

impl client::Part for HttpHeaderMatch {}


/// Specification determining how headers are added to requests or responses.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHeaderOption {
    /// The name of the header.
    #[serde(rename="headerName")]
    
    pub header_name: Option<String>,
    /// The value of the header to add.
    #[serde(rename="headerValue")]
    
    pub header_value: Option<String>,
    /// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false. 
    
    pub replace: Option<bool>,
}

impl client::Part for HttpHeaderOption {}


/// Represents a legacy HTTP Health Check resource. Legacy HTTP health checks are now only required by target pool-based network load balancers. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview .
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete http health checks](HttpHealthCheckDeleteCall) (none)
/// * [get http health checks](HttpHealthCheckGetCall) (response)
/// * [insert http health checks](HttpHealthCheckInsertCall) (request)
/// * [list http health checks](HttpHealthCheckListCall) (none)
/// * [patch http health checks](HttpHealthCheckPatchCall) (request)
/// * [update http health checks](HttpHealthCheckUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHealthCheck {
    /// How often (in seconds) to send a health check. The default value is 5 seconds.
    #[serde(rename="checkIntervalSec")]
    
    pub check_interval_sec: Option<i32>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
    #[serde(rename="healthyThreshold")]
    
    pub healthy_threshold: Option<i32>,
    /// The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
    
    pub host: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The TCP port number for the HTTP health check request. The default value is 80.
    
    pub port: Option<i32>,
    /// The request path of the HTTP health check request. The default value is /. This field does not support query parameters.
    #[serde(rename="requestPath")]
    
    pub request_path: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
    #[serde(rename="timeoutSec")]
    
    pub timeout_sec: Option<i32>,
    /// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
    #[serde(rename="unhealthyThreshold")]
    
    pub unhealthy_threshold: Option<i32>,
}

impl client::RequestValue for HttpHealthCheck {}
impl client::Resource for HttpHealthCheck {}
impl client::ResponseResult for HttpHealthCheck {}


/// Contains a list of HttpHealthCheck resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list http health checks](HttpHealthCheckListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHealthCheckList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of HttpHealthCheck resources.
    
    pub items: Option<Vec<HttpHealthCheck>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<HttpHealthCheckListWarning>,
}

impl client::ResponseResult for HttpHealthCheckList {}


/// HttpRouteRuleMatch criteria for a request's query parameter.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpQueryParameterMatch {
    /// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch, or regexMatch must be set. 
    #[serde(rename="exactMatch")]
    
    pub exact_match: Option<String>,
    /// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
    
    pub name: Option<String>,
    /// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch, or regexMatch must be set. 
    #[serde(rename="presentMatch")]
    
    pub present_match: Option<bool>,
    /// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For more information about regular expression syntax, see Syntax. Only one of presentMatch, exactMatch, or regexMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. 
    #[serde(rename="regexMatch")]
    
    pub regex_match: Option<String>,
}

impl client::Part for HttpQueryParameterMatch {}


/// Specifies settings for an HTTP redirect.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpRedirectAction {
    /// The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
    #[serde(rename="hostRedirect")]
    
    pub host_redirect: Option<String>,
    /// If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
    #[serde(rename="httpsRedirect")]
    
    pub https_redirect: Option<bool>,
    /// The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
    #[serde(rename="pathRedirect")]
    
    pub path_redirect: Option<String>,
    /// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
    #[serde(rename="prefixRedirect")]
    
    pub prefix_redirect: Option<String>,
    /// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. 
    #[serde(rename="redirectResponseCode")]
    
    pub redirect_response_code: Option<HttpRedirectActionRedirectResponseCodeEnum>,
    /// If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false. 
    #[serde(rename="stripQuery")]
    
    pub strip_query: Option<bool>,
}

impl client::Part for HttpRedirectAction {}


/// The retry policy associates with HttpRouteRule
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpRetryPolicy {
    /// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
    #[serde(rename="numRetries")]
    
    pub num_retries: Option<u32>,
    /// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in the HttpRouteAction field. If timeout in the HttpRouteAction field is not set, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    #[serde(rename="perTryTimeout")]
    
    pub per_try_timeout: Option<Duration>,
    /// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: retry is attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all. For example, disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - connect-failure: a retry is attempted on failures connecting to the instance or endpoint. For example, connection timeouts. - retriable-4xx: a retry is attempted if the instance or endpoint responds with a 4xx response code. The only error that you can retry is error code 409. - refused-stream: a retry is attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: a retry is attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: a retry is attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: a retry is attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: a retry is attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: a retry is attempted if the gRPC status code in the response header is set to unavailable. Only the following codes are supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true. - cancelled - deadline-exceeded - internal - resource-exhausted - unavailable 
    #[serde(rename="retryConditions")]
    
    pub retry_conditions: Option<Vec<String>>,
}

impl client::Part for HttpRetryPolicy {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpRouteAction {
    /// The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="corsPolicy")]
    
    pub cors_policy: Option<CorsPolicy>,
    /// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests. timeout and retry_policy is ignored by clients that are configured with a fault_injection_policy if: 1. The traffic is generated by fault injection AND 2. The fault injection is not a delay fault injection. Fault injection is not supported with the global external HTTP(S) load balancer (classic). To see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
    #[serde(rename="faultInjectionPolicy")]
    
    pub fault_injection_policy: Option<HttpFaultInjection>,
    /// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (known as *end-of-stream*), the duration in this field is computed from the beginning of the stream until the response has been processed, including all retries. A stream that does not complete in this duration is closed. If not specified, this field uses the maximum maxStreamDuration value among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
    #[serde(rename="maxStreamDuration")]
    
    pub max_stream_duration: Option<Duration>,
    /// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    #[serde(rename="requestMirrorPolicy")]
    
    pub request_mirror_policy: Option<RequestMirrorPolicy>,
    /// Specifies the retry policy associated with this route.
    #[serde(rename="retryPolicy")]
    
    pub retry_policy: Option<HttpRetryPolicy>,
    /// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as *end-of-stream*) up until the response has been processed. Timeout includes all retries. If not specified, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    
    pub timeout: Option<Duration>,
    /// The spec to modify the URL of the request, before forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    #[serde(rename="urlRewrite")]
    
    pub url_rewrite: Option<UrlRewrite>,
    /// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
    #[serde(rename="weightedBackendServices")]
    
    pub weighted_backend_services: Option<Vec<WeightedBackendService>>,
}

impl client::Part for HttpRouteAction {}


/// The HttpRouteRule setting specifies how to match an HTTP request and the corresponding routing action that load balancing proxies perform.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpRouteRule {
    /// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
    
    pub description: Option<String>,
    /// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction value specified here is applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="headerAction")]
    
    pub header_action: Option<HttpHeaderAction>,
    /// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
    #[serde(rename="matchRules")]
    
    pub match_rules: Option<Vec<HttpRouteRuleMatch>>,
    /// For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
    
    pub priority: Option<i32>,
    /// In response to a matching matchRule, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a route rule's routeAction.
    #[serde(rename="routeAction")]
    
    pub route_action: Option<HttpRouteAction>,
    /// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
    
    pub service: Option<String>,
    /// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="urlRedirect")]
    
    pub url_redirect: Option<HttpRedirectAction>,
}

impl client::Part for HttpRouteRule {}


/// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpRouteRuleMatch {
    /// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    #[serde(rename="fullPathMatch")]
    
    pub full_path_match: Option<String>,
    /// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
    #[serde(rename="headerMatches")]
    
    pub header_matches: Option<Vec<HttpHeaderMatch>>,
    /// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="ignoreCase")]
    
    pub ignore_case: Option<bool>,
    /// Opaque filter criteria used by the load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to the load balancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadata filters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here is applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to load balancers that have loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="metadataFilters")]
    
    pub metadata_filters: Option<Vec<MetadataFilter>>,
    /// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    #[serde(rename="prefixMatch")]
    
    pub prefix_match: Option<String>,
    /// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="queryParameterMatches")]
    
    pub query_parameter_matches: Option<Vec<HttpQueryParameterMatch>>,
    /// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For more information about regular expression syntax, see Syntax. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
    #[serde(rename="regexMatch")]
    
    pub regex_match: Option<String>,
}

impl client::Part for HttpRouteRuleMatch {}


/// Represents a legacy HTTPS Health Check resource. Legacy HTTPS health checks have been deprecated. If you are using a target pool-based network load balancer, you must use a legacy HTTP (not HTTPS) health check. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview .
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete https health checks](HttpsHealthCheckDeleteCall) (none)
/// * [get https health checks](HttpsHealthCheckGetCall) (response)
/// * [insert https health checks](HttpsHealthCheckInsertCall) (request)
/// * [list https health checks](HttpsHealthCheckListCall) (none)
/// * [patch https health checks](HttpsHealthCheckPatchCall) (request)
/// * [update https health checks](HttpsHealthCheckUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpsHealthCheck {
    /// How often (in seconds) to send a health check. The default value is 5 seconds.
    #[serde(rename="checkIntervalSec")]
    
    pub check_interval_sec: Option<i32>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
    #[serde(rename="healthyThreshold")]
    
    pub healthy_threshold: Option<i32>,
    /// The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
    
    pub host: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// Type of the resource.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The TCP port number for the HTTPS health check request. The default value is 443.
    
    pub port: Option<i32>,
    /// The request path of the HTTPS health check request. The default value is "/".
    #[serde(rename="requestPath")]
    
    pub request_path: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
    #[serde(rename="timeoutSec")]
    
    pub timeout_sec: Option<i32>,
    /// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
    #[serde(rename="unhealthyThreshold")]
    
    pub unhealthy_threshold: Option<i32>,
}

impl client::RequestValue for HttpsHealthCheck {}
impl client::Resource for HttpsHealthCheck {}
impl client::ResponseResult for HttpsHealthCheck {}


/// Contains a list of HttpsHealthCheck resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list https health checks](HttpsHealthCheckListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpsHealthCheckList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of HttpsHealthCheck resources.
    
    pub items: Option<Vec<HttpsHealthCheck>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<HttpsHealthCheckListWarning>,
}

impl client::ResponseResult for HttpsHealthCheckList {}


/// Represents an Image resource. You can use images to create boot disks for your VM instances. For more information, read Images.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete images](ImageDeleteCall) (none)
/// * [deprecate images](ImageDeprecateCall) (none)
/// * [get images](ImageGetCall) (response)
/// * [get from family images](ImageGetFromFamilyCall) (response)
/// * [get iam policy images](ImageGetIamPolicyCall) (none)
/// * [insert images](ImageInsertCall) (request)
/// * [list images](ImageListCall) (none)
/// * [patch images](ImagePatchCall) (request)
/// * [set iam policy images](ImageSetIamPolicyCall) (none)
/// * [set labels images](ImageSetLabelCall) (none)
/// * [test iam permissions images](ImageTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Image {
    /// The architecture of the image. Valid values are ARM64 or X86_64.
    
    pub architecture: Option<ImageArchitectureEnum>,
    /// Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
    #[serde(rename="archiveSizeBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub archive_size_bytes: Option<i64>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// The deprecation status associated with this image.
    
    pub deprecated: Option<DeprecationStatus>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Size of the image when restored onto a persistent disk (in GB).
    #[serde(rename="diskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub disk_size_gb: Option<i64>,
    /// The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.
    
    pub family: Option<String>,
    /// A list of features to enable on the guest operating system. Applicable only for bootable images. To see a list of available options, see the guestOSfeatures[].type parameter.
    #[serde(rename="guestOsFeatures")]
    
    pub guest_os_features: Option<Vec<GuestOsFeature>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// Encrypts the image using a customer-supplied encryption key. After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the image). Customer-supplied encryption keys do not protect access to metadata of the disk. If you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later.
    #[serde(rename="imageEncryptionKey")]
    
    pub image_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] Type of the resource. Always compute#image for images.
    
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an image.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels to apply to this image. These can be later modified by the setLabels method.
    
    pub labels: Option<HashMap<String, String>>,
    /// Integer license codes indicating which licenses are attached to this image.
    #[serde(rename="licenseCodes")]
    
    #[serde_as(as = "Option<Vec<::client::serde_with::DisplayFromStr>>")]
    pub license_codes: Option<Vec<i64>>,
    /// Any applicable license URI.
    
    pub licenses: Option<Vec<String>>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The parameters of the raw disk image.
    #[serde(rename="rawDisk")]
    
    pub raw_disk: Option<ImageRawDisk>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Set the secure boot keys of shielded instance.
    #[serde(rename="shieldedInstanceInitialState")]
    
    pub shielded_instance_initial_state: Option<InitialStateConfig>,
    /// URL of the source disk used to create this image. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL 
    #[serde(rename="sourceDisk")]
    
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    #[serde(rename="sourceDiskEncryptionKey")]
    
    pub source_disk_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name.
    #[serde(rename="sourceDiskId")]
    
    pub source_disk_id: Option<String>,
    /// URL of the source image used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ images/image_name - projects/project_id/global/images/image_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL 
    #[serde(rename="sourceImage")]
    
    pub source_image: Option<String>,
    /// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
    #[serde(rename="sourceImageEncryptionKey")]
    
    pub source_image_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name.
    #[serde(rename="sourceImageId")]
    
    pub source_image_id: Option<String>,
    /// URL of the source snapshot used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ snapshots/snapshot_name - projects/project_id/global/snapshots/snapshot_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL 
    #[serde(rename="sourceSnapshot")]
    
    pub source_snapshot: Option<String>,
    /// The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
    #[serde(rename="sourceSnapshotEncryptionKey")]
    
    pub source_snapshot_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name.
    #[serde(rename="sourceSnapshotId")]
    
    pub source_snapshot_id: Option<String>,
    /// The type of the image used to create this disk. The default and only valid value is RAW.
    #[serde(rename="sourceType")]
    
    pub source_type: Option<ImageSourceTypeEnum>,
    /// [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
    
    pub status: Option<ImageStatusEnum>,
    /// Cloud Storage bucket storage location of the image (regional or multi-regional).
    #[serde(rename="storageLocations")]
    
    pub storage_locations: Option<Vec<String>>,
}

impl client::RequestValue for Image {}
impl client::Resource for Image {}
impl client::ResponseResult for Image {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get image family views](ImageFamilyViewGetCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ImageFamilyView {
    /// The latest image that is part of the specified image family in the requested location, and that is not deprecated.
    
    pub image: Option<Image>,
}

impl client::Resource for ImageFamilyView {}
impl client::ResponseResult for ImageFamilyView {}


/// Contains a list of images.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list images](ImageListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ImageList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Image resources.
    
    pub items: Option<Vec<Image>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ImageListWarning>,
}

impl client::ResponseResult for ImageList {}


/// Initial State for shielded instance, these are public keys which are safe to store in public
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InitialStateConfig {
    /// The Key Database (db).
    
    pub dbs: Option<Vec<FileContentBuffer>>,
    /// The forbidden key database (dbx).
    
    pub dbxs: Option<Vec<FileContentBuffer>>,
    /// The Key Exchange Key (KEK).
    
    pub keks: Option<Vec<FileContentBuffer>>,
    /// The Platform Key (PK).
    
    pub pk: Option<FileContentBuffer>,
}

impl client::Part for InitialStateConfig {}


/// Represents an Instance resource. An instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add access config instances](InstanceAddAccessConfigCall) (none)
/// * [add resource policies instances](InstanceAddResourcePolicyCall) (none)
/// * [aggregated list instances](InstanceAggregatedListCall) (none)
/// * [attach disk instances](InstanceAttachDiskCall) (none)
/// * [bulk insert instances](InstanceBulkInsertCall) (none)
/// * [delete instances](InstanceDeleteCall) (none)
/// * [delete access config instances](InstanceDeleteAccessConfigCall) (none)
/// * [detach disk instances](InstanceDetachDiskCall) (none)
/// * [get instances](InstanceGetCall) (response)
/// * [get effective firewalls instances](InstanceGetEffectiveFirewallCall) (none)
/// * [get guest attributes instances](InstanceGetGuestAttributeCall) (none)
/// * [get iam policy instances](InstanceGetIamPolicyCall) (none)
/// * [get screenshot instances](InstanceGetScreenshotCall) (none)
/// * [get serial port output instances](InstanceGetSerialPortOutputCall) (none)
/// * [get shielded instance identity instances](InstanceGetShieldedInstanceIdentityCall) (none)
/// * [insert instances](InstanceInsertCall) (request)
/// * [list instances](InstanceListCall) (none)
/// * [list referrers instances](InstanceListReferrerCall) (none)
/// * [remove resource policies instances](InstanceRemoveResourcePolicyCall) (none)
/// * [reset instances](InstanceResetCall) (none)
/// * [resume instances](InstanceResumeCall) (none)
/// * [send diagnostic interrupt instances](InstanceSendDiagnosticInterruptCall) (none)
/// * [set deletion protection instances](InstanceSetDeletionProtectionCall) (none)
/// * [set disk auto delete instances](InstanceSetDiskAutoDeleteCall) (none)
/// * [set iam policy instances](InstanceSetIamPolicyCall) (none)
/// * [set labels instances](InstanceSetLabelCall) (none)
/// * [set machine resources instances](InstanceSetMachineResourceCall) (none)
/// * [set machine type instances](InstanceSetMachineTypeCall) (none)
/// * [set metadata instances](InstanceSetMetadataCall) (none)
/// * [set min cpu platform instances](InstanceSetMinCpuPlatformCall) (none)
/// * [set scheduling instances](InstanceSetSchedulingCall) (none)
/// * [set service account instances](InstanceSetServiceAccountCall) (none)
/// * [set shielded instance integrity policy instances](InstanceSetShieldedInstanceIntegrityPolicyCall) (none)
/// * [set tags instances](InstanceSetTagCall) (none)
/// * [simulate maintenance event instances](InstanceSimulateMaintenanceEventCall) (none)
/// * [start instances](InstanceStartCall) (none)
/// * [start with encryption key instances](InstanceStartWithEncryptionKeyCall) (none)
/// * [stop instances](InstanceStopCall) (none)
/// * [suspend instances](InstanceSuspendCall) (none)
/// * [test iam permissions instances](InstanceTestIamPermissionCall) (none)
/// * [update instances](InstanceUpdateCall) (request)
/// * [update access config instances](InstanceUpdateAccessConfigCall) (none)
/// * [update display device instances](InstanceUpdateDisplayDeviceCall) (none)
/// * [update network interface instances](InstanceUpdateNetworkInterfaceCall) (none)
/// * [update shielded instance config instances](InstanceUpdateShieldedInstanceConfigCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Instance {
    /// Controls for advanced machine-related behavior features.
    #[serde(rename="advancedMachineFeatures")]
    
    pub advanced_machine_features: Option<AdvancedMachineFeatures>,
    /// Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding .
    #[serde(rename="canIpForward")]
    
    pub can_ip_forward: Option<bool>,
    /// no description provided
    #[serde(rename="confidentialInstanceConfig")]
    
    pub confidential_instance_config: Option<ConfidentialInstanceConfig>,
    /// [Output Only] The CPU platform used by this instance.
    #[serde(rename="cpuPlatform")]
    
    pub cpu_platform: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// Whether the resource should be protected against deletion.
    #[serde(rename="deletionProtection")]
    
    pub deletion_protection: Option<bool>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Array of disks associated with this instance. Persistent disks must be created before you can assign them.
    
    pub disks: Option<Vec<AttachedDisk>>,
    /// Enables display device for the instance.
    #[serde(rename="displayDevice")]
    
    pub display_device: Option<DisplayDevice>,
    /// Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance. To see the latest fingerprint, make get() request to the instance.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// A list of the type and count of accelerator cards attached to the instance.
    #[serde(rename="guestAccelerators")]
    
    pub guest_accelerators: Option<Vec<AcceleratorConfig>>,
    /// Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS.
    
    pub hostname: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
    #[serde(rename="keyRevocationActionType")]
    
    pub key_revocation_action_type: Option<InstanceKeyRevocationActionTypeEnum>,
    /// [Output Only] Type of the resource. Always compute#instance for instances.
    
    pub kind: Option<String>,
    /// A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the instance.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels to apply to this instance. These can be later modified by the setLabels method.
    
    pub labels: Option<HashMap<String, String>>,
    /// [Output Only] Last start timestamp in RFC3339 text format.
    #[serde(rename="lastStartTimestamp")]
    
    pub last_start_timestamp: Option<String>,
    /// [Output Only] Last stop timestamp in RFC3339 text format.
    #[serde(rename="lastStopTimestamp")]
    
    pub last_stop_timestamp: Option<String>,
    /// [Output Only] Last suspended timestamp in RFC3339 text format.
    #[serde(rename="lastSuspendedTimestamp")]
    
    pub last_suspended_timestamp: Option<String>,
    /// Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type: zones/us-central1-f/machineTypes/n1-standard-1 To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones/zone/machineTypes/custom-CPUS-MEMORY For example: zones/us-central1-f/machineTypes/custom-4-5120 For a full list of restrictions, read the Specifications for custom machine types.
    #[serde(rename="machineType")]
    
    pub machine_type: Option<String>,
    /// The metadata key/value pairs assigned to this instance. This includes custom metadata and predefined keys.
    
    pub metadata: Option<Metadata>,
    /// Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge".
    #[serde(rename="minCpuPlatform")]
    
    pub min_cpu_platform: Option<String>,
    /// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance.
    #[serde(rename="networkInterfaces")]
    
    pub network_interfaces: Option<Vec<NetworkInterface>>,
    /// no description provided
    #[serde(rename="networkPerformanceConfig")]
    
    pub network_performance_config: Option<NetworkPerformanceConfig>,
    /// Input only. [Input Only] Additional params passed with the request, but not persisted as part of resource payload.
    
    pub params: Option<InstanceParams>,
    /// The private IPv6 google access type for the VM. If not specified, use INHERIT_FROM_SUBNETWORK as default.
    #[serde(rename="privateIpv6GoogleAccess")]
    
    pub private_ipv6_google_access: Option<InstancePrivateIpv6GoogleAccessEnum>,
    /// Specifies the reservations that this instance can consume from.
    #[serde(rename="reservationAffinity")]
    
    pub reservation_affinity: Option<ReservationAffinity>,
    /// Resource policies applied to this instance.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
    /// [Output Only] Specifies values set for instance attributes as compared to the values requested by user in the corresponding input only field.
    #[serde(rename="resourceStatus")]
    
    pub resource_status: Option<ResourceStatus>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// Sets the scheduling options for this instance.
    
    pub scheduling: Option<Scheduling>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported. Service accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information.
    #[serde(rename="serviceAccounts")]
    
    pub service_accounts: Option<Vec<ServiceAccount>>,
    /// no description provided
    #[serde(rename="shieldedInstanceConfig")]
    
    pub shielded_instance_config: Option<ShieldedInstanceConfig>,
    /// no description provided
    #[serde(rename="shieldedInstanceIntegrityPolicy")]
    
    pub shielded_instance_integrity_policy: Option<ShieldedInstanceIntegrityPolicy>,
    /// Source machine image
    #[serde(rename="sourceMachineImage")]
    
    pub source_machine_image: Option<String>,
    /// Source machine image encryption key when creating an instance from a machine image.
    #[serde(rename="sourceMachineImageEncryptionKey")]
    
    pub source_machine_image_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity.
    #[serde(rename="startRestricted")]
    
    pub start_restricted: Option<bool>,
    /// [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see Instance life cycle.
    
    pub status: Option<InstanceStatusEnum>,
    /// [Output Only] An optional, human-readable explanation of the status.
    #[serde(rename="statusMessage")]
    
    pub status_message: Option<String>,
    /// Tags to apply to this instance. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during instance creation. The tags can be later modified by the setTags method. Each tag within the list must comply with RFC1035. Multiple tags can be specified via the 'tags.items' field.
    
    pub tags: Option<Tags>,
    /// [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub zone: Option<String>,
}

impl client::RequestValue for Instance {}
impl client::Resource for Instance {}
impl client::ResponseResult for Instance {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list instances](InstanceAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// An object that contains a list of instances scoped by zone.
    
    pub items: Option<HashMap<String, InstancesScopedList>>,
    /// [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceAggregatedListWarning>,
}

impl client::ResponseResult for InstanceAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceConsumptionData {
    /// Resources consumed by the instance.
    #[serde(rename="consumptionInfo")]
    
    pub consumption_info: Option<InstanceConsumptionInfo>,
    /// Server-defined URL for the instance.
    
    pub instance: Option<String>,
}

impl client::Part for InstanceConsumptionData {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceConsumptionInfo {
    /// The number of virtual CPUs that are available to the instance.
    #[serde(rename="guestCpus")]
    
    pub guest_cpus: Option<i32>,
    /// The amount of local SSD storage available to the instance, defined in GiB.
    #[serde(rename="localSsdGb")]
    
    pub local_ssd_gb: Option<i32>,
    /// The amount of physical memory available to the instance, defined in MiB.
    #[serde(rename="memoryMb")]
    
    pub memory_mb: Option<i32>,
    /// The minimal guaranteed number of virtual CPUs that are reserved.
    #[serde(rename="minNodeCpus")]
    
    pub min_node_cpus: Option<i32>,
}

impl client::Part for InstanceConsumptionInfo {}


/// Represents an Instance Group resource. Instance Groups can be used to configure a target for load balancing. Instance groups can either be managed or unmanaged. To create managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead. Use zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups. For more information, read Instance groups.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add instances instance groups](InstanceGroupAddInstanceCall) (none)
/// * [aggregated list instance groups](InstanceGroupAggregatedListCall) (none)
/// * [delete instance groups](InstanceGroupDeleteCall) (none)
/// * [get instance groups](InstanceGroupGetCall) (response)
/// * [insert instance groups](InstanceGroupInsertCall) (request)
/// * [list instance groups](InstanceGroupListCall) (none)
/// * [list instances instance groups](InstanceGroupListInstanceCall) (none)
/// * [remove instances instance groups](InstanceGroupRemoveInstanceCall) (none)
/// * [set named ports instance groups](InstanceGroupSetNamedPortCall) (none)
/// * [get region instance groups](RegionInstanceGroupGetCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroup {
    /// [Output Only] The creation timestamp for this instance group in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] A unique identifier for this instance group, generated by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The resource type, which is always compute#instanceGroup for instance groups.
    
    pub kind: Option<String>,
    /// The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035.
    
    pub name: Option<String>,
    ///  Assigns a name to a port number. For example: {name: "http", port: 80} This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: "app1", port: 8080}, {name: "app1", port: 8081}, {name: "app2", port: 8082}] Named ports apply to all instances in this instance group. 
    #[serde(rename="namedPorts")]
    
    pub named_ports: Option<Vec<NamedPort>>,
    /// [Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
    
    pub network: Option<String>,
    /// [Output Only] The URL of the region where the instance group is located (for regional resources).
    
    pub region: Option<String>,
    /// [Output Only] The URL for this instance group. The server generates this URL.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The total number of instances in the instance group.
    
    pub size: Option<i32>,
    /// [Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
    
    pub subnetwork: Option<String>,
    /// [Output Only] The URL of the zone where the instance group is located (for zonal resources).
    
    pub zone: Option<String>,
}

impl client::RequestValue for InstanceGroup {}
impl client::Resource for InstanceGroup {}
impl client::ResponseResult for InstanceGroup {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list instance groups](InstanceGroupAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceGroupsScopedList resources.
    
    pub items: Option<HashMap<String, InstanceGroupsScopedList>>,
    /// [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceGroupAggregatedListWarning>,
}

impl client::ResponseResult for InstanceGroupAggregatedList {}


/// A list of InstanceGroup resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instance groups](InstanceGroupListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceGroup resources.
    
    pub items: Option<Vec<InstanceGroup>>,
    /// [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceGroupListWarning>,
}

impl client::ResponseResult for InstanceGroupList {}


/// Represents a Managed Instance Group resource. An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups. For zonal Managed Instance Group, use the instanceGroupManagers resource. For regional Managed Instance Group, use the regionInstanceGroupManagers resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [abandon instances instance group managers](InstanceGroupManagerAbandonInstanceCall) (none)
/// * [aggregated list instance group managers](InstanceGroupManagerAggregatedListCall) (none)
/// * [apply updates to instances instance group managers](InstanceGroupManagerApplyUpdatesToInstanceCall) (none)
/// * [create instances instance group managers](InstanceGroupManagerCreateInstanceCall) (none)
/// * [delete instance group managers](InstanceGroupManagerDeleteCall) (none)
/// * [delete instances instance group managers](InstanceGroupManagerDeleteInstanceCall) (none)
/// * [delete per instance configs instance group managers](InstanceGroupManagerDeletePerInstanceConfigCall) (none)
/// * [get instance group managers](InstanceGroupManagerGetCall) (response)
/// * [insert instance group managers](InstanceGroupManagerInsertCall) (request)
/// * [list instance group managers](InstanceGroupManagerListCall) (none)
/// * [list errors instance group managers](InstanceGroupManagerListErrorCall) (none)
/// * [list managed instances instance group managers](InstanceGroupManagerListManagedInstanceCall) (none)
/// * [list per instance configs instance group managers](InstanceGroupManagerListPerInstanceConfigCall) (none)
/// * [patch instance group managers](InstanceGroupManagerPatchCall) (request)
/// * [patch per instance configs instance group managers](InstanceGroupManagerPatchPerInstanceConfigCall) (none)
/// * [recreate instances instance group managers](InstanceGroupManagerRecreateInstanceCall) (none)
/// * [resize instance group managers](InstanceGroupManagerResizeCall) (none)
/// * [set instance template instance group managers](InstanceGroupManagerSetInstanceTemplateCall) (none)
/// * [set target pools instance group managers](InstanceGroupManagerSetTargetPoolCall) (none)
/// * [update per instance configs instance group managers](InstanceGroupManagerUpdatePerInstanceConfigCall) (none)
/// * [get region instance group managers](RegionInstanceGroupManagerGetCall) (response)
/// * [insert region instance group managers](RegionInstanceGroupManagerInsertCall) (request)
/// * [patch region instance group managers](RegionInstanceGroupManagerPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManager {
    /// The autohealing policy for this managed instance group. You can specify only one value.
    #[serde(rename="autoHealingPolicies")]
    
    pub auto_healing_policies: Option<Vec<InstanceGroupManagerAutoHealingPolicy>>,
    /// The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
    #[serde(rename="baseInstanceName")]
    
    pub base_instance_name: Option<String>,
    /// [Output Only] The creation timestamp for this managed instance group in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions.
    #[serde(rename="currentActions")]
    
    pub current_actions: Option<InstanceGroupManagerActionsSummary>,
    /// An optional description of this resource.
    
    pub description: Option<String>,
    /// Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
    #[serde(rename="distributionPolicy")]
    
    pub distribution_policy: Option<DistributionPolicy>,
    /// Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] A unique identifier for this resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The URL of the Instance Group resource.
    #[serde(rename="instanceGroup")]
    
    pub instance_group: Option<String>,
    /// The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
    #[serde(rename="instanceTemplate")]
    
    pub instance_template: Option<String>,
    /// [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups.
    
    pub kind: Option<String>,
    /// Pagination behavior of the listManagedInstances API method for this managed instance group.
    #[serde(rename="listManagedInstancesResults")]
    
    pub list_managed_instances_results: Option<InstanceGroupManagerListManagedInstancesResultsEnum>,
    /// The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
    
    pub name: Option<String>,
    /// Named ports configured for the Instance Groups complementary to this Instance Group Manager.
    #[serde(rename="namedPorts")]
    
    pub named_ports: Option<Vec<NamedPort>>,
    /// [Output Only] The URL of the region where the managed instance group resides (for regional resources).
    
    pub region: Option<String>,
    /// [Output Only] The URL for this managed instance group. The server defines this URL.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Stateful configuration for this Instanced Group Manager
    #[serde(rename="statefulPolicy")]
    
    pub stateful_policy: Option<StatefulPolicy>,
    /// [Output Only] The status of this managed instance group.
    
    pub status: Option<InstanceGroupManagerStatus>,
    /// The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
    #[serde(rename="targetPools")]
    
    pub target_pools: Option<Vec<String>>,
    /// The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
    #[serde(rename="targetSize")]
    
    pub target_size: Option<i32>,
    /// The update policy for this managed instance group.
    #[serde(rename="updatePolicy")]
    
    pub update_policy: Option<InstanceGroupManagerUpdatePolicy>,
    /// Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
    
    pub versions: Option<Vec<InstanceGroupManagerVersion>>,
    /// [Output Only] The URL of a zone where the managed instance group is located (for zonal resources).
    
    pub zone: Option<String>,
}

impl client::RequestValue for InstanceGroupManager {}
impl client::Resource for InstanceGroupManager {}
impl client::ResponseResult for InstanceGroupManager {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerActionsSummary {
    /// [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
    
    pub abandoning: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
    
    pub creating: Option<i32>,
    /// [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
    #[serde(rename="creatingWithoutRetries")]
    
    pub creating_without_retries: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
    
    pub deleting: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions.
    
    pub none: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
    
    pub recreating: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
    
    pub refreshing: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
    
    pub restarting: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be resumed or are currently being resumed.
    
    pub resuming: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be started or are currently being started.
    
    pub starting: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be stopped or are currently being stopped.
    
    pub stopping: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are scheduled to be suspended or are currently being suspended.
    
    pub suspending: Option<i32>,
    /// [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
    
    pub verifying: Option<i32>,
}

impl client::Part for InstanceGroupManagerActionsSummary {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list instance group managers](InstanceGroupManagerAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceGroupManagersScopedList resources.
    
    pub items: Option<HashMap<String, InstanceGroupManagersScopedList>>,
    /// [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceGroupManagerAggregatedListWarning>,
}

impl client::ResponseResult for InstanceGroupManagerAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerAutoHealingPolicy {
    /// The URL for the health check that signals autohealing.
    #[serde(rename="healthCheck")]
    
    pub health_check: Option<String>,
    /// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
    #[serde(rename="initialDelaySec")]
    
    pub initial_delay_sec: Option<i32>,
}

impl client::Part for InstanceGroupManagerAutoHealingPolicy {}


/// \[Output Only\] A list of managed instance groups.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instance group managers](InstanceGroupManagerListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceGroupManager resources.
    
    pub items: Option<Vec<InstanceGroupManager>>,
    /// [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceGroupManagerListWarning>,
}

impl client::ResponseResult for InstanceGroupManagerList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerStatus {
    /// [Output Only] The URL of the Autoscaler that targets this instance group manager.
    
    pub autoscaler: Option<String>,
    /// [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
    #[serde(rename="isStable")]
    
    pub is_stable: Option<bool>,
    /// [Output Only] Stateful status of the given Instance Group Manager.
    
    pub stateful: Option<InstanceGroupManagerStatusStateful>,
    /// [Output Only] A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.
    #[serde(rename="versionTarget")]
    
    pub version_target: Option<InstanceGroupManagerStatusVersionTarget>,
}

impl client::Part for InstanceGroupManagerStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerStatusStateful {
    /// [Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
    #[serde(rename="hasStatefulConfig")]
    
    pub has_stateful_config: Option<bool>,
    /// [Output Only] Status of per-instance configurations on the instance.
    #[serde(rename="perInstanceConfigs")]
    
    pub per_instance_configs: Option<InstanceGroupManagerStatusStatefulPerInstanceConfigs>,
}

impl client::Part for InstanceGroupManagerStatusStateful {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerStatusStatefulPerInstanceConfigs {
    /// A bit indicating if all of the group's per-instance configurations (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
    #[serde(rename="allEffective")]
    
    pub all_effective: Option<bool>,
}

impl client::Part for InstanceGroupManagerStatusStatefulPerInstanceConfigs {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerStatusVersionTarget {
    /// [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager.
    #[serde(rename="isReached")]
    
    pub is_reached: Option<bool>,
}

impl client::Part for InstanceGroupManagerStatusVersionTarget {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerUpdatePolicy {
    /// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled. 
    #[serde(rename="instanceRedistributionType")]
    
    pub instance_redistribution_type: Option<InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeEnum>,
    /// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
    #[serde(rename="maxSurge")]
    
    pub max_surge: Option<FixedOrPercent>,
    /// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
    #[serde(rename="maxUnavailable")]
    
    pub max_unavailable: Option<FixedOrPercent>,
    /// Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes. 
    #[serde(rename="minimalAction")]
    
    pub minimal_action: Option<InstanceGroupManagerUpdatePolicyMinimalActionEnum>,
    /// Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
    #[serde(rename="mostDisruptiveAllowedAction")]
    
    pub most_disruptive_allowed_action: Option<InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedActionEnum>,
    /// What action should be used to replace instances. See minimal_action.REPLACE
    #[serde(rename="replacementMethod")]
    
    pub replacement_method: Option<InstanceGroupManagerUpdatePolicyReplacementMethodEnum>,
    /// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
    #[serde(rename="type")]
    
    pub type_: Option<InstanceGroupManagerUpdatePolicyTypeEnum>,
}

impl client::Part for InstanceGroupManagerUpdatePolicy {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerVersion {
    /// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
    #[serde(rename="instanceTemplate")]
    
    pub instance_template: Option<String>,
    /// Name of the version. Unique among all versions in the scope of this managed instance group.
    
    pub name: Option<String>,
    /// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
    #[serde(rename="targetSize")]
    
    pub target_size: Option<FixedOrPercent>,
}

impl client::Part for InstanceGroupManagerVersion {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [abandon instances instance group managers](InstanceGroupManagerAbandonInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersAbandonInstancesRequest {
    /// The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
}

impl client::RequestValue for InstanceGroupManagersAbandonInstancesRequest {}


/// InstanceGroupManagers.applyUpdatesToInstances
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [apply updates to instances instance group managers](InstanceGroupManagerApplyUpdatesToInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersApplyUpdatesRequest {
    /// Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request.
    #[serde(rename="allInstances")]
    
    pub all_instances: Option<bool>,
    /// The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
    /// The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
    #[serde(rename="minimalAction")]
    
    pub minimal_action: Option<InstanceGroupManagersApplyUpdatesRequestMinimalActionEnum>,
    /// The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
    #[serde(rename="mostDisruptiveAllowedAction")]
    
    pub most_disruptive_allowed_action: Option<InstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum>,
}

impl client::RequestValue for InstanceGroupManagersApplyUpdatesRequest {}


/// InstanceGroupManagers.createInstances
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [create instances instance group managers](InstanceGroupManagerCreateInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersCreateInstancesRequest {
    /// [Required] List of specifications of per-instance configs.
    
    pub instances: Option<Vec<PerInstanceConfig>>,
}

impl client::RequestValue for InstanceGroupManagersCreateInstancesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete instances instance group managers](InstanceGroupManagerDeleteInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersDeleteInstancesRequest {
    /// The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
    /// Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group's zone or region.
    #[serde(rename="skipInstancesOnValidationError")]
    
    pub skip_instances_on_validation_error: Option<bool>,
}

impl client::RequestValue for InstanceGroupManagersDeleteInstancesRequest {}


/// InstanceGroupManagers.deletePerInstanceConfigs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete per instance configs instance group managers](InstanceGroupManagerDeletePerInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersDeletePerInstanceConfigsReq {
    /// The list of instance names for which we want to delete per-instance configs on this managed instance group.
    
    pub names: Option<Vec<String>>,
}

impl client::RequestValue for InstanceGroupManagersDeletePerInstanceConfigsReq {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list errors instance group managers](InstanceGroupManagerListErrorCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersListErrorsResponse {
    /// [Output Only] The list of errors of the managed instance group.
    
    pub items: Option<Vec<InstanceManagedByIgmError>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
}

impl client::ResponseResult for InstanceGroupManagersListErrorsResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list managed instances instance group managers](InstanceGroupManagerListManagedInstanceCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersListManagedInstancesResponse {
    /// [Output Only] The list of instances in the managed instance group.
    #[serde(rename="managedInstances")]
    
    pub managed_instances: Option<Vec<ManagedInstance>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
}

impl client::ResponseResult for InstanceGroupManagersListManagedInstancesResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list per instance configs instance group managers](InstanceGroupManagerListPerInstanceConfigCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersListPerInstanceConfigsResp {
    /// [Output Only] The list of PerInstanceConfig.
    
    pub items: Option<Vec<PerInstanceConfig>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceGroupManagersListPerInstanceConfigsRespWarning>,
}

impl client::ResponseResult for InstanceGroupManagersListPerInstanceConfigsResp {}


/// InstanceGroupManagers.patchPerInstanceConfigs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [patch per instance configs instance group managers](InstanceGroupManagerPatchPerInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersPatchPerInstanceConfigsReq {
    /// The list of per-instance configurations to insert or patch on this managed instance group.
    #[serde(rename="perInstanceConfigs")]
    
    pub per_instance_configs: Option<Vec<PerInstanceConfig>>,
}

impl client::RequestValue for InstanceGroupManagersPatchPerInstanceConfigsReq {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [recreate instances instance group managers](InstanceGroupManagerRecreateInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersRecreateInstancesRequest {
    /// The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
}

impl client::RequestValue for InstanceGroupManagersRecreateInstancesRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersScopedList {
    /// [Output Only] The list of managed instance groups that are contained in the specified project and zone.
    #[serde(rename="instanceGroupManagers")]
    
    pub instance_group_managers: Option<Vec<InstanceGroupManager>>,
    /// [Output Only] The warning that replaces the list of managed instance groups when the list is empty.
    
    pub warning: Option<InstanceGroupManagersScopedListWarning>,
}

impl client::Part for InstanceGroupManagersScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set instance template instance group managers](InstanceGroupManagerSetInstanceTemplateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersSetInstanceTemplateRequest {
    /// The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
    #[serde(rename="instanceTemplate")]
    
    pub instance_template: Option<String>,
}

impl client::RequestValue for InstanceGroupManagersSetInstanceTemplateRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set target pools instance group managers](InstanceGroupManagerSetTargetPoolCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersSetTargetPoolsRequest {
    /// The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings.
    #[serde(rename="targetPools")]
    
    pub target_pools: Option<Vec<String>>,
}

impl client::RequestValue for InstanceGroupManagersSetTargetPoolsRequest {}


/// InstanceGroupManagers.updatePerInstanceConfigs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [update per instance configs instance group managers](InstanceGroupManagerUpdatePerInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersUpdatePerInstanceConfigsReq {
    /// The list of per-instance configurations to insert or patch on this managed instance group.
    #[serde(rename="perInstanceConfigs")]
    
    pub per_instance_configs: Option<Vec<PerInstanceConfig>>,
}

impl client::RequestValue for InstanceGroupManagersUpdatePerInstanceConfigsReq {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add instances instance groups](InstanceGroupAddInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsAddInstancesRequest {
    /// The list of instances to add to the instance group.
    
    pub instances: Option<Vec<InstanceReference>>,
}

impl client::RequestValue for InstanceGroupsAddInstancesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instances instance groups](InstanceGroupListInstanceCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsListInstances {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceWithNamedPorts resources.
    
    pub items: Option<Vec<InstanceWithNamedPorts>>,
    /// [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceGroupsListInstancesWarning>,
}

impl client::ResponseResult for InstanceGroupsListInstances {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instances instance groups](InstanceGroupListInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsListInstancesRequest {
    /// A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state.
    #[serde(rename="instanceState")]
    
    pub instance_state: Option<InstanceGroupsListInstancesRequestInstanceStateEnum>,
}

impl client::RequestValue for InstanceGroupsListInstancesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove instances instance groups](InstanceGroupRemoveInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsRemoveInstancesRequest {
    /// The list of instances to remove from the instance group.
    
    pub instances: Option<Vec<InstanceReference>>,
}

impl client::RequestValue for InstanceGroupsRemoveInstancesRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsScopedList {
    /// [Output Only] The list of instance groups that are contained in this scope.
    #[serde(rename="instanceGroups")]
    
    pub instance_groups: Option<Vec<InstanceGroup>>,
    /// [Output Only] An informational warning that replaces the list of instance groups when the list is empty.
    
    pub warning: Option<InstanceGroupsScopedListWarning>,
}

impl client::Part for InstanceGroupsScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set named ports instance groups](InstanceGroupSetNamedPortCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsSetNamedPortsRequest {
    /// The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The list of named ports to set for this instance group.
    #[serde(rename="namedPorts")]
    
    pub named_ports: Option<Vec<NamedPort>>,
}

impl client::RequestValue for InstanceGroupsSetNamedPortsRequest {}


/// Contains a list of instances.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instances](InstanceListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Instance resources.
    
    pub items: Option<Vec<Instance>>,
    /// [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceListWarning>,
}

impl client::ResponseResult for InstanceList {}


/// Contains a list of instance referrers.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list referrers instances](InstanceListReferrerCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceListReferrers {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Reference resources.
    
    pub items: Option<Vec<Reference>>,
    /// [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceListReferrersWarning>,
}

impl client::ResponseResult for InstanceListReferrers {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceManagedByIgmError {
    /// [Output Only] Contents of the error.
    
    pub error: Option<InstanceManagedByIgmErrorManagedInstanceError>,
    /// [Output Only] Details of the instance action that triggered this error. May be null, if the error was not caused by an action on an instance. This field is optional.
    #[serde(rename="instanceActionDetails")]
    
    pub instance_action_details: Option<InstanceManagedByIgmErrorInstanceActionDetails>,
    /// [Output Only] The time that this error occurred. This value is in RFC3339 text format.
    
    pub timestamp: Option<String>,
}

impl client::Part for InstanceManagedByIgmError {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceManagedByIgmErrorInstanceActionDetails {
    /// [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values:
    
    pub action: Option<InstanceManagedByIgmErrorInstanceActionDetailActionEnum>,
    /// [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created.
    
    pub instance: Option<String>,
    /// [Output Only] Version this instance was created from, or was being created from, but the creation failed. Corresponds to one of the versions that were set on the Instance Group Manager resource at the time this instance was being created.
    
    pub version: Option<ManagedInstanceVersion>,
}

impl client::Part for InstanceManagedByIgmErrorInstanceActionDetails {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceManagedByIgmErrorManagedInstanceError {
    /// [Output Only] Error code.
    
    pub code: Option<String>,
    /// [Output Only] Error message.
    
    pub message: Option<String>,
}

impl client::Part for InstanceManagedByIgmErrorManagedInstanceError {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [move instance projects](ProjectMoveInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceMoveRequest {
    /// The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone 
    #[serde(rename="destinationZone")]
    
    pub destination_zone: Option<String>,
    /// The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance 
    #[serde(rename="targetInstance")]
    
    pub target_instance: Option<String>,
}

impl client::RequestValue for InstanceMoveRequest {}


/// Additional instance params.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceParams {
    /// Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
    #[serde(rename="resourceManagerTags")]
    
    pub resource_manager_tags: Option<HashMap<String, String>>,
}

impl client::Part for InstanceParams {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceProperties {
    /// Controls for advanced machine-related behavior features. Note that for MachineImage, this is not supported yet.
    #[serde(rename="advancedMachineFeatures")]
    
    pub advanced_machine_features: Option<AdvancedMachineFeatures>,
    /// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
    #[serde(rename="canIpForward")]
    
    pub can_ip_forward: Option<bool>,
    /// Specifies the Confidential Instance options. Note that for MachineImage, this is not supported yet.
    #[serde(rename="confidentialInstanceConfig")]
    
    pub confidential_instance_config: Option<ConfidentialInstanceConfig>,
    /// An optional text description for the instances that are created from these properties.
    
    pub description: Option<String>,
    /// An array of disks that are associated with the instances that are created from these properties.
    
    pub disks: Option<Vec<AttachedDisk>>,
    /// A list of guest accelerator cards' type and count to use for instances created from these properties.
    #[serde(rename="guestAccelerators")]
    
    pub guest_accelerators: Option<Vec<AcceleratorConfig>>,
    /// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
    #[serde(rename="keyRevocationActionType")]
    
    pub key_revocation_action_type: Option<InstancePropertyKeyRevocationActionTypeEnum>,
    /// Labels to apply to instances that are created from these properties.
    
    pub labels: Option<HashMap<String, String>>,
    /// The machine type to use for instances that are created from these properties.
    #[serde(rename="machineType")]
    
    pub machine_type: Option<String>,
    /// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
    
    pub metadata: Option<Metadata>,
    /// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
    #[serde(rename="minCpuPlatform")]
    
    pub min_cpu_platform: Option<String>,
    /// An array of network access configurations for this interface.
    #[serde(rename="networkInterfaces")]
    
    pub network_interfaces: Option<Vec<NetworkInterface>>,
    /// Note that for MachineImage, this is not supported yet.
    #[serde(rename="networkPerformanceConfig")]
    
    pub network_performance_config: Option<NetworkPerformanceConfig>,
    /// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet.
    #[serde(rename="privateIpv6GoogleAccess")]
    
    pub private_ipv6_google_access: Option<InstancePropertyPrivateIpv6GoogleAccessEnum>,
    /// Specifies the reservations that instances can consume from. Note that for MachineImage, this is not supported yet.
    #[serde(rename="reservationAffinity")]
    
    pub reservation_affinity: Option<ReservationAffinity>,
    /// Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
    #[serde(rename="resourceManagerTags")]
    
    pub resource_manager_tags: Option<HashMap<String, String>>,
    /// Resource policies (names, not URLs) applied to instances created from these properties. Note that for MachineImage, this is not supported yet.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
    /// Specifies the scheduling options for the instances that are created from these properties.
    
    pub scheduling: Option<Scheduling>,
    /// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
    #[serde(rename="serviceAccounts")]
    
    pub service_accounts: Option<Vec<ServiceAccount>>,
    /// Note that for MachineImage, this is not supported yet.
    #[serde(rename="shieldedInstanceConfig")]
    
    pub shielded_instance_config: Option<ShieldedInstanceConfig>,
    /// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
    
    pub tags: Option<Tags>,
}

impl client::Part for InstanceProperties {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get health target pools](TargetPoolGetHealthCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceReference {
    /// The URL for a specific instance. @required compute.instancegroups.addInstances/removeInstances
    
    pub instance: Option<String>,
}

impl client::RequestValue for InstanceReference {}


/// Represents an Instance Template resource. You can use instance templates to create VM instances and managed instance groups. For more information, read Instance Templates.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete instance templates](InstanceTemplateDeleteCall) (none)
/// * [get instance templates](InstanceTemplateGetCall) (response)
/// * [get iam policy instance templates](InstanceTemplateGetIamPolicyCall) (none)
/// * [insert instance templates](InstanceTemplateInsertCall) (request)
/// * [list instance templates](InstanceTemplateListCall) (none)
/// * [set iam policy instance templates](InstanceTemplateSetIamPolicyCall) (none)
/// * [test iam permissions instance templates](InstanceTemplateTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceTemplate {
    /// [Output Only] The creation timestamp for this instance template in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] A unique identifier for this instance template. The server defines this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The resource type, which is always compute#instanceTemplate for instance templates.
    
    pub kind: Option<String>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The instance properties for this instance template.
    
    pub properties: Option<InstanceProperties>,
    /// [Output Only] The URL for this instance template. The server defines this URL.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance 
    #[serde(rename="sourceInstance")]
    
    pub source_instance: Option<String>,
    /// The source instance params to use to create this instance template.
    #[serde(rename="sourceInstanceParams")]
    
    pub source_instance_params: Option<SourceInstanceParams>,
}

impl client::RequestValue for InstanceTemplate {}
impl client::Resource for InstanceTemplate {}
impl client::ResponseResult for InstanceTemplate {}


/// A list of instance templates.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instance templates](InstanceTemplateListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceTemplateList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceTemplate resources.
    
    pub items: Option<Vec<InstanceTemplate>>,
    /// [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InstanceTemplateListWarning>,
}

impl client::ResponseResult for InstanceTemplateList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceWithNamedPorts {
    /// [Output Only] The URL of the instance.
    
    pub instance: Option<String>,
    /// [Output Only] The named ports that belong to this instance group.
    #[serde(rename="namedPorts")]
    
    pub named_ports: Option<Vec<NamedPort>>,
    /// [Output Only] The status of the instance.
    
    pub status: Option<InstanceWithNamedPortStatusEnum>,
}

impl client::Part for InstanceWithNamedPorts {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add resource policies instances](InstanceAddResourcePolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesAddResourcePoliciesRequest {
    /// Resource policies to be added to this instance.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
}

impl client::RequestValue for InstancesAddResourcePoliciesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get effective firewalls instances](InstanceGetEffectiveFirewallCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesGetEffectiveFirewallsResponse {
    /// Effective firewalls from firewall policies.
    #[serde(rename="firewallPolicys")]
    
    pub firewall_policys: Option<Vec<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>>,
    /// Effective firewalls on the instance.
    
    pub firewalls: Option<Vec<Firewall>>,
}

impl client::ResponseResult for InstancesGetEffectiveFirewallsResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    /// [Output Only] Deprecated, please use short name instead. The display name of the firewall policy.
    #[serde(rename="displayName")]
    
    pub display_name: Option<String>,
    /// [Output Only] The name of the firewall policy.
    
    pub name: Option<String>,
    /// The rules that apply to the network.
    
    pub rules: Option<Vec<FirewallPolicyRule>>,
    /// [Output Only] The short name of the firewall policy.
    #[serde(rename="shortName")]
    
    pub short_name: Option<String>,
    /// [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL.
    #[serde(rename="type")]
    
    pub type_: Option<InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum>,
}

impl client::Part for InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove resource policies instances](InstanceRemoveResourcePolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesRemoveResourcePoliciesRequest {
    /// Resource policies to be removed from this instance.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
}

impl client::RequestValue for InstancesRemoveResourcePoliciesRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesScopedList {
    /// [Output Only] A list of instances contained in this scope.
    
    pub instances: Option<Vec<Instance>>,
    /// [Output Only] Informational warning which replaces the list of instances when the list is empty.
    
    pub warning: Option<InstancesScopedListWarning>,
}

impl client::Part for InstancesScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set labels instances](InstanceSetLabelCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesSetLabelsRequest {
    /// Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// no description provided
    
    pub labels: Option<HashMap<String, String>>,
}

impl client::RequestValue for InstancesSetLabelsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set machine resources instances](InstanceSetMachineResourceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesSetMachineResourcesRequest {
    /// A list of the type and count of accelerator cards attached to the instance.
    #[serde(rename="guestAccelerators")]
    
    pub guest_accelerators: Option<Vec<AcceleratorConfig>>,
}

impl client::RequestValue for InstancesSetMachineResourcesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set machine type instances](InstanceSetMachineTypeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesSetMachineTypeRequest {
    /// Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1
    #[serde(rename="machineType")]
    
    pub machine_type: Option<String>,
}

impl client::RequestValue for InstancesSetMachineTypeRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set min cpu platform instances](InstanceSetMinCpuPlatformCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesSetMinCpuPlatformRequest {
    /// Minimum cpu/platform this instance should be started at.
    #[serde(rename="minCpuPlatform")]
    
    pub min_cpu_platform: Option<String>,
}

impl client::RequestValue for InstancesSetMinCpuPlatformRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set service account instances](InstanceSetServiceAccountCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesSetServiceAccountRequest {
    /// Email address of the service account.
    
    pub email: Option<String>,
    /// The list of scopes to be made available for this service account.
    
    pub scopes: Option<Vec<String>>,
}

impl client::RequestValue for InstancesSetServiceAccountRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [start with encryption key instances](InstanceStartWithEncryptionKeyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesStartWithEncryptionKeyRequest {
    /// Array of disks associated with this instance that are protected with a customer-supplied encryption key. In order to start the instance, the disk url and its corresponding key must be provided. If the disk is not protected with a customer-supplied encryption key it should not be specified.
    
    pub disks: Option<Vec<CustomerEncryptionKeyProtectedDisk>>,
}

impl client::RequestValue for InstancesStartWithEncryptionKeyRequest {}


/// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Int64RangeMatch {
    /// The end of the range (exclusive) in signed long integer format.
    #[serde(rename="rangeEnd")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub range_end: Option<i64>,
    /// The start of the range (inclusive) in signed long integer format.
    #[serde(rename="rangeStart")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub range_start: Option<i64>,
}

impl client::Part for Int64RangeMatch {}


/// Represents an Interconnect resource. An Interconnect resource is a dedicated connection between the GCP network and your on-premises network. For more information, read the Dedicated Interconnect Overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete interconnects](InterconnectDeleteCall) (none)
/// * [get interconnects](InterconnectGetCall) (response)
/// * [get diagnostics interconnects](InterconnectGetDiagnosticCall) (none)
/// * [insert interconnects](InterconnectInsertCall) (request)
/// * [list interconnects](InterconnectListCall) (none)
/// * [patch interconnects](InterconnectPatchCall) (request)
/// * [set labels interconnects](InterconnectSetLabelCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Interconnect {
    /// Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
    #[serde(rename="adminEnabled")]
    
    pub admin_enabled: Option<bool>,
    /// [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG.
    #[serde(rename="circuitInfos")]
    
    pub circuit_infos: Option<Vec<InterconnectCircuitInfo>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
    #[serde(rename="customerName")]
    
    pub customer_name: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] A list of outages expected for this Interconnect.
    #[serde(rename="expectedOutages")]
    
    pub expected_outages: Option<Vec<InterconnectOutageNotification>>,
    /// [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
    #[serde(rename="googleIpAddress")]
    
    pub google_ip_address: Option<String>,
    /// [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
    #[serde(rename="googleReferenceId")]
    
    pub google_reference_id: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
    #[serde(rename="interconnectAttachments")]
    
    pub interconnect_attachments: Option<Vec<String>>,
    /// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
    #[serde(rename="interconnectType")]
    
    pub interconnect_type: Option<InterconnectInterconnectTypeEnum>,
    /// [Output Only] Type of the resource. Always compute#interconnect for interconnects.
    
    pub kind: Option<String>,
    /// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
    #[serde(rename="linkType")]
    
    pub link_type: Option<InterconnectLinkTypeEnum>,
    /// URL of the InterconnectLocation object that represents where this connection is to be provisioned.
    
    pub location: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
    #[serde(rename="nocContactEmail")]
    
    pub noc_contact_email: Option<String>,
    /// [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. 
    #[serde(rename="operationalStatus")]
    
    pub operational_status: Option<InterconnectOperationalStatusEnum>,
    /// [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
    #[serde(rename="peerIpAddress")]
    
    pub peer_ip_address: Option<String>,
    /// [Output Only] Number of links actually provisioned in this interconnect.
    #[serde(rename="provisionedLinkCount")]
    
    pub provisioned_link_count: Option<i32>,
    /// Target number of physical links in the link bundle, as requested by the customer.
    #[serde(rename="requestedLinkCount")]
    
    pub requested_link_count: Option<i32>,
    /// [Output Only] Set to true if the resource satisfies the zone separation organization policy constraints and false otherwise. Defaults to false if the field is not present.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. 
    
    pub state: Option<InterconnectStateEnum>,
}

impl client::RequestValue for Interconnect {}
impl client::Resource for Interconnect {}
impl client::ResponseResult for Interconnect {}


/// Represents an Interconnect Attachment (VLAN) resource. You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read Creating VLAN Attachments.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list interconnect attachments](InterconnectAttachmentAggregatedListCall) (none)
/// * [delete interconnect attachments](InterconnectAttachmentDeleteCall) (none)
/// * [get interconnect attachments](InterconnectAttachmentGetCall) (response)
/// * [insert interconnect attachments](InterconnectAttachmentInsertCall) (request)
/// * [list interconnect attachments](InterconnectAttachmentListCall) (none)
/// * [patch interconnect attachments](InterconnectAttachmentPatchCall) (request)
/// * [set labels interconnect attachments](InterconnectAttachmentSetLabelCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachment {
    /// Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER.
    #[serde(rename="adminEnabled")]
    
    pub admin_enabled: Option<bool>,
    /// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s 
    
    pub bandwidth: Option<InterconnectAttachmentBandwidthEnum>,
    /// This field is not available.
    #[serde(rename="candidateIpv6Subnets")]
    
    pub candidate_ipv6_subnets: Option<Vec<String>>,
    /// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.
    #[serde(rename="candidateSubnets")]
    
    pub candidate_subnets: Option<Vec<String>>,
    /// [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
    #[serde(rename="cloudRouterIpAddress")]
    
    pub cloud_router_ip_address: Option<String>,
    /// [Output Only] IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
    #[serde(rename="cloudRouterIpv6Address")]
    
    pub cloud_router_ipv6_address: Option<String>,
    /// This field is not available.
    #[serde(rename="cloudRouterIpv6InterfaceId")]
    
    pub cloud_router_ipv6_interface_id: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
    #[serde(rename="customerRouterIpAddress")]
    
    pub customer_router_ip_address: Option<String>,
    /// [Output Only] IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
    #[serde(rename="customerRouterIpv6Address")]
    
    pub customer_router_ipv6_address: Option<String>,
    /// This field is not available.
    #[serde(rename="customerRouterIpv6InterfaceId")]
    
    pub customer_router_ipv6_interface_id: Option<String>,
    /// [Output Only] Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
    #[serde(rename="dataplaneVersion")]
    
    pub dataplane_version: Option<i32>,
    /// An optional description of this resource.
    
    pub description: Option<String>,
    /// Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
    #[serde(rename="edgeAvailabilityDomain")]
    
    pub edge_availability_domain: Option<InterconnectAttachmentEdgeAvailabilityDomainEnum>,
    /// Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option. 
    
    pub encryption: Option<InterconnectAttachmentEncryptionEnum>,
    /// [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
    #[serde(rename="googleReferenceId")]
    
    pub google_reference_id: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// URL of the underlying Interconnect object that this attachment's traffic will traverse through.
    
    pub interconnect: Option<String>,
    /// A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN gateway's IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is paired to this VLAN attachment, then a regional internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway's IP address is allocated from the regional external IP address pool. Not currently available publicly. 
    #[serde(rename="ipsecInternalAddresses")]
    
    pub ipsec_internal_addresses: Option<Vec<String>>,
    /// [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments.
    
    pub kind: Option<String>,
    /// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
    
    pub mtu: Option<i32>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. 
    #[serde(rename="operationalStatus")]
    
    pub operational_status: Option<InterconnectAttachmentOperationalStatusEnum>,
    /// [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
    #[serde(rename="pairingKey")]
    
    pub pairing_key: Option<String>,
    /// Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED.
    #[serde(rename="partnerAsn")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub partner_asn: Option<i64>,
    /// Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED.
    #[serde(rename="partnerMetadata")]
    
    pub partner_metadata: Option<InterconnectAttachmentPartnerMetadata>,
    /// [Output Only] Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.
    #[serde(rename="privateInterconnectInfo")]
    
    pub private_interconnect_info: Option<InterconnectAttachmentPrivateInfo>,
    /// [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured.
    
    pub router: Option<String>,
    /// [Output Only] Set to true if the resource satisfies the zone separation organization policy constraints and false otherwise. Defaults to false if the field is not present.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
    #[serde(rename="stackType")]
    
    pub stack_type: Option<InterconnectAttachmentStackTypeEnum>,
    /// [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted. 
    
    pub state: Option<InterconnectAttachmentStateEnum>,
    /// The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner. 
    #[serde(rename="type")]
    
    pub type_: Option<InterconnectAttachmentTypeEnum>,
    /// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time.
    #[serde(rename="vlanTag8021q")]
    
    pub vlan_tag8021q: Option<i32>,
}

impl client::RequestValue for InterconnectAttachment {}
impl client::Resource for InterconnectAttachment {}
impl client::ResponseResult for InterconnectAttachment {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list interconnect attachments](InterconnectAttachmentAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InterconnectAttachmentsScopedList resources.
    
    pub items: Option<HashMap<String, InterconnectAttachmentsScopedList>>,
    /// [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InterconnectAttachmentAggregatedListWarning>,
}

impl client::ResponseResult for InterconnectAttachmentAggregatedList {}


/// Response to the list request, and contains a list of interconnect attachments.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list interconnect attachments](InterconnectAttachmentListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InterconnectAttachment resources.
    
    pub items: Option<Vec<InterconnectAttachment>>,
    /// [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InterconnectAttachmentListWarning>,
}

impl client::ResponseResult for InterconnectAttachmentList {}


/// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentPartnerMetadata {
    /// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
    #[serde(rename="interconnectName")]
    
    pub interconnect_name: Option<String>,
    /// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
    #[serde(rename="partnerName")]
    
    pub partner_name: Option<String>,
    /// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
    #[serde(rename="portalUrl")]
    
    pub portal_url: Option<String>,
}

impl client::Part for InterconnectAttachmentPartnerMetadata {}


/// Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentPrivateInfo {
    /// [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
    
    pub tag8021q: Option<u32>,
}

impl client::Part for InterconnectAttachmentPrivateInfo {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentsScopedList {
    /// A list of interconnect attachments contained in this scope.
    #[serde(rename="interconnectAttachments")]
    
    pub interconnect_attachments: Option<Vec<InterconnectAttachment>>,
    /// Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<InterconnectAttachmentsScopedListWarning>,
}

impl client::Part for InterconnectAttachmentsScopedList {}


/// Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectCircuitInfo {
    /// Customer-side demarc ID for this circuit.
    #[serde(rename="customerDemarcId")]
    
    pub customer_demarc_id: Option<String>,
    /// Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
    #[serde(rename="googleCircuitId")]
    
    pub google_circuit_id: Option<String>,
    /// Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
    #[serde(rename="googleDemarcId")]
    
    pub google_demarc_id: Option<String>,
}

impl client::Part for InterconnectCircuitInfo {}


/// Diagnostics information about interconnect, contains detailed and current technical information about Google's side of the connection.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectDiagnostics {
    /// A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled.
    #[serde(rename="arpCaches")]
    
    pub arp_caches: Option<Vec<InterconnectDiagnosticsARPEntry>>,
    /// The aggregation type of the bundle interface.
    #[serde(rename="bundleAggregationType")]
    
    pub bundle_aggregation_type: Option<InterconnectDiagnosticBundleAggregationTypeEnum>,
    /// The operational status of the bundle interface.
    #[serde(rename="bundleOperationalStatus")]
    
    pub bundle_operational_status: Option<InterconnectDiagnosticBundleOperationalStatusEnum>,
    /// A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect.
    
    pub links: Option<Vec<InterconnectDiagnosticsLinkStatus>>,
    /// The MAC address of the Interconnect's bundle interface.
    #[serde(rename="macAddress")]
    
    pub mac_address: Option<String>,
}

impl client::Part for InterconnectDiagnostics {}


/// Describing the ARP neighbor entries seen on this link
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectDiagnosticsARPEntry {
    /// The IP address of this ARP neighbor.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
    /// The MAC address of this ARP neighbor.
    #[serde(rename="macAddress")]
    
    pub mac_address: Option<String>,
}

impl client::Part for InterconnectDiagnosticsARPEntry {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectDiagnosticsLinkLACPStatus {
    /// System ID of the port on Google's side of the LACP exchange.
    #[serde(rename="googleSystemId")]
    
    pub google_system_id: Option<String>,
    /// System ID of the port on the neighbor's side of the LACP exchange.
    #[serde(rename="neighborSystemId")]
    
    pub neighbor_system_id: Option<String>,
    /// The state of a LACP link, which can take one of the following values: - ACTIVE: The link is configured and active within the bundle. - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty. 
    
    pub state: Option<InterconnectDiagnosticsLinkLACPStatuStateEnum>,
}

impl client::Part for InterconnectDiagnosticsLinkLACPStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectDiagnosticsLinkOpticalPower {
    /// The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed a warning threshold. - LOW_WARNING: The value has crossed below the low warning threshold. - HIGH_WARNING: The value has crossed above the high warning threshold. - LOW_ALARM: The value has crossed below the low alarm threshold. - HIGH_ALARM: The value has crossed above the high alarm threshold. 
    
    pub state: Option<InterconnectDiagnosticsLinkOpticalPowerStateEnum>,
    /// Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
    
    pub value: Option<f32>,
}

impl client::Part for InterconnectDiagnosticsLinkOpticalPower {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectDiagnosticsLinkStatus {
    /// A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled
    #[serde(rename="arpCaches")]
    
    pub arp_caches: Option<Vec<InterconnectDiagnosticsARPEntry>>,
    /// The unique ID for this link assigned during turn up by Google.
    #[serde(rename="circuitId")]
    
    pub circuit_id: Option<String>,
    /// The Demarc address assigned by Google and provided in the LoA.
    #[serde(rename="googleDemarc")]
    
    pub google_demarc: Option<String>,
    /// no description provided
    #[serde(rename="lacpStatus")]
    
    pub lacp_status: Option<InterconnectDiagnosticsLinkLACPStatus>,
    /// The operational status of the link.
    #[serde(rename="operationalStatus")]
    
    pub operational_status: Option<InterconnectDiagnosticsLinkStatuOperationalStatusEnum>,
    /// An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the received light level.
    #[serde(rename="receivingOpticalPower")]
    
    pub receiving_optical_power: Option<InterconnectDiagnosticsLinkOpticalPower>,
    /// An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the transmitted light level.
    #[serde(rename="transmittingOpticalPower")]
    
    pub transmitting_optical_power: Option<InterconnectDiagnosticsLinkOpticalPower>,
}

impl client::Part for InterconnectDiagnosticsLinkStatus {}


/// Response to the list request, and contains a list of interconnects.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list interconnects](InterconnectListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Interconnect resources.
    
    pub items: Option<Vec<Interconnect>>,
    /// [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InterconnectListWarning>,
}

impl client::ResponseResult for InterconnectList {}


/// Represents an Interconnect Attachment (VLAN) Location resource. You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read Creating VLAN Attachments.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get interconnect locations](InterconnectLocationGetCall) (response)
/// * [list interconnect locations](InterconnectLocationListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectLocation {
    /// [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character.
    
    pub address: Option<String>,
    /// [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: "zone1" or "zone2".
    #[serde(rename="availabilityZone")]
    
    pub availability_zone: Option<String>,
    /// [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands".
    
    pub city: Option<String>,
    /// [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA 
    
    pub continent: Option<InterconnectLocationContinentEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] An optional description of the resource.
    
    pub description: Option<String>,
    /// [Output Only] The name of the provider for this facility (e.g., EQUINIX).
    #[serde(rename="facilityProvider")]
    
    pub facility_provider: Option<String>,
    /// [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1).
    #[serde(rename="facilityProviderFacilityId")]
    
    pub facility_provider_facility_id: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations.
    
    pub kind: Option<String>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb).
    #[serde(rename="peeringdbFacilityId")]
    
    pub peeringdb_facility_id: Option<String>,
    /// [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions.
    #[serde(rename="regionInfos")]
    
    pub region_infos: Option<Vec<InterconnectLocationRegionInfo>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects. 
    
    pub status: Option<InterconnectLocationStatusEnum>,
    /// [Output Only] Set to true for locations that support physical zone separation. Defaults to false if the field is not present.
    #[serde(rename="supportsPzs")]
    
    pub supports_pzs: Option<bool>,
}

impl client::Resource for InterconnectLocation {}
impl client::ResponseResult for InterconnectLocation {}


/// Response to the list request, and contains a list of interconnect locations.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list interconnect locations](InterconnectLocationListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectLocationList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InterconnectLocation resources.
    
    pub items: Option<Vec<InterconnectLocation>>,
    /// [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<InterconnectLocationListWarning>,
}

impl client::ResponseResult for InterconnectLocationList {}


/// Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectLocationRegionInfo {
    /// Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region.
    #[serde(rename="expectedRttMs")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub expected_rtt_ms: Option<i64>,
    /// Identifies the network presence of this location.
    #[serde(rename="locationPresence")]
    
    pub location_presence: Option<InterconnectLocationRegionInfoLocationPresenceEnum>,
    /// URL for the region of this location.
    
    pub region: Option<String>,
}

impl client::Part for InterconnectLocationRegionInfo {}


/// Description of a planned outage on this Interconnect.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectOutageNotification {
    /// If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
    #[serde(rename="affectedCircuits")]
    
    pub affected_circuits: Option<Vec<String>>,
    /// A description about the purpose of the outage.
    
    pub description: Option<String>,
    /// Scheduled end time for the outage (milliseconds since Unix epoch).
    #[serde(rename="endTime")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub end_time: Option<i64>,
    /// Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
    #[serde(rename="issueType")]
    
    pub issue_type: Option<InterconnectOutageNotificationIssueTypeEnum>,
    /// Unique identifier for this outage notification.
    
    pub name: Option<String>,
    /// The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
    
    pub source: Option<InterconnectOutageNotificationSourceEnum>,
    /// Scheduled start time for the outage (milliseconds since Unix epoch).
    #[serde(rename="startTime")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub start_time: Option<i64>,
    /// State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
    
    pub state: Option<InterconnectOutageNotificationStateEnum>,
}

impl client::Part for InterconnectOutageNotification {}


/// Response for the InterconnectsGetDiagnosticsRequest.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get diagnostics interconnects](InterconnectGetDiagnosticCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectsGetDiagnosticsResponse {
    /// no description provided
    
    pub result: Option<InterconnectDiagnostics>,
}

impl client::ResponseResult for InterconnectsGetDiagnosticsResponse {}


/// Represents a License resource. A License represents billing and aggregate usage data for public and marketplace images. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. 
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete licenses](LicenseDeleteCall) (none)
/// * [get licenses](LicenseGetCall) (response)
/// * [get iam policy licenses](LicenseGetIamPolicyCall) (none)
/// * [insert licenses](LicenseInsertCall) (request)
/// * [list licenses](LicenseListCall) (none)
/// * [set iam policy licenses](LicenseSetIamPolicyCall) (none)
/// * [test iam permissions licenses](LicenseTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct License {
    /// [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee.
    #[serde(rename="chargesUseFee")]
    
    pub charges_use_fee: Option<bool>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional textual description of the resource; provided by the client when the resource is created.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#license for licenses.
    
    pub kind: Option<String>,
    /// [Output Only] The unique code used to attach this license to images, snapshots, and disks.
    #[serde(rename="licenseCode")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub license_code: Option<u64>,
    /// Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
    
    pub name: Option<String>,
    /// no description provided
    #[serde(rename="resourceRequirements")]
    
    pub resource_requirements: Option<LicenseResourceRequirements>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk.
    
    pub transferable: Option<bool>,
}

impl client::RequestValue for License {}
impl client::Resource for License {}
impl client::ResponseResult for License {}


/// Represents a License Code resource. A License Code is a unique identifier used to represent a license resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. 
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get license codes](LicenseCodeGetCall) (response)
/// * [test iam permissions license codes](LicenseCodeTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicenseCode {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] Description of this License Code.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#licenseCode for licenses.
    
    pub kind: Option<String>,
    /// [Output Only] URL and description aliases of Licenses with the same License Code.
    #[serde(rename="licenseAlias")]
    
    pub license_alias: Option<Vec<LicenseCodeLicenseAlias>>,
    /// [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer.
    
    pub name: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Current state of this License Code.
    
    pub state: Option<LicenseCodeStateEnum>,
    /// [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred.
    
    pub transferable: Option<bool>,
}

impl client::Resource for LicenseCode {}
impl client::ResponseResult for LicenseCode {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicenseCodeLicenseAlias {
    /// [Output Only] Description of this License Code.
    
    pub description: Option<String>,
    /// [Output Only] URL of license corresponding to this License Code.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::Part for LicenseCodeLicenseAlias {}


/// Commitment for a particular license resource.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicenseResourceCommitment {
    /// The number of licenses purchased.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub amount: Option<i64>,
    /// Specifies the core range of the instance for which this license applies.
    #[serde(rename="coresPerLicense")]
    
    pub cores_per_license: Option<String>,
    /// Any applicable license URI.
    
    pub license: Option<String>,
}

impl client::Part for LicenseResourceCommitment {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicenseResourceRequirements {
    /// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
    #[serde(rename="minGuestCpuCount")]
    
    pub min_guest_cpu_count: Option<i32>,
    /// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
    #[serde(rename="minMemoryMb")]
    
    pub min_memory_mb: Option<i32>,
}

impl client::Part for LicenseResourceRequirements {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list licenses](LicenseListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicensesListResponse {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of License resources.
    
    pub items: Option<Vec<License>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<LicensesListResponseWarning>,
}

impl client::ResponseResult for LicensesListResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LocalDisk {
    /// Specifies the number of such disks.
    #[serde(rename="diskCount")]
    
    pub disk_count: Option<i32>,
    /// Specifies the size of the disk in base-2 GB.
    #[serde(rename="diskSizeGb")]
    
    pub disk_size_gb: Option<i32>,
    /// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
    #[serde(rename="diskType")]
    
    pub disk_type: Option<String>,
}

impl client::Part for LocalDisk {}


/// Provides a localized error message that is safe to return to the user which can be attached to an RPC error.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LocalizedMessage {
    /// The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX"
    
    pub locale: Option<String>,
    /// The localized error message in the above locale.
    
    pub message: Option<String>,
}

impl client::Part for LocalizedMessage {}


/// Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LocationPolicy {
    /// Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a.
    
    pub locations: Option<HashMap<String, LocationPolicyLocation>>,
    /// Strategy for distributing VMs across zones in a region.
    #[serde(rename="targetShape")]
    
    pub target_shape: Option<LocationPolicyTargetShapeEnum>,
}

impl client::Part for LocationPolicy {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LocationPolicyLocation {
    /// Constraints that the caller requires on the result distribution in this zone.
    
    pub constraints: Option<LocationPolicyLocationConstraints>,
    /// Preference for a given location. Set to either ALLOW or DENY.
    
    pub preference: Option<LocationPolicyLocationPreferenceEnum>,
}

impl client::Part for LocationPolicyLocation {}


/// Per-zone constraints on location policy for this zone.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LocationPolicyLocationConstraints {
    /// Maximum number of items that are allowed to be placed in this zone. The value must be non-negative.
    #[serde(rename="maxCount")]
    
    pub max_count: Option<i32>,
}

impl client::Part for LocationPolicyLocationConstraints {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LogConfig {
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="cloudAudit")]
    
    pub cloud_audit: Option<LogConfigCloudAuditOptions>,
    /// This is deprecated and has no effect. Do not use.
    
    pub counter: Option<LogConfigCounterOptions>,
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="dataAccess")]
    
    pub data_access: Option<LogConfigDataAccessOptions>,
}

impl client::Part for LogConfig {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LogConfigCloudAuditOptions {
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="authorizationLoggingOptions")]
    
    pub authorization_logging_options: Option<AuthorizationLoggingOptions>,
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="logName")]
    
    pub log_name: Option<LogConfigCloudAuditOptionLogNameEnum>,
}

impl client::Part for LogConfigCloudAuditOptions {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LogConfigCounterOptions {
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="customFields")]
    
    pub custom_fields: Option<Vec<LogConfigCounterOptionsCustomField>>,
    /// This is deprecated and has no effect. Do not use.
    
    pub field: Option<String>,
    /// This is deprecated and has no effect. Do not use.
    
    pub metric: Option<String>,
}

impl client::Part for LogConfigCounterOptions {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LogConfigCounterOptionsCustomField {
    /// This is deprecated and has no effect. Do not use.
    
    pub name: Option<String>,
    /// This is deprecated and has no effect. Do not use.
    
    pub value: Option<String>,
}

impl client::Part for LogConfigCounterOptionsCustomField {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LogConfigDataAccessOptions {
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="logMode")]
    
    pub log_mode: Option<LogConfigDataAccessOptionLogModeEnum>,
}

impl client::Part for LogConfigDataAccessOptions {}


/// Represents a machine image resource. A machine image is a Compute Engine resource that stores all the configuration, metadata, permissions, and data from one or more disks required to create a Virtual machine (VM) instance. For more information, see Machine images.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete machine images](MachineImageDeleteCall) (none)
/// * [get machine images](MachineImageGetCall) (response)
/// * [get iam policy machine images](MachineImageGetIamPolicyCall) (none)
/// * [insert machine images](MachineImageInsertCall) (request)
/// * [list machine images](MachineImageListCall) (none)
/// * [set iam policy machine images](MachineImageSetIamPolicyCall) (none)
/// * [test iam permissions machine images](MachineImageTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineImage {
    /// [Output Only] The creation timestamp for this machine image in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Input Only] Whether to attempt an application consistent machine image by informing the OS to prepare for the snapshot process.
    #[serde(rename="guestFlush")]
    
    pub guest_flush: Option<bool>,
    /// [Output Only] A unique identifier for this machine image. The server defines this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Properties of source instance
    #[serde(rename="instanceProperties")]
    
    pub instance_properties: Option<InstanceProperties>,
    /// [Output Only] The resource type, which is always compute#machineImage for machine image.
    
    pub kind: Option<String>,
    /// Encrypts the machine image using a customer-supplied encryption key. After you encrypt a machine image using a customer-supplied key, you must provide the same key if you use the machine image later. For example, you must provide the encryption key when you create an instance from the encrypted machine image in a future request. Customer-supplied encryption keys do not protect access to metadata of the machine image. If you do not provide an encryption key when creating the machine image, then the machine image will be encrypted using an automatically generated key and you do not need to provide a key to use the machine image later.
    #[serde(rename="machineImageEncryptionKey")]
    
    pub machine_image_encryption_key: Option<CustomerEncryptionKey>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// An array of Machine Image specific properties for disks attached to the source instance
    #[serde(rename="savedDisks")]
    
    pub saved_disks: Option<Vec<SavedDisk>>,
    /// [Output Only] The URL for this machine image. The server defines this URL.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Input Only] The customer-supplied encryption key of the disks attached to the source instance. Required if the source disk is protected by a customer-supplied encryption key.
    #[serde(rename="sourceDiskEncryptionKeys")]
    
    pub source_disk_encryption_keys: Option<Vec<SourceDiskEncryptionKey>>,
    /// The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance 
    #[serde(rename="sourceInstance")]
    
    pub source_instance: Option<String>,
    /// [Output Only] DEPRECATED: Please use instance_properties instead for source instance related properties. New properties will not be added to this field.
    #[serde(rename="sourceInstanceProperties")]
    
    pub source_instance_properties: Option<SourceInstanceProperties>,
    /// [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING.
    
    pub status: Option<MachineImageStatusEnum>,
    /// The regional or multi-regional Cloud Storage bucket location where the machine image is stored.
    #[serde(rename="storageLocations")]
    
    pub storage_locations: Option<Vec<String>>,
    /// [Output Only] Total size of the storage used by the machine image.
    #[serde(rename="totalStorageBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub total_storage_bytes: Option<i64>,
}

impl client::RequestValue for MachineImage {}
impl client::Resource for MachineImage {}
impl client::ResponseResult for MachineImage {}


/// A list of machine images.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list machine images](MachineImageListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineImageList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of MachineImage resources.
    
    pub items: Option<Vec<MachineImage>>,
    /// [Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<MachineImageListWarning>,
}

impl client::ResponseResult for MachineImageList {}


/// Represents a Machine Type resource. You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list machine types](MachineTypeAggregatedListCall) (none)
/// * [get machine types](MachineTypeGetCall) (response)
/// * [list machine types](MachineTypeListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineType {
    /// [Output Only] A list of accelerator configurations assigned to this machine type.
    
    pub accelerators: Option<Vec<MachineTypeAccelerators>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] The deprecation status associated with this machine type. Only applicable if the machine type is unavailable.
    
    pub deprecated: Option<DeprecationStatus>,
    /// [Output Only] An optional textual description of the resource.
    
    pub description: Option<String>,
    /// [Output Only] The number of virtual CPUs that are available to the instance.
    #[serde(rename="guestCpus")]
    
    pub guest_cpus: Option<i32>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Deprecated] This property is deprecated and will never be populated with any relevant values.
    #[serde(rename="imageSpaceGb")]
    
    pub image_space_gb: Option<i32>,
    /// [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information.
    #[serde(rename="isSharedCpu")]
    
    pub is_shared_cpu: Option<bool>,
    /// [Output Only] The type of the resource. Always compute#machineType for machine types.
    
    pub kind: Option<String>,
    /// [Output Only] Maximum persistent disks allowed.
    #[serde(rename="maximumPersistentDisks")]
    
    pub maximum_persistent_disks: Option<i32>,
    /// [Output Only] Maximum total persistent disks size (GB) allowed.
    #[serde(rename="maximumPersistentDisksSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub maximum_persistent_disks_size_gb: Option<i64>,
    /// [Output Only] The amount of physical memory available to the instance, defined in MB.
    #[serde(rename="memoryMb")]
    
    pub memory_mb: Option<i32>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] A list of extended scratch disks assigned to the instance.
    #[serde(rename="scratchDisks")]
    
    pub scratch_disks: Option<Vec<MachineTypeScratchDisks>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The name of the zone where the machine type resides, such as us-central1-a.
    
    pub zone: Option<String>,
}

impl client::Resource for MachineType {}
impl client::ResponseResult for MachineType {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list machine types](MachineTypeAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of MachineTypesScopedList resources.
    
    pub items: Option<HashMap<String, MachineTypesScopedList>>,
    /// [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<MachineTypeAggregatedListWarning>,
}

impl client::ResponseResult for MachineTypeAggregatedList {}


/// Contains a list of machine types.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list machine types](MachineTypeListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of MachineType resources.
    
    pub items: Option<Vec<MachineType>>,
    /// [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<MachineTypeListWarning>,
}

impl client::ResponseResult for MachineTypeList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypesScopedList {
    /// [Output Only] A list of machine types contained in this scope.
    #[serde(rename="machineTypes")]
    
    pub machine_types: Option<Vec<MachineType>>,
    /// [Output Only] An informational warning that appears when the machine types list is empty.
    
    pub warning: Option<MachineTypesScopedListWarning>,
}

impl client::Part for MachineTypesScopedList {}


/// A Managed Instance resource.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstance {
    /// [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group's targetSize value is decreased instead. - RECREATING The managed instance group is recreating this instance. - DELETING The managed instance group is permanently deleting this instance. - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. - RESTARTING The managed instance group is restarting the instance. - REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. - VERIFYING The managed instance group has created the instance and it is in the process of being verified. 
    #[serde(rename="currentAction")]
    
    pub current_action: Option<ManagedInstanceCurrentActionEnum>,
    /// [Output only] The unique identifier for this resource. This field is empty when instance does not exist.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created.
    
    pub instance: Option<String>,
    /// [Output Only] Health state of the instance per health-check.
    #[serde(rename="instanceHealth")]
    
    pub instance_health: Option<Vec<ManagedInstanceInstanceHealth>>,
    /// [Output Only] The status of the instance. This field is empty when the instance does not exist.
    #[serde(rename="instanceStatus")]
    
    pub instance_status: Option<ManagedInstanceInstanceStatusEnum>,
    /// [Output Only] Information about the last attempt to create or delete the instance.
    #[serde(rename="lastAttempt")]
    
    pub last_attempt: Option<ManagedInstanceLastAttempt>,
    /// [Output Only] Preserved state applied from per-instance config for this instance.
    #[serde(rename="preservedStateFromConfig")]
    
    pub preserved_state_from_config: Option<PreservedState>,
    /// [Output Only] Preserved state generated based on stateful policy for this instance.
    #[serde(rename="preservedStateFromPolicy")]
    
    pub preserved_state_from_policy: Option<PreservedState>,
    /// [Output Only] Intended version of this instance.
    
    pub version: Option<ManagedInstanceVersion>,
}

impl client::Part for ManagedInstance {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstanceInstanceHealth {
    /// [Output Only] The current detailed instance health state.
    #[serde(rename="detailedHealthState")]
    
    pub detailed_health_state: Option<ManagedInstanceInstanceHealthDetailedHealthStateEnum>,
    /// [Output Only] The URL for the health check that verifies whether the instance is healthy.
    #[serde(rename="healthCheck")]
    
    pub health_check: Option<String>,
}

impl client::Part for ManagedInstanceInstanceHealth {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstanceLastAttempt {
    /// [Output Only] Encountered errors during the last attempt to create or delete the instance.
    
    pub errors: Option<ManagedInstanceLastAttemptErrors>,
}

impl client::Part for ManagedInstanceLastAttempt {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstanceVersion {
    /// [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }.
    #[serde(rename="instanceTemplate")]
    
    pub instance_template: Option<String>,
    /// [Output Only] Name of the version.
    
    pub name: Option<String>,
}

impl client::Part for ManagedInstanceVersion {}


/// A metadata key/value entry.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set metadata instances](InstanceSetMetadataCall) (request)
/// * [set common instance metadata projects](ProjectSetCommonInstanceMetadataCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Metadata {
    /// Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
    
    pub items: Option<Vec<MetadataItems>>,
    /// [Output Only] Type of the resource. Always compute#metadata for metadata.
    
    pub kind: Option<String>,
}

impl client::RequestValue for Metadata {}


/// Opaque filter criteria used by load balancers to restrict routing configuration to a limited set of load balancing proxies. Proxies and sidecars involved in load balancing would typically present metadata to the load balancers that need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if load balancing involves Envoys, they receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MetadataFilter {
    /// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
    #[serde(rename="filterLabels")]
    
    pub filter_labels: Option<Vec<MetadataFilterLabelMatch>>,
    /// Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata. 
    #[serde(rename="filterMatchCriteria")]
    
    pub filter_match_criteria: Option<MetadataFilterFilterMatchCriteriaEnum>,
}

impl client::Part for MetadataFilter {}


/// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the load balancer.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MetadataFilterLabelMatch {
    /// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
    
    pub name: Option<String>,
    /// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
    
    pub value: Option<String>,
}

impl client::Part for MetadataFilterLabelMatch {}


/// The named port. For example: <"http", 80>.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NamedPort {
    /// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
    
    pub name: Option<String>,
    /// The port number, which can be a value between 1 and 65535.
    
    pub port: Option<i32>,
}

impl client::Part for NamedPort {}


/// Represents a VPC Network resource. Networks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add peering networks](NetworkAddPeeringCall) (none)
/// * [delete networks](NetworkDeleteCall) (none)
/// * [get networks](NetworkGetCall) (response)
/// * [get effective firewalls networks](NetworkGetEffectiveFirewallCall) (none)
/// * [insert networks](NetworkInsertCall) (request)
/// * [list networks](NetworkListCall) (none)
/// * [list peering routes networks](NetworkListPeeringRouteCall) (none)
/// * [patch networks](NetworkPatchCall) (request)
/// * [remove peering networks](NetworkRemovePeeringCall) (none)
/// * [switch to custom mode networks](NetworkSwitchToCustomModeCall) (none)
/// * [update peering networks](NetworkUpdatePeeringCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Network {
    /// Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created.
    #[serde(rename="IPv4Range")]
    
    pub i_pv4_range: Option<String>,
    /// Must be set to create a VPC network. If not set, a legacy network is created. When set to true, the VPC network is created in auto mode. When set to false, the VPC network is created in custom mode. An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges. For custom mode VPC networks, you can add subnets using the subnetworks insert method.
    #[serde(rename="autoCreateSubnetworks")]
    
    pub auto_create_subnetworks: Option<bool>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this field when you create the resource.
    
    pub description: Option<String>,
    /// Enable ULA internal ipv6 on this network. Enabling this feature will assign a /48 from google defined ULA prefix fd20::/20. .
    #[serde(rename="enableUlaInternalIpv6")]
    
    pub enable_ula_internal_ipv6: Option<bool>,
    /// [Output Only] URL of the firewall policy the network is associated with.
    #[serde(rename="firewallPolicy")]
    
    pub firewall_policy: Option<String>,
    /// [Output Only] The gateway address for default routing out of the network, selected by GCP.
    #[serde(rename="gatewayIPv4")]
    
    pub gateway_i_pv4: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// When enabling ula internal ipv6, caller optionally can specify the /48 range they want from the google defined ULA prefix fd20::/20. The input must be a valid /48 ULA IPv6 address and must be within the fd20::/20. Operation will fail if the speficied /48 is already in used by another resource. If the field is not speficied, then a /48 range will be randomly allocated from fd20::/20 and returned via this field. .
    #[serde(rename="internalIpv6Range")]
    
    pub internal_ipv6_range: Option<String>,
    /// [Output Only] Type of the resource. Always compute#network for networks.
    
    pub kind: Option<String>,
    /// Maximum Transmission Unit in bytes. The minimum value for this field is 1300 and the maximum value is 8896. The suggested value is 1500, which is the default MTU used on the Internet, or 8896 if you want to use Jumbo frames. If unspecified, the value defaults to 1460.
    
    pub mtu: Option<i32>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    
    pub name: Option<String>,
    /// The network firewall policy enforcement order. Can be either AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to AFTER_CLASSIC_FIREWALL if the field is not specified.
    #[serde(rename="networkFirewallPolicyEnforcementOrder")]
    
    pub network_firewall_policy_enforcement_order: Option<NetworkNetworkFirewallPolicyEnforcementOrderEnum>,
    /// [Output Only] A list of network peerings for the resource.
    
    pub peerings: Option<Vec<NetworkPeering>>,
    /// The network-level routing configuration for this network. Used by Cloud Router to determine what type of network-wide routing behavior to enforce.
    #[serde(rename="routingConfig")]
    
    pub routing_config: Option<NetworkRoutingConfig>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Server-defined URL for this resource with the resource id.
    #[serde(rename="selfLinkWithId")]
    
    pub self_link_with_id: Option<String>,
    /// [Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network.
    
    pub subnetworks: Option<Vec<String>>,
}

impl client::RequestValue for Network {}
impl client::Resource for Network {}
impl client::ResponseResult for Network {}


/// NetworkAttachments A network attachment resource …
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list network attachments](NetworkAttachmentAggregatedListCall) (none)
/// * [delete network attachments](NetworkAttachmentDeleteCall) (none)
/// * [get network attachments](NetworkAttachmentGetCall) (response)
/// * [get iam policy network attachments](NetworkAttachmentGetIamPolicyCall) (none)
/// * [insert network attachments](NetworkAttachmentInsertCall) (request)
/// * [list network attachments](NetworkAttachmentListCall) (none)
/// * [set iam policy network attachments](NetworkAttachmentSetIamPolicyCall) (none)
/// * [test iam permissions network attachments](NetworkAttachmentTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachment {
    /// [Output Only] An array of connections for all the producers connected to this network attachment.
    #[serde(rename="connectionEndpoints")]
    
    pub connection_endpoints: Option<Vec<NetworkAttachmentConnectedEndpoint>>,
    /// no description provided
    #[serde(rename="connectionPreference")]
    
    pub connection_preference: Option<NetworkAttachmentConnectionPreferenceEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] The URL of the network which the Network Attachment belongs to.
    
    pub network: Option<String>,
    /// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
    #[serde(rename="producerAcceptLists")]
    
    pub producer_accept_lists: Option<Vec<String>>,
    /// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
    #[serde(rename="producerRejectLists")]
    
    pub producer_reject_lists: Option<Vec<String>>,
    /// [Output Only] URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Server-defined URL for this resource's resource id.
    #[serde(rename="selfLinkWithId")]
    
    pub self_link_with_id: Option<String>,
    /// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
    
    pub subnetworks: Option<Vec<String>>,
}

impl client::RequestValue for NetworkAttachment {}
impl client::Resource for NetworkAttachment {}
impl client::ResponseResult for NetworkAttachment {}


/// Contains a list of NetworkAttachmentsScopedList.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list network attachments](NetworkAttachmentAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NetworkAttachmentsScopedList resources.
    
    pub items: Option<HashMap<String, NetworkAttachmentsScopedList>>,
    /// no description provided
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkAttachmentAggregatedListWarning>,
}

impl client::ResponseResult for NetworkAttachmentAggregatedList {}


/// [Output Only] A connection connected to this network attachment.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentConnectedEndpoint {
    /// The IP address assigned to the producer instance network interface. This value will be a range in case of Serverless.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
    /// The project id or number of the interface to which the IP was assigned.
    #[serde(rename="projectIdOrNum")]
    
    pub project_id_or_num: Option<String>,
    /// Alias IP ranges from the same subnetwork
    #[serde(rename="secondaryIpCidrRanges")]
    
    pub secondary_ip_cidr_ranges: Option<Vec<String>>,
    /// The status of a connected endpoint to this network attachment.
    
    pub status: Option<NetworkAttachmentConnectedEndpointStatusEnum>,
    /// The subnetwork used to assign the IP to the producer instance network interface.
    
    pub subnetwork: Option<String>,
}

impl client::Part for NetworkAttachmentConnectedEndpoint {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list network attachments](NetworkAttachmentListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NetworkAttachment resources.
    
    pub items: Option<Vec<NetworkAttachment>>,
    /// no description provided
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkAttachmentListWarning>,
}

impl client::ResponseResult for NetworkAttachmentList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentsScopedList {
    /// A list of NetworkAttachments contained in this scope.
    #[serde(rename="networkAttachments")]
    
    pub network_attachments: Option<Vec<NetworkAttachment>>,
    /// Informational warning which replaces the list of network attachments when the list is empty.
    
    pub warning: Option<NetworkAttachmentsScopedListWarning>,
}

impl client::Part for NetworkAttachmentsScopedList {}


/// Represents a Google Cloud Armor network edge security service resource.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list network edge security services](NetworkEdgeSecurityServiceAggregatedListCall) (none)
/// * [delete network edge security services](NetworkEdgeSecurityServiceDeleteCall) (none)
/// * [get network edge security services](NetworkEdgeSecurityServiceGetCall) (response)
/// * [insert network edge security services](NetworkEdgeSecurityServiceInsertCall) (request)
/// * [patch network edge security services](NetworkEdgeSecurityServicePatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityService {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a NetworkEdgeSecurityService. An up-to-date fingerprint must be provided in order to update the NetworkEdgeSecurityService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a NetworkEdgeSecurityService.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output only] Type of the resource. Always compute#networkEdgeSecurityService for NetworkEdgeSecurityServices
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] URL of the region where the resource resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// The resource URL for the network edge security service associated with this network edge security service.
    #[serde(rename="securityPolicy")]
    
    pub security_policy: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Server-defined URL for this resource with the resource id.
    #[serde(rename="selfLinkWithId")]
    
    pub self_link_with_id: Option<String>,
}

impl client::RequestValue for NetworkEdgeSecurityService {}
impl client::Resource for NetworkEdgeSecurityService {}
impl client::ResponseResult for NetworkEdgeSecurityService {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list network edge security services](NetworkEdgeSecurityServiceAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityServiceAggregatedList {
    /// no description provided
    
    pub etag: Option<String>,
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NetworkEdgeSecurityServicesScopedList resources.
    
    pub items: Option<HashMap<String, NetworkEdgeSecurityServicesScopedList>>,
    /// [Output Only] Type of resource. Always compute#networkEdgeSecurityServiceAggregatedList for lists of Network Edge Security Services.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkEdgeSecurityServiceAggregatedListWarning>,
}

impl client::ResponseResult for NetworkEdgeSecurityServiceAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityServicesScopedList {
    /// A list of NetworkEdgeSecurityServices contained in this scope.
    #[serde(rename="networkEdgeSecurityServices")]
    
    pub network_edge_security_services: Option<Vec<NetworkEdgeSecurityService>>,
    /// Informational warning which replaces the list of security policies when the list is empty.
    
    pub warning: Option<NetworkEdgeSecurityServicesScopedListWarning>,
}

impl client::Part for NetworkEdgeSecurityServicesScopedList {}


/// The network endpoint.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpoint {
    /// Metadata defined as annotations on the network endpoint.
    
    pub annotations: Option<HashMap<String, String>>,
    /// Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT.
    
    pub fqdn: Option<String>,
    /// The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group. The name must be 1-63 characters long, and comply with RFC1035.
    
    pub instance: Option<String>,
    /// Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
    /// Optional port number of network endpoint. If not specified, the defaultPort for the network endpoint group will be used.
    
    pub port: Option<i32>,
}

impl client::Part for NetworkEndpoint {}


/// Represents a collection of network endpoints. A network endpoint group (NEG) defines how a set of endpoints should be reached, whether they are reachable, and where they are located. For more information about using NEGs, see Setting up external HTTP(S) Load Balancing with internet NEGs, Setting up zonal NEGs, or Setting up external HTTP(S) Load Balancing with serverless NEGs.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get global network endpoint groups](GlobalNetworkEndpointGroupGetCall) (response)
/// * [insert global network endpoint groups](GlobalNetworkEndpointGroupInsertCall) (request)
/// * [aggregated list network endpoint groups](NetworkEndpointGroupAggregatedListCall) (none)
/// * [attach network endpoints network endpoint groups](NetworkEndpointGroupAttachNetworkEndpointCall) (none)
/// * [delete network endpoint groups](NetworkEndpointGroupDeleteCall) (none)
/// * [detach network endpoints network endpoint groups](NetworkEndpointGroupDetachNetworkEndpointCall) (none)
/// * [get network endpoint groups](NetworkEndpointGroupGetCall) (response)
/// * [insert network endpoint groups](NetworkEndpointGroupInsertCall) (request)
/// * [list network endpoint groups](NetworkEndpointGroupListCall) (none)
/// * [list network endpoints network endpoint groups](NetworkEndpointGroupListNetworkEndpointCall) (none)
/// * [test iam permissions network endpoint groups](NetworkEndpointGroupTestIamPermissionCall) (none)
/// * [get region network endpoint groups](RegionNetworkEndpointGroupGetCall) (response)
/// * [insert region network endpoint groups](RegionNetworkEndpointGroupInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroup {
    /// Metadata defined as annotations on the network endpoint group.
    
    pub annotations: Option<HashMap<String, String>>,
    /// Only valid when networkEndpointType is "SERVERLESS". Only one of cloudRun, appEngine or cloudFunction may be set.
    #[serde(rename="appEngine")]
    
    pub app_engine: Option<NetworkEndpointGroupAppEngine>,
    /// Only valid when networkEndpointType is "SERVERLESS". Only one of cloudRun, appEngine or cloudFunction may be set.
    #[serde(rename="cloudFunction")]
    
    pub cloud_function: Option<NetworkEndpointGroupCloudFunction>,
    /// Only valid when networkEndpointType is "SERVERLESS". Only one of cloudRun, appEngine or cloudFunction may be set.
    #[serde(rename="cloudRun")]
    
    pub cloud_run: Option<NetworkEndpointGroupCloudRun>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// The default port used if the port number is not specified in the network endpoint.
    #[serde(rename="defaultPort")]
    
    pub default_port: Option<i32>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group.
    
    pub kind: Option<String>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified.
    
    pub network: Option<String>,
    /// Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT.
    #[serde(rename="networkEndpointType")]
    
    pub network_endpoint_type: Option<NetworkEndpointGroupNetworkEndpointTypeEnum>,
    /// no description provided
    #[serde(rename="pscData")]
    
    pub psc_data: Option<NetworkEndpointGroupPscData>,
    /// The target service url used to set up private service connection to a Google API or a PSC Producer Service Attachment. An example value is: "asia-northeast3-cloudkms.googleapis.com"
    #[serde(rename="pscTargetService")]
    
    pub psc_target_service: Option<String>,
    /// [Output Only] The URL of the region where the network endpoint group is located.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output only] Number of network endpoints in the network endpoint group.
    
    pub size: Option<i32>,
    /// Optional URL of the subnetwork to which all network endpoints in the NEG belong.
    
    pub subnetwork: Option<String>,
    /// [Output Only] The URL of the zone where the network endpoint group is located.
    
    pub zone: Option<String>,
}

impl client::RequestValue for NetworkEndpointGroup {}
impl client::Resource for NetworkEndpointGroup {}
impl client::ResponseResult for NetworkEndpointGroup {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list network endpoint groups](NetworkEndpointGroupAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NetworkEndpointGroupsScopedList resources.
    
    pub items: Option<HashMap<String, NetworkEndpointGroupsScopedList>>,
    /// [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkEndpointGroupAggregatedListWarning>,
}

impl client::ResponseResult for NetworkEndpointGroupAggregatedList {}


/// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupAppEngine {
    /// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
    
    pub service: Option<String>,
    /// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "<service>-dot-appname.appspot.com/<version>". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
    #[serde(rename="urlMask")]
    
    pub url_mask: Option<String>,
    /// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
    
    pub version: Option<String>,
}

impl client::Part for NetworkEndpointGroupAppEngine {}


/// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupCloudFunction {
    /// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
    
    pub function: Option<String>,
    /// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/<function>". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
    #[serde(rename="urlMask")]
    
    pub url_mask: Option<String>,
}

impl client::Part for NetworkEndpointGroupCloudFunction {}


/// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupCloudRun {
    /// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
    
    pub service: Option<String>,
    /// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
    
    pub tag: Option<String>,
    /// A template to parse <service> and <tag> fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask "<tag>.domain.com/<service>". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
    #[serde(rename="urlMask")]
    
    pub url_mask: Option<String>,
}

impl client::Part for NetworkEndpointGroupCloudRun {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list global network endpoint groups](GlobalNetworkEndpointGroupListCall) (response)
/// * [list network endpoint groups](NetworkEndpointGroupListCall) (response)
/// * [list region network endpoint groups](RegionNetworkEndpointGroupListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NetworkEndpointGroup resources.
    
    pub items: Option<Vec<NetworkEndpointGroup>>,
    /// [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkEndpointGroupListWarning>,
}

impl client::ResponseResult for NetworkEndpointGroupList {}


/// All data that is specifically relevant to only network endpoint groups of type PRIVATE_SERVICE_CONNECT.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupPscData {
    /// [Output Only] Address allocated from given subnetwork for PSC. This IP address acts as a VIP for a PSC NEG, allowing it to act as an endpoint in L7 PSC-XLB.
    #[serde(rename="consumerPscAddress")]
    
    pub consumer_psc_address: Option<String>,
    /// [Output Only] The PSC connection id of the PSC Network Endpoint Group Consumer.
    #[serde(rename="pscConnectionId")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub psc_connection_id: Option<u64>,
    /// [Output Only] The connection status of the PSC Forwarding Rule.
    #[serde(rename="pscConnectionStatus")]
    
    pub psc_connection_status: Option<NetworkEndpointGroupPscDataPscConnectionStatusEnum>,
}

impl client::Part for NetworkEndpointGroupPscData {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [attach network endpoints network endpoint groups](NetworkEndpointGroupAttachNetworkEndpointCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsAttachEndpointsRequest {
    /// The list of network endpoints to be attached.
    #[serde(rename="networkEndpoints")]
    
    pub network_endpoints: Option<Vec<NetworkEndpoint>>,
}

impl client::RequestValue for NetworkEndpointGroupsAttachEndpointsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [detach network endpoints network endpoint groups](NetworkEndpointGroupDetachNetworkEndpointCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsDetachEndpointsRequest {
    /// The list of network endpoints to be detached.
    #[serde(rename="networkEndpoints")]
    
    pub network_endpoints: Option<Vec<NetworkEndpoint>>,
}

impl client::RequestValue for NetworkEndpointGroupsDetachEndpointsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list network endpoints network endpoint groups](NetworkEndpointGroupListNetworkEndpointCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsListEndpointsRequest {
    /// Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network endpoints will not be provided.
    #[serde(rename="healthStatus")]
    
    pub health_status: Option<NetworkEndpointGroupsListEndpointsRequestHealthStatusEnum>,
}

impl client::RequestValue for NetworkEndpointGroupsListEndpointsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list network endpoints global network endpoint groups](GlobalNetworkEndpointGroupListNetworkEndpointCall) (response)
/// * [list network endpoints network endpoint groups](NetworkEndpointGroupListNetworkEndpointCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsListNetworkEndpoints {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NetworkEndpointWithHealthStatus resources.
    
    pub items: Option<Vec<NetworkEndpointWithHealthStatus>>,
    /// [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkEndpointGroupsListNetworkEndpointsWarning>,
}

impl client::ResponseResult for NetworkEndpointGroupsListNetworkEndpoints {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsScopedList {
    /// [Output Only] The list of network endpoint groups that are contained in this scope.
    #[serde(rename="networkEndpointGroups")]
    
    pub network_endpoint_groups: Option<Vec<NetworkEndpointGroup>>,
    /// [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty.
    
    pub warning: Option<NetworkEndpointGroupsScopedListWarning>,
}

impl client::Part for NetworkEndpointGroupsScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointWithHealthStatus {
    /// [Output only] The health status of network endpoint;
    
    pub healths: Option<Vec<HealthStatusForNetworkEndpoint>>,
    /// [Output only] The network endpoint;
    #[serde(rename="networkEndpoint")]
    
    pub network_endpoint: Option<NetworkEndpoint>,
}

impl client::Part for NetworkEndpointWithHealthStatus {}


/// A network interface resource attached to an instance.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [update network interface instances](InstanceUpdateNetworkInterfaceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkInterface {
    /// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
    #[serde(rename="accessConfigs")]
    
    pub access_configs: Option<Vec<AccessConfig>>,
    /// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
    #[serde(rename="aliasIpRanges")]
    
    pub alias_ip_ranges: Option<Vec<AliasIpRange>>,
    /// Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The prefix length of the primary internal IPv6 range.
    #[serde(rename="internalIpv6PrefixLength")]
    
    pub internal_ipv6_prefix_length: Option<i32>,
    /// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
    #[serde(rename="ipv6AccessConfigs")]
    
    pub ipv6_access_configs: Option<Vec<AccessConfig>>,
    /// [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
    #[serde(rename="ipv6AccessType")]
    
    pub ipv6_access_type: Option<NetworkInterfaceIpv6AccessTypeEnum>,
    /// An IPv6 internal network address for this network interface.
    #[serde(rename="ipv6Address")]
    
    pub ipv6_address: Option<String>,
    /// [Output Only] Type of the resource. Always compute#networkInterface for network interfaces.
    
    pub kind: Option<String>,
    /// [Output Only] The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7. The default interface value is nic0.
    
    pub name: Option<String>,
    /// URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default 
    
    pub network: Option<String>,
    /// The URL of the network attachment that this interface should connect to in the following format: projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}.
    #[serde(rename="networkAttachment")]
    
    pub network_attachment: Option<String>,
    /// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
    #[serde(rename="networkIP")]
    
    pub network_ip: Option<String>,
    /// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
    #[serde(rename="nicType")]
    
    pub nic_type: Option<NetworkInterfaceNicTypeEnum>,
    /// The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users.
    #[serde(rename="queueCount")]
    
    pub queue_count: Option<i32>,
    /// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
    #[serde(rename="stackType")]
    
    pub stack_type: Option<NetworkInterfaceStackTypeEnum>,
    /// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork 
    
    pub subnetwork: Option<String>,
}

impl client::RequestValue for NetworkInterface {}


/// Contains a list of networks.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list networks](NetworkListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Network resources.
    
    pub items: Option<Vec<Network>>,
    /// [Output Only] Type of resource. Always compute#networkList for lists of networks.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NetworkListWarning>,
}

impl client::ResponseResult for NetworkList {}


/// A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkPeering {
    /// This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    #[serde(rename="autoCreateRoutes")]
    
    pub auto_create_routes: Option<bool>,
    /// Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    #[serde(rename="exchangeSubnetRoutes")]
    
    pub exchange_subnet_routes: Option<bool>,
    /// Whether to export the custom routes to peer network. The default value is false.
    #[serde(rename="exportCustomRoutes")]
    
    pub export_custom_routes: Option<bool>,
    /// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
    #[serde(rename="exportSubnetRoutesWithPublicIp")]
    
    pub export_subnet_routes_with_public_ip: Option<bool>,
    /// Whether to import the custom routes from peer network. The default value is false.
    #[serde(rename="importCustomRoutes")]
    
    pub import_custom_routes: Option<bool>,
    /// Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
    #[serde(rename="importSubnetRoutesWithPublicIp")]
    
    pub import_subnet_routes_with_public_ip: Option<bool>,
    /// Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
    
    pub network: Option<String>,
    /// Maximum Transmission Unit in bytes.
    #[serde(rename="peerMtu")]
    
    pub peer_mtu: Option<i32>,
    /// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
    #[serde(rename="stackType")]
    
    pub stack_type: Option<NetworkPeeringStackTypeEnum>,
    /// [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
    
    pub state: Option<NetworkPeeringStateEnum>,
    /// [Output Only] Details about the current state of the peering.
    #[serde(rename="stateDetails")]
    
    pub state_details: Option<String>,
}

impl client::Part for NetworkPeering {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkPerformanceConfig {
    /// no description provided
    #[serde(rename="totalEgressBandwidthTier")]
    
    pub total_egress_bandwidth_tier: Option<NetworkPerformanceConfigTotalEgressBandwidthTierEnum>,
}

impl client::Part for NetworkPerformanceConfig {}


/// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkRoutingConfig {
    /// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
    #[serde(rename="routingMode")]
    
    pub routing_mode: Option<NetworkRoutingConfigRoutingModeEnum>,
}

impl client::Part for NetworkRoutingConfig {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add peering networks](NetworkAddPeeringCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworksAddPeeringRequest {
    /// This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    #[serde(rename="autoCreateRoutes")]
    
    pub auto_create_routes: Option<bool>,
    /// Name of the peering, which should conform to RFC1035.
    
    pub name: Option<String>,
    /// Network peering parameters. In order to specify route policies for peering using import and export custom routes, you must specify all peering related parameters (name, peer network, exchange_subnet_routes) in the network_peering field. The corresponding fields in NetworksAddPeeringRequest will be deprecated soon.
    #[serde(rename="networkPeering")]
    
    pub network_peering: Option<NetworkPeering>,
    /// URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
    #[serde(rename="peerNetwork")]
    
    pub peer_network: Option<String>,
}

impl client::RequestValue for NetworksAddPeeringRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get effective firewalls networks](NetworkGetEffectiveFirewallCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworksGetEffectiveFirewallsResponse {
    /// Effective firewalls from firewall policy.
    #[serde(rename="firewallPolicys")]
    
    pub firewall_policys: Option<Vec<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy>>,
    /// Effective firewalls on the network.
    
    pub firewalls: Option<Vec<Firewall>>,
}

impl client::ResponseResult for NetworksGetEffectiveFirewallsResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    /// [Output Only] Deprecated, please use short name instead. The display name of the firewall policy.
    #[serde(rename="displayName")]
    
    pub display_name: Option<String>,
    /// [Output Only] The name of the firewall policy.
    
    pub name: Option<String>,
    /// The rules that apply to the network.
    
    pub rules: Option<Vec<FirewallPolicyRule>>,
    /// [Output Only] The short name of the firewall policy.
    #[serde(rename="shortName")]
    
    pub short_name: Option<String>,
    /// [Output Only] The type of the firewall policy.
    #[serde(rename="type")]
    
    pub type_: Option<NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum>,
}

impl client::Part for NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove peering networks](NetworkRemovePeeringCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworksRemovePeeringRequest {
    /// Name of the peering, which should conform to RFC1035.
    
    pub name: Option<String>,
}

impl client::RequestValue for NetworksRemovePeeringRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [update peering networks](NetworkUpdatePeeringCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworksUpdatePeeringRequest {
    /// no description provided
    #[serde(rename="networkPeering")]
    
    pub network_peering: Option<NetworkPeering>,
}

impl client::RequestValue for NetworksUpdatePeeringRequest {}


/// Represents a sole-tenant Node Group resource. A sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add nodes node groups](NodeGroupAddNodeCall) (none)
/// * [aggregated list node groups](NodeGroupAggregatedListCall) (none)
/// * [delete node groups](NodeGroupDeleteCall) (none)
/// * [delete nodes node groups](NodeGroupDeleteNodeCall) (none)
/// * [get node groups](NodeGroupGetCall) (response)
/// * [get iam policy node groups](NodeGroupGetIamPolicyCall) (none)
/// * [insert node groups](NodeGroupInsertCall) (request)
/// * [list node groups](NodeGroupListCall) (none)
/// * [list nodes node groups](NodeGroupListNodeCall) (none)
/// * [patch node groups](NodeGroupPatchCall) (request)
/// * [set iam policy node groups](NodeGroupSetIamPolicyCall) (none)
/// * [set node template node groups](NodeGroupSetNodeTemplateCall) (none)
/// * [test iam permissions node groups](NodeGroupTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroup {
    /// Specifies how autoscaling should behave.
    #[serde(rename="autoscalingPolicy")]
    
    pub autoscaling_policy: Option<NodeGroupAutoscalingPolicy>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// no description provided
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The type of the resource. Always compute#nodeGroup for node group.
    
    pub kind: Option<String>,
    /// An opaque location hint used to place the Node close to other resources. This field is for use by internal tools that use the public API. The location hint here on the NodeGroup overrides any location_hint present in the NodeTemplate.
    #[serde(rename="locationHint")]
    
    pub location_hint: Option<String>,
    /// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see Maintenance policies.
    #[serde(rename="maintenancePolicy")]
    
    pub maintenance_policy: Option<NodeGroupMaintenancePolicyEnum>,
    /// no description provided
    #[serde(rename="maintenanceWindow")]
    
    pub maintenance_window: Option<NodeGroupMaintenanceWindow>,
    /// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// URL of the node template to create the node group from.
    #[serde(rename="nodeTemplate")]
    
    pub node_template: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Share-settings for the node group
    #[serde(rename="shareSettings")]
    
    pub share_settings: Option<ShareSettings>,
    /// [Output Only] The total number of nodes in the node group.
    
    pub size: Option<i32>,
    /// no description provided
    
    pub status: Option<NodeGroupStatusEnum>,
    /// [Output Only] The name of the zone where the node group resides, such as us-central1-a.
    
    pub zone: Option<String>,
}

impl client::RequestValue for NodeGroup {}
impl client::Resource for NodeGroup {}
impl client::ResponseResult for NodeGroup {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list node groups](NodeGroupAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NodeGroupsScopedList resources.
    
    pub items: Option<HashMap<String, NodeGroupsScopedList>>,
    /// [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeGroupAggregatedListWarning>,
}

impl client::ResponseResult for NodeGroupAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupAutoscalingPolicy {
    /// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
    #[serde(rename="maxNodes")]
    
    pub max_nodes: Option<i32>,
    /// The minimum number of nodes that the group should have.
    #[serde(rename="minNodes")]
    
    pub min_nodes: Option<i32>,
    /// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
    
    pub mode: Option<NodeGroupAutoscalingPolicyModeEnum>,
}

impl client::Part for NodeGroupAutoscalingPolicy {}


/// Contains a list of nodeGroups.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list node groups](NodeGroupListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NodeGroup resources.
    
    pub items: Option<Vec<NodeGroup>>,
    /// [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeGroupListWarning>,
}

impl client::ResponseResult for NodeGroupList {}


/// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupMaintenanceWindow {
    /// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
    #[serde(rename="maintenanceDuration")]
    
    pub maintenance_duration: Option<Duration>,
    /// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    #[serde(rename="startTime")]
    
    pub start_time: Option<String>,
}

impl client::Part for NodeGroupMaintenanceWindow {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupNode {
    /// Accelerators for this node.
    
    pub accelerators: Option<Vec<AcceleratorConfig>>,
    /// Node resources that are reserved by all instances.
    #[serde(rename="consumedResources")]
    
    pub consumed_resources: Option<InstanceConsumptionInfo>,
    /// CPU overcommit.
    #[serde(rename="cpuOvercommitType")]
    
    pub cpu_overcommit_type: Option<NodeGroupNodeCpuOvercommitTypeEnum>,
    /// Local disk configurations.
    
    pub disks: Option<Vec<LocalDisk>>,
    /// Instance data that shows consumed resources on the node.
    #[serde(rename="instanceConsumptionData")]
    
    pub instance_consumption_data: Option<Vec<InstanceConsumptionData>>,
    /// Instances scheduled on this node.
    
    pub instances: Option<Vec<String>>,
    /// The name of the node.
    
    pub name: Option<String>,
    /// The type of this node.
    #[serde(rename="nodeType")]
    
    pub node_type: Option<String>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// Binding properties for the physical server.
    #[serde(rename="serverBinding")]
    
    pub server_binding: Option<ServerBinding>,
    /// Server ID associated with this node.
    #[serde(rename="serverId")]
    
    pub server_id: Option<String>,
    /// no description provided
    
    pub status: Option<NodeGroupNodeStatusEnum>,
    /// Total amount of available resources on the node.
    #[serde(rename="totalResources")]
    
    pub total_resources: Option<InstanceConsumptionInfo>,
}

impl client::Part for NodeGroupNode {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add nodes node groups](NodeGroupAddNodeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsAddNodesRequest {
    /// Count of additional nodes to be added to the node group.
    #[serde(rename="additionalNodeCount")]
    
    pub additional_node_count: Option<i32>,
}

impl client::RequestValue for NodeGroupsAddNodesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete nodes node groups](NodeGroupDeleteNodeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsDeleteNodesRequest {
    /// Names of the nodes to delete.
    
    pub nodes: Option<Vec<String>>,
}

impl client::RequestValue for NodeGroupsDeleteNodesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list nodes node groups](NodeGroupListNodeCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsListNodes {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Node resources.
    
    pub items: Option<Vec<NodeGroupNode>>,
    /// [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeGroupsListNodesWarning>,
}

impl client::ResponseResult for NodeGroupsListNodes {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsScopedList {
    /// [Output Only] A list of node groups contained in this scope.
    #[serde(rename="nodeGroups")]
    
    pub node_groups: Option<Vec<NodeGroup>>,
    /// [Output Only] An informational warning that appears when the nodeGroup list is empty.
    
    pub warning: Option<NodeGroupsScopedListWarning>,
}

impl client::Part for NodeGroupsScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set node template node groups](NodeGroupSetNodeTemplateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsSetNodeTemplateRequest {
    /// Full or partial URL of the node template resource to be updated for this node group.
    #[serde(rename="nodeTemplate")]
    
    pub node_template: Option<String>,
}

impl client::RequestValue for NodeGroupsSetNodeTemplateRequest {}


/// Represent a sole-tenant Node Template resource. You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list node templates](NodeTemplateAggregatedListCall) (none)
/// * [delete node templates](NodeTemplateDeleteCall) (none)
/// * [get node templates](NodeTemplateGetCall) (response)
/// * [get iam policy node templates](NodeTemplateGetIamPolicyCall) (none)
/// * [insert node templates](NodeTemplateInsertCall) (request)
/// * [list node templates](NodeTemplateListCall) (none)
/// * [set iam policy node templates](NodeTemplateSetIamPolicyCall) (none)
/// * [test iam permissions node templates](NodeTemplateTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplate {
    /// no description provided
    
    pub accelerators: Option<Vec<AcceleratorConfig>>,
    /// CPU overcommit.
    #[serde(rename="cpuOvercommitType")]
    
    pub cpu_overcommit_type: Option<NodeTemplateCpuOvercommitTypeEnum>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// no description provided
    
    pub disks: Option<Vec<LocalDisk>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The type of the resource. Always compute#nodeTemplate for node templates.
    
    pub kind: Option<String>,
    /// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Labels to use for node affinity, which will be used in instance scheduling.
    #[serde(rename="nodeAffinityLabels")]
    
    pub node_affinity_labels: Option<HashMap<String, String>>,
    /// The node type to use for nodes group that are created from this template.
    #[serde(rename="nodeType")]
    
    pub node_type: Option<String>,
    /// The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. This field is mutually exclusive with the node_type property; you can only define one or the other, but not both.
    #[serde(rename="nodeTypeFlexibility")]
    
    pub node_type_flexibility: Option<NodeTemplateNodeTypeFlexibility>,
    /// [Output Only] The name of the region where the node template resides, such as us-central1.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Sets the binding properties for the physical server. Valid values include: - *[Default]* RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server - RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible See Sole-tenant node options for more information.
    #[serde(rename="serverBinding")]
    
    pub server_binding: Option<ServerBinding>,
    /// [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
    
    pub status: Option<NodeTemplateStatusEnum>,
    /// [Output Only] An optional, human-readable explanation of the status.
    #[serde(rename="statusMessage")]
    
    pub status_message: Option<String>,
}

impl client::RequestValue for NodeTemplate {}
impl client::Resource for NodeTemplate {}
impl client::ResponseResult for NodeTemplate {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list node templates](NodeTemplateAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NodeTemplatesScopedList resources.
    
    pub items: Option<HashMap<String, NodeTemplatesScopedList>>,
    /// [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeTemplateAggregatedListWarning>,
}

impl client::ResponseResult for NodeTemplateAggregatedList {}


/// Contains a list of node templates.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list node templates](NodeTemplateListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NodeTemplate resources.
    
    pub items: Option<Vec<NodeTemplate>>,
    /// [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeTemplateListWarning>,
}

impl client::ResponseResult for NodeTemplateList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateNodeTypeFlexibility {
    /// no description provided
    
    pub cpus: Option<String>,
    /// no description provided
    #[serde(rename="localSsd")]
    
    pub local_ssd: Option<String>,
    /// no description provided
    
    pub memory: Option<String>,
}

impl client::Part for NodeTemplateNodeTypeFlexibility {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplatesScopedList {
    /// [Output Only] A list of node templates contained in this scope.
    #[serde(rename="nodeTemplates")]
    
    pub node_templates: Option<Vec<NodeTemplate>>,
    /// [Output Only] An informational warning that appears when the node templates list is empty.
    
    pub warning: Option<NodeTemplatesScopedListWarning>,
}

impl client::Part for NodeTemplatesScopedList {}


/// Represent a sole-tenant Node Type resource. Each node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list node types](NodeTypeAggregatedListCall) (none)
/// * [get node types](NodeTypeGetCall) (response)
/// * [list node types](NodeTypeListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeType {
    /// [Output Only] The CPU platform used by this node type.
    #[serde(rename="cpuPlatform")]
    
    pub cpu_platform: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] The deprecation status associated with this node type.
    
    pub deprecated: Option<DeprecationStatus>,
    /// [Output Only] An optional textual description of the resource.
    
    pub description: Option<String>,
    /// [Output Only] The number of virtual CPUs that are available to the node type.
    #[serde(rename="guestCpus")]
    
    pub guest_cpus: Option<i32>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The type of the resource. Always compute#nodeType for node types.
    
    pub kind: Option<String>,
    /// [Output Only] Local SSD available to the node type, defined in GB.
    #[serde(rename="localSsdGb")]
    
    pub local_ssd_gb: Option<i32>,
    /// [Output Only] The amount of physical memory available to the node type, defined in MB.
    #[serde(rename="memoryMb")]
    
    pub memory_mb: Option<i32>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The name of the zone where the node type resides, such as us-central1-a.
    
    pub zone: Option<String>,
}

impl client::Resource for NodeType {}
impl client::ResponseResult for NodeType {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list node types](NodeTypeAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypeAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NodeTypesScopedList resources.
    
    pub items: Option<HashMap<String, NodeTypesScopedList>>,
    /// [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeTypeAggregatedListWarning>,
}

impl client::ResponseResult for NodeTypeAggregatedList {}


/// Contains a list of node types.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list node types](NodeTypeListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypeList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NodeType resources.
    
    pub items: Option<Vec<NodeType>>,
    /// [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NodeTypeListWarning>,
}

impl client::ResponseResult for NodeTypeList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypesScopedList {
    /// [Output Only] A list of node types contained in this scope.
    #[serde(rename="nodeTypes")]
    
    pub node_types: Option<Vec<NodeType>>,
    /// [Output Only] An informational warning that appears when the node types list is empty.
    
    pub warning: Option<NodeTypesScopedListWarning>,
}

impl client::Part for NodeTypesScopedList {}


/// Represents a notification endpoint. A notification endpoint resource defines an endpoint to receive notifications when there are status changes detected by the associated health check service. For more information, see Health checks overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region notification endpoints](RegionNotificationEndpointGetCall) (response)
/// * [insert region notification endpoints](RegionNotificationEndpointInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NotificationEndpoint {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Settings of the gRPC notification endpoint including the endpoint URL and the retry duration.
    #[serde(rename="grpcSettings")]
    
    pub grpc_settings: Option<NotificationEndpointGrpcSettings>,
    /// [Output Only] A unique identifier for this resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::RequestValue for NotificationEndpoint {}
impl client::ResponseResult for NotificationEndpoint {}


/// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NotificationEndpointGrpcSettings {
    /// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
    
    pub authority: Option<String>,
    /// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
    
    pub endpoint: Option<String>,
    /// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
    #[serde(rename="payloadName")]
    
    pub payload_name: Option<String>,
    /// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed. Can only be set for regional notification endpoints.
    #[serde(rename="resendInterval")]
    
    pub resend_interval: Option<Duration>,
    /// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
    #[serde(rename="retryDurationSec")]
    
    pub retry_duration_sec: Option<u32>,
}

impl client::Part for NotificationEndpointGrpcSettings {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region notification endpoints](RegionNotificationEndpointListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NotificationEndpointList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of NotificationEndpoint resources.
    
    pub items: Option<Vec<NotificationEndpoint>>,
    /// [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<NotificationEndpointListWarning>,
}

impl client::ResponseResult for NotificationEndpointList {}


/// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/globalOperations) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionOperations) * [Zonal](https://cloud.google.com/compute/docs/reference/rest/v1/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete addresses](AddressDeleteCall) (response)
/// * [insert addresses](AddressInsertCall) (response)
/// * [set labels addresses](AddressSetLabelCall) (response)
/// * [delete autoscalers](AutoscalerDeleteCall) (response)
/// * [insert autoscalers](AutoscalerInsertCall) (response)
/// * [patch autoscalers](AutoscalerPatchCall) (response)
/// * [update autoscalers](AutoscalerUpdateCall) (response)
/// * [add signed url key backend buckets](BackendBucketAddSignedUrlKeyCall) (response)
/// * [delete backend buckets](BackendBucketDeleteCall) (response)
/// * [delete signed url key backend buckets](BackendBucketDeleteSignedUrlKeyCall) (response)
/// * [insert backend buckets](BackendBucketInsertCall) (response)
/// * [patch backend buckets](BackendBucketPatchCall) (response)
/// * [set edge security policy backend buckets](BackendBucketSetEdgeSecurityPolicyCall) (response)
/// * [update backend buckets](BackendBucketUpdateCall) (response)
/// * [add signed url key backend services](BackendServiceAddSignedUrlKeyCall) (response)
/// * [delete backend services](BackendServiceDeleteCall) (response)
/// * [delete signed url key backend services](BackendServiceDeleteSignedUrlKeyCall) (response)
/// * [insert backend services](BackendServiceInsertCall) (response)
/// * [patch backend services](BackendServicePatchCall) (response)
/// * [set edge security policy backend services](BackendServiceSetEdgeSecurityPolicyCall) (response)
/// * [set security policy backend services](BackendServiceSetSecurityPolicyCall) (response)
/// * [update backend services](BackendServiceUpdateCall) (response)
/// * [add resource policies disks](DiskAddResourcePolicyCall) (response)
/// * [create snapshot disks](DiskCreateSnapshotCall) (response)
/// * [delete disks](DiskDeleteCall) (response)
/// * [insert disks](DiskInsertCall) (response)
/// * [remove resource policies disks](DiskRemoveResourcePolicyCall) (response)
/// * [resize disks](DiskResizeCall) (response)
/// * [set labels disks](DiskSetLabelCall) (response)
/// * [delete external vpn gateways](ExternalVpnGatewayDeleteCall) (response)
/// * [insert external vpn gateways](ExternalVpnGatewayInsertCall) (response)
/// * [set labels external vpn gateways](ExternalVpnGatewaySetLabelCall) (response)
/// * [add association firewall policies](FirewallPolicyAddAssociationCall) (response)
/// * [add rule firewall policies](FirewallPolicyAddRuleCall) (response)
/// * [clone rules firewall policies](FirewallPolicyCloneRuleCall) (response)
/// * [delete firewall policies](FirewallPolicyDeleteCall) (response)
/// * [insert firewall policies](FirewallPolicyInsertCall) (response)
/// * [move firewall policies](FirewallPolicyMoveCall) (response)
/// * [patch firewall policies](FirewallPolicyPatchCall) (response)
/// * [patch rule firewall policies](FirewallPolicyPatchRuleCall) (response)
/// * [remove association firewall policies](FirewallPolicyRemoveAssociationCall) (response)
/// * [remove rule firewall policies](FirewallPolicyRemoveRuleCall) (response)
/// * [delete firewalls](FirewallDeleteCall) (response)
/// * [insert firewalls](FirewallInsertCall) (response)
/// * [patch firewalls](FirewallPatchCall) (response)
/// * [update firewalls](FirewallUpdateCall) (response)
/// * [delete forwarding rules](ForwardingRuleDeleteCall) (response)
/// * [insert forwarding rules](ForwardingRuleInsertCall) (response)
/// * [patch forwarding rules](ForwardingRulePatchCall) (response)
/// * [set labels forwarding rules](ForwardingRuleSetLabelCall) (response)
/// * [set target forwarding rules](ForwardingRuleSetTargetCall) (response)
/// * [delete global addresses](GlobalAddressDeleteCall) (response)
/// * [insert global addresses](GlobalAddressInsertCall) (response)
/// * [set labels global addresses](GlobalAddressSetLabelCall) (response)
/// * [delete global forwarding rules](GlobalForwardingRuleDeleteCall) (response)
/// * [insert global forwarding rules](GlobalForwardingRuleInsertCall) (response)
/// * [patch global forwarding rules](GlobalForwardingRulePatchCall) (response)
/// * [set labels global forwarding rules](GlobalForwardingRuleSetLabelCall) (response)
/// * [set target global forwarding rules](GlobalForwardingRuleSetTargetCall) (response)
/// * [attach network endpoints global network endpoint groups](GlobalNetworkEndpointGroupAttachNetworkEndpointCall) (response)
/// * [delete global network endpoint groups](GlobalNetworkEndpointGroupDeleteCall) (response)
/// * [detach network endpoints global network endpoint groups](GlobalNetworkEndpointGroupDetachNetworkEndpointCall) (response)
/// * [insert global network endpoint groups](GlobalNetworkEndpointGroupInsertCall) (response)
/// * [get global operations](GlobalOperationGetCall) (response)
/// * [wait global operations](GlobalOperationWaitCall) (response)
/// * [get global organization operations](GlobalOrganizationOperationGetCall) (response)
/// * [delete global public delegated prefixes](GlobalPublicDelegatedPrefixDeleteCall) (response)
/// * [insert global public delegated prefixes](GlobalPublicDelegatedPrefixInsertCall) (response)
/// * [patch global public delegated prefixes](GlobalPublicDelegatedPrefixPatchCall) (response)
/// * [delete health checks](HealthCheckDeleteCall) (response)
/// * [insert health checks](HealthCheckInsertCall) (response)
/// * [patch health checks](HealthCheckPatchCall) (response)
/// * [update health checks](HealthCheckUpdateCall) (response)
/// * [delete http health checks](HttpHealthCheckDeleteCall) (response)
/// * [insert http health checks](HttpHealthCheckInsertCall) (response)
/// * [patch http health checks](HttpHealthCheckPatchCall) (response)
/// * [update http health checks](HttpHealthCheckUpdateCall) (response)
/// * [delete https health checks](HttpsHealthCheckDeleteCall) (response)
/// * [insert https health checks](HttpsHealthCheckInsertCall) (response)
/// * [patch https health checks](HttpsHealthCheckPatchCall) (response)
/// * [update https health checks](HttpsHealthCheckUpdateCall) (response)
/// * [delete images](ImageDeleteCall) (response)
/// * [deprecate images](ImageDeprecateCall) (response)
/// * [insert images](ImageInsertCall) (response)
/// * [patch images](ImagePatchCall) (response)
/// * [set labels images](ImageSetLabelCall) (response)
/// * [abandon instances instance group managers](InstanceGroupManagerAbandonInstanceCall) (response)
/// * [apply updates to instances instance group managers](InstanceGroupManagerApplyUpdatesToInstanceCall) (response)
/// * [create instances instance group managers](InstanceGroupManagerCreateInstanceCall) (response)
/// * [delete instance group managers](InstanceGroupManagerDeleteCall) (response)
/// * [delete instances instance group managers](InstanceGroupManagerDeleteInstanceCall) (response)
/// * [delete per instance configs instance group managers](InstanceGroupManagerDeletePerInstanceConfigCall) (response)
/// * [insert instance group managers](InstanceGroupManagerInsertCall) (response)
/// * [patch instance group managers](InstanceGroupManagerPatchCall) (response)
/// * [patch per instance configs instance group managers](InstanceGroupManagerPatchPerInstanceConfigCall) (response)
/// * [recreate instances instance group managers](InstanceGroupManagerRecreateInstanceCall) (response)
/// * [resize instance group managers](InstanceGroupManagerResizeCall) (response)
/// * [set instance template instance group managers](InstanceGroupManagerSetInstanceTemplateCall) (response)
/// * [set target pools instance group managers](InstanceGroupManagerSetTargetPoolCall) (response)
/// * [update per instance configs instance group managers](InstanceGroupManagerUpdatePerInstanceConfigCall) (response)
/// * [add instances instance groups](InstanceGroupAddInstanceCall) (response)
/// * [delete instance groups](InstanceGroupDeleteCall) (response)
/// * [insert instance groups](InstanceGroupInsertCall) (response)
/// * [remove instances instance groups](InstanceGroupRemoveInstanceCall) (response)
/// * [set named ports instance groups](InstanceGroupSetNamedPortCall) (response)
/// * [delete instance templates](InstanceTemplateDeleteCall) (response)
/// * [insert instance templates](InstanceTemplateInsertCall) (response)
/// * [add access config instances](InstanceAddAccessConfigCall) (response)
/// * [add resource policies instances](InstanceAddResourcePolicyCall) (response)
/// * [attach disk instances](InstanceAttachDiskCall) (response)
/// * [bulk insert instances](InstanceBulkInsertCall) (response)
/// * [delete instances](InstanceDeleteCall) (response)
/// * [delete access config instances](InstanceDeleteAccessConfigCall) (response)
/// * [detach disk instances](InstanceDetachDiskCall) (response)
/// * [insert instances](InstanceInsertCall) (response)
/// * [remove resource policies instances](InstanceRemoveResourcePolicyCall) (response)
/// * [reset instances](InstanceResetCall) (response)
/// * [resume instances](InstanceResumeCall) (response)
/// * [set deletion protection instances](InstanceSetDeletionProtectionCall) (response)
/// * [set disk auto delete instances](InstanceSetDiskAutoDeleteCall) (response)
/// * [set labels instances](InstanceSetLabelCall) (response)
/// * [set machine resources instances](InstanceSetMachineResourceCall) (response)
/// * [set machine type instances](InstanceSetMachineTypeCall) (response)
/// * [set metadata instances](InstanceSetMetadataCall) (response)
/// * [set min cpu platform instances](InstanceSetMinCpuPlatformCall) (response)
/// * [set scheduling instances](InstanceSetSchedulingCall) (response)
/// * [set service account instances](InstanceSetServiceAccountCall) (response)
/// * [set shielded instance integrity policy instances](InstanceSetShieldedInstanceIntegrityPolicyCall) (response)
/// * [set tags instances](InstanceSetTagCall) (response)
/// * [simulate maintenance event instances](InstanceSimulateMaintenanceEventCall) (response)
/// * [start instances](InstanceStartCall) (response)
/// * [start with encryption key instances](InstanceStartWithEncryptionKeyCall) (response)
/// * [stop instances](InstanceStopCall) (response)
/// * [suspend instances](InstanceSuspendCall) (response)
/// * [update instances](InstanceUpdateCall) (response)
/// * [update access config instances](InstanceUpdateAccessConfigCall) (response)
/// * [update display device instances](InstanceUpdateDisplayDeviceCall) (response)
/// * [update network interface instances](InstanceUpdateNetworkInterfaceCall) (response)
/// * [update shielded instance config instances](InstanceUpdateShieldedInstanceConfigCall) (response)
/// * [delete interconnect attachments](InterconnectAttachmentDeleteCall) (response)
/// * [insert interconnect attachments](InterconnectAttachmentInsertCall) (response)
/// * [patch interconnect attachments](InterconnectAttachmentPatchCall) (response)
/// * [set labels interconnect attachments](InterconnectAttachmentSetLabelCall) (response)
/// * [delete interconnects](InterconnectDeleteCall) (response)
/// * [insert interconnects](InterconnectInsertCall) (response)
/// * [patch interconnects](InterconnectPatchCall) (response)
/// * [set labels interconnects](InterconnectSetLabelCall) (response)
/// * [delete licenses](LicenseDeleteCall) (response)
/// * [insert licenses](LicenseInsertCall) (response)
/// * [delete machine images](MachineImageDeleteCall) (response)
/// * [insert machine images](MachineImageInsertCall) (response)
/// * [delete network attachments](NetworkAttachmentDeleteCall) (response)
/// * [insert network attachments](NetworkAttachmentInsertCall) (response)
/// * [delete network edge security services](NetworkEdgeSecurityServiceDeleteCall) (response)
/// * [insert network edge security services](NetworkEdgeSecurityServiceInsertCall) (response)
/// * [patch network edge security services](NetworkEdgeSecurityServicePatchCall) (response)
/// * [attach network endpoints network endpoint groups](NetworkEndpointGroupAttachNetworkEndpointCall) (response)
/// * [delete network endpoint groups](NetworkEndpointGroupDeleteCall) (response)
/// * [detach network endpoints network endpoint groups](NetworkEndpointGroupDetachNetworkEndpointCall) (response)
/// * [insert network endpoint groups](NetworkEndpointGroupInsertCall) (response)
/// * [add association network firewall policies](NetworkFirewallPolicyAddAssociationCall) (response)
/// * [add rule network firewall policies](NetworkFirewallPolicyAddRuleCall) (response)
/// * [clone rules network firewall policies](NetworkFirewallPolicyCloneRuleCall) (response)
/// * [delete network firewall policies](NetworkFirewallPolicyDeleteCall) (response)
/// * [insert network firewall policies](NetworkFirewallPolicyInsertCall) (response)
/// * [patch network firewall policies](NetworkFirewallPolicyPatchCall) (response)
/// * [patch rule network firewall policies](NetworkFirewallPolicyPatchRuleCall) (response)
/// * [remove association network firewall policies](NetworkFirewallPolicyRemoveAssociationCall) (response)
/// * [remove rule network firewall policies](NetworkFirewallPolicyRemoveRuleCall) (response)
/// * [add peering networks](NetworkAddPeeringCall) (response)
/// * [delete networks](NetworkDeleteCall) (response)
/// * [insert networks](NetworkInsertCall) (response)
/// * [patch networks](NetworkPatchCall) (response)
/// * [remove peering networks](NetworkRemovePeeringCall) (response)
/// * [switch to custom mode networks](NetworkSwitchToCustomModeCall) (response)
/// * [update peering networks](NetworkUpdatePeeringCall) (response)
/// * [add nodes node groups](NodeGroupAddNodeCall) (response)
/// * [delete node groups](NodeGroupDeleteCall) (response)
/// * [delete nodes node groups](NodeGroupDeleteNodeCall) (response)
/// * [insert node groups](NodeGroupInsertCall) (response)
/// * [patch node groups](NodeGroupPatchCall) (response)
/// * [set node template node groups](NodeGroupSetNodeTemplateCall) (response)
/// * [delete node templates](NodeTemplateDeleteCall) (response)
/// * [insert node templates](NodeTemplateInsertCall) (response)
/// * [delete packet mirrorings](PacketMirroringDeleteCall) (response)
/// * [insert packet mirrorings](PacketMirroringInsertCall) (response)
/// * [patch packet mirrorings](PacketMirroringPatchCall) (response)
/// * [disable xpn host projects](ProjectDisableXpnHostCall) (response)
/// * [disable xpn resource projects](ProjectDisableXpnResourceCall) (response)
/// * [enable xpn host projects](ProjectEnableXpnHostCall) (response)
/// * [enable xpn resource projects](ProjectEnableXpnResourceCall) (response)
/// * [move disk projects](ProjectMoveDiskCall) (response)
/// * [move instance projects](ProjectMoveInstanceCall) (response)
/// * [set common instance metadata projects](ProjectSetCommonInstanceMetadataCall) (response)
/// * [set default network tier projects](ProjectSetDefaultNetworkTierCall) (response)
/// * [set usage export bucket projects](ProjectSetUsageExportBucketCall) (response)
/// * [delete public advertised prefixes](PublicAdvertisedPrefixDeleteCall) (response)
/// * [insert public advertised prefixes](PublicAdvertisedPrefixInsertCall) (response)
/// * [patch public advertised prefixes](PublicAdvertisedPrefixPatchCall) (response)
/// * [delete public delegated prefixes](PublicDelegatedPrefixDeleteCall) (response)
/// * [insert public delegated prefixes](PublicDelegatedPrefixInsertCall) (response)
/// * [patch public delegated prefixes](PublicDelegatedPrefixPatchCall) (response)
/// * [delete region autoscalers](RegionAutoscalerDeleteCall) (response)
/// * [insert region autoscalers](RegionAutoscalerInsertCall) (response)
/// * [patch region autoscalers](RegionAutoscalerPatchCall) (response)
/// * [update region autoscalers](RegionAutoscalerUpdateCall) (response)
/// * [delete region backend services](RegionBackendServiceDeleteCall) (response)
/// * [insert region backend services](RegionBackendServiceInsertCall) (response)
/// * [patch region backend services](RegionBackendServicePatchCall) (response)
/// * [update region backend services](RegionBackendServiceUpdateCall) (response)
/// * [insert region commitments](RegionCommitmentInsertCall) (response)
/// * [update region commitments](RegionCommitmentUpdateCall) (response)
/// * [add resource policies region disks](RegionDiskAddResourcePolicyCall) (response)
/// * [create snapshot region disks](RegionDiskCreateSnapshotCall) (response)
/// * [delete region disks](RegionDiskDeleteCall) (response)
/// * [insert region disks](RegionDiskInsertCall) (response)
/// * [remove resource policies region disks](RegionDiskRemoveResourcePolicyCall) (response)
/// * [resize region disks](RegionDiskResizeCall) (response)
/// * [set labels region disks](RegionDiskSetLabelCall) (response)
/// * [delete region health check services](RegionHealthCheckServiceDeleteCall) (response)
/// * [insert region health check services](RegionHealthCheckServiceInsertCall) (response)
/// * [patch region health check services](RegionHealthCheckServicePatchCall) (response)
/// * [delete region health checks](RegionHealthCheckDeleteCall) (response)
/// * [insert region health checks](RegionHealthCheckInsertCall) (response)
/// * [patch region health checks](RegionHealthCheckPatchCall) (response)
/// * [update region health checks](RegionHealthCheckUpdateCall) (response)
/// * [abandon instances region instance group managers](RegionInstanceGroupManagerAbandonInstanceCall) (response)
/// * [apply updates to instances region instance group managers](RegionInstanceGroupManagerApplyUpdatesToInstanceCall) (response)
/// * [create instances region instance group managers](RegionInstanceGroupManagerCreateInstanceCall) (response)
/// * [delete region instance group managers](RegionInstanceGroupManagerDeleteCall) (response)
/// * [delete instances region instance group managers](RegionInstanceGroupManagerDeleteInstanceCall) (response)
/// * [delete per instance configs region instance group managers](RegionInstanceGroupManagerDeletePerInstanceConfigCall) (response)
/// * [insert region instance group managers](RegionInstanceGroupManagerInsertCall) (response)
/// * [patch region instance group managers](RegionInstanceGroupManagerPatchCall) (response)
/// * [patch per instance configs region instance group managers](RegionInstanceGroupManagerPatchPerInstanceConfigCall) (response)
/// * [recreate instances region instance group managers](RegionInstanceGroupManagerRecreateInstanceCall) (response)
/// * [resize region instance group managers](RegionInstanceGroupManagerResizeCall) (response)
/// * [set instance template region instance group managers](RegionInstanceGroupManagerSetInstanceTemplateCall) (response)
/// * [set target pools region instance group managers](RegionInstanceGroupManagerSetTargetPoolCall) (response)
/// * [update per instance configs region instance group managers](RegionInstanceGroupManagerUpdatePerInstanceConfigCall) (response)
/// * [set named ports region instance groups](RegionInstanceGroupSetNamedPortCall) (response)
/// * [bulk insert region instances](RegionInstanceBulkInsertCall) (response)
/// * [delete region network endpoint groups](RegionNetworkEndpointGroupDeleteCall) (response)
/// * [insert region network endpoint groups](RegionNetworkEndpointGroupInsertCall) (response)
/// * [add association region network firewall policies](RegionNetworkFirewallPolicyAddAssociationCall) (response)
/// * [add rule region network firewall policies](RegionNetworkFirewallPolicyAddRuleCall) (response)
/// * [clone rules region network firewall policies](RegionNetworkFirewallPolicyCloneRuleCall) (response)
/// * [delete region network firewall policies](RegionNetworkFirewallPolicyDeleteCall) (response)
/// * [insert region network firewall policies](RegionNetworkFirewallPolicyInsertCall) (response)
/// * [patch region network firewall policies](RegionNetworkFirewallPolicyPatchCall) (response)
/// * [patch rule region network firewall policies](RegionNetworkFirewallPolicyPatchRuleCall) (response)
/// * [remove association region network firewall policies](RegionNetworkFirewallPolicyRemoveAssociationCall) (response)
/// * [remove rule region network firewall policies](RegionNetworkFirewallPolicyRemoveRuleCall) (response)
/// * [delete region notification endpoints](RegionNotificationEndpointDeleteCall) (response)
/// * [insert region notification endpoints](RegionNotificationEndpointInsertCall) (response)
/// * [get region operations](RegionOperationGetCall) (response)
/// * [wait region operations](RegionOperationWaitCall) (response)
/// * [delete region security policies](RegionSecurityPolicyDeleteCall) (response)
/// * [insert region security policies](RegionSecurityPolicyInsertCall) (response)
/// * [patch region security policies](RegionSecurityPolicyPatchCall) (response)
/// * [delete region ssl certificates](RegionSslCertificateDeleteCall) (response)
/// * [insert region ssl certificates](RegionSslCertificateInsertCall) (response)
/// * [delete region ssl policies](RegionSslPolicyDeleteCall) (response)
/// * [insert region ssl policies](RegionSslPolicyInsertCall) (response)
/// * [patch region ssl policies](RegionSslPolicyPatchCall) (response)
/// * [delete region target http proxies](RegionTargetHttpProxyDeleteCall) (response)
/// * [insert region target http proxies](RegionTargetHttpProxyInsertCall) (response)
/// * [set url map region target http proxies](RegionTargetHttpProxySetUrlMapCall) (response)
/// * [delete region target https proxies](RegionTargetHttpsProxyDeleteCall) (response)
/// * [insert region target https proxies](RegionTargetHttpsProxyInsertCall) (response)
/// * [patch region target https proxies](RegionTargetHttpsProxyPatchCall) (response)
/// * [set ssl certificates region target https proxies](RegionTargetHttpsProxySetSslCertificateCall) (response)
/// * [set url map region target https proxies](RegionTargetHttpsProxySetUrlMapCall) (response)
/// * [delete region target tcp proxies](RegionTargetTcpProxyDeleteCall) (response)
/// * [insert region target tcp proxies](RegionTargetTcpProxyInsertCall) (response)
/// * [delete region url maps](RegionUrlMapDeleteCall) (response)
/// * [insert region url maps](RegionUrlMapInsertCall) (response)
/// * [patch region url maps](RegionUrlMapPatchCall) (response)
/// * [update region url maps](RegionUrlMapUpdateCall) (response)
/// * [delete reservations](ReservationDeleteCall) (response)
/// * [insert reservations](ReservationInsertCall) (response)
/// * [resize reservations](ReservationResizeCall) (response)
/// * [update reservations](ReservationUpdateCall) (response)
/// * [delete resource policies](ResourcePolicyDeleteCall) (response)
/// * [insert resource policies](ResourcePolicyInsertCall) (response)
/// * [delete routers](RouterDeleteCall) (response)
/// * [insert routers](RouterInsertCall) (response)
/// * [patch routers](RouterPatchCall) (response)
/// * [update routers](RouterUpdateCall) (response)
/// * [delete routes](RouteDeleteCall) (response)
/// * [insert routes](RouteInsertCall) (response)
/// * [add rule security policies](SecurityPolicyAddRuleCall) (response)
/// * [delete security policies](SecurityPolicyDeleteCall) (response)
/// * [insert security policies](SecurityPolicyInsertCall) (response)
/// * [patch security policies](SecurityPolicyPatchCall) (response)
/// * [patch rule security policies](SecurityPolicyPatchRuleCall) (response)
/// * [remove rule security policies](SecurityPolicyRemoveRuleCall) (response)
/// * [set labels security policies](SecurityPolicySetLabelCall) (response)
/// * [delete service attachments](ServiceAttachmentDeleteCall) (response)
/// * [insert service attachments](ServiceAttachmentInsertCall) (response)
/// * [patch service attachments](ServiceAttachmentPatchCall) (response)
/// * [delete snapshots](SnapshotDeleteCall) (response)
/// * [insert snapshots](SnapshotInsertCall) (response)
/// * [set labels snapshots](SnapshotSetLabelCall) (response)
/// * [delete ssl certificates](SslCertificateDeleteCall) (response)
/// * [insert ssl certificates](SslCertificateInsertCall) (response)
/// * [delete ssl policies](SslPolicyDeleteCall) (response)
/// * [insert ssl policies](SslPolicyInsertCall) (response)
/// * [patch ssl policies](SslPolicyPatchCall) (response)
/// * [delete subnetworks](SubnetworkDeleteCall) (response)
/// * [expand ip cidr range subnetworks](SubnetworkExpandIpCidrRangeCall) (response)
/// * [insert subnetworks](SubnetworkInsertCall) (response)
/// * [patch subnetworks](SubnetworkPatchCall) (response)
/// * [set private ip google access subnetworks](SubnetworkSetPrivateIpGoogleAccesCall) (response)
/// * [delete target grpc proxies](TargetGrpcProxyDeleteCall) (response)
/// * [insert target grpc proxies](TargetGrpcProxyInsertCall) (response)
/// * [patch target grpc proxies](TargetGrpcProxyPatchCall) (response)
/// * [delete target http proxies](TargetHttpProxyDeleteCall) (response)
/// * [insert target http proxies](TargetHttpProxyInsertCall) (response)
/// * [patch target http proxies](TargetHttpProxyPatchCall) (response)
/// * [set url map target http proxies](TargetHttpProxySetUrlMapCall) (response)
/// * [delete target https proxies](TargetHttpsProxyDeleteCall) (response)
/// * [insert target https proxies](TargetHttpsProxyInsertCall) (response)
/// * [patch target https proxies](TargetHttpsProxyPatchCall) (response)
/// * [set certificate map target https proxies](TargetHttpsProxySetCertificateMapCall) (response)
/// * [set quic override target https proxies](TargetHttpsProxySetQuicOverrideCall) (response)
/// * [set ssl certificates target https proxies](TargetHttpsProxySetSslCertificateCall) (response)
/// * [set ssl policy target https proxies](TargetHttpsProxySetSslPolicyCall) (response)
/// * [set url map target https proxies](TargetHttpsProxySetUrlMapCall) (response)
/// * [delete target instances](TargetInstanceDeleteCall) (response)
/// * [insert target instances](TargetInstanceInsertCall) (response)
/// * [add health check target pools](TargetPoolAddHealthCheckCall) (response)
/// * [add instance target pools](TargetPoolAddInstanceCall) (response)
/// * [delete target pools](TargetPoolDeleteCall) (response)
/// * [insert target pools](TargetPoolInsertCall) (response)
/// * [remove health check target pools](TargetPoolRemoveHealthCheckCall) (response)
/// * [remove instance target pools](TargetPoolRemoveInstanceCall) (response)
/// * [set backup target pools](TargetPoolSetBackupCall) (response)
/// * [delete target ssl proxies](TargetSslProxyDeleteCall) (response)
/// * [insert target ssl proxies](TargetSslProxyInsertCall) (response)
/// * [set backend service target ssl proxies](TargetSslProxySetBackendServiceCall) (response)
/// * [set certificate map target ssl proxies](TargetSslProxySetCertificateMapCall) (response)
/// * [set proxy header target ssl proxies](TargetSslProxySetProxyHeaderCall) (response)
/// * [set ssl certificates target ssl proxies](TargetSslProxySetSslCertificateCall) (response)
/// * [set ssl policy target ssl proxies](TargetSslProxySetSslPolicyCall) (response)
/// * [delete target tcp proxies](TargetTcpProxyDeleteCall) (response)
/// * [insert target tcp proxies](TargetTcpProxyInsertCall) (response)
/// * [set backend service target tcp proxies](TargetTcpProxySetBackendServiceCall) (response)
/// * [set proxy header target tcp proxies](TargetTcpProxySetProxyHeaderCall) (response)
/// * [delete target vpn gateways](TargetVpnGatewayDeleteCall) (response)
/// * [insert target vpn gateways](TargetVpnGatewayInsertCall) (response)
/// * [set labels target vpn gateways](TargetVpnGatewaySetLabelCall) (response)
/// * [delete url maps](UrlMapDeleteCall) (response)
/// * [insert url maps](UrlMapInsertCall) (response)
/// * [invalidate cache url maps](UrlMapInvalidateCacheCall) (response)
/// * [patch url maps](UrlMapPatchCall) (response)
/// * [update url maps](UrlMapUpdateCall) (response)
/// * [delete vpn gateways](VpnGatewayDeleteCall) (response)
/// * [insert vpn gateways](VpnGatewayInsertCall) (response)
/// * [set labels vpn gateways](VpnGatewaySetLabelCall) (response)
/// * [delete vpn tunnels](VpnTunnelDeleteCall) (response)
/// * [insert vpn tunnels](VpnTunnelInsertCall) (response)
/// * [set labels vpn tunnels](VpnTunnelSetLabelCall) (response)
/// * [get zone operations](ZoneOperationGetCall) (response)
/// * [wait zone operations](ZoneOperationWaitCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Operation {
    /// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
    #[serde(rename="clientOperationId")]
    
    pub client_operation_id: Option<String>,
    /// [Deprecated] This field is deprecated.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] A textual description of the operation, which is set when the operation is created.
    
    pub description: Option<String>,
    /// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
    #[serde(rename="endTime")]
    
    pub end_time: Option<String>,
    /// [Output Only] If errors are generated during processing of the operation, this field will be populated.
    
    pub error: Option<OperationError>,
    /// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
    #[serde(rename="httpErrorMessage")]
    
    pub http_error_message: Option<String>,
    /// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
    #[serde(rename="httpErrorStatusCode")]
    
    pub http_error_status_code: Option<i32>,
    /// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
    #[serde(rename="insertTime")]
    
    pub insert_time: Option<String>,
    /// [Output Only] Type of the resource. Always `compute#operation` for Operation resources.
    
    pub kind: Option<String>,
    /// [Output Only] Name of the operation.
    
    pub name: Option<String>,
    /// [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
    #[serde(rename="operationGroupId")]
    
    pub operation_group_id: Option<String>,
    /// [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.
    #[serde(rename="operationType")]
    
    pub operation_type: Option<String>,
    /// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
    
    pub progress: Option<i32>,
    /// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
    #[serde(rename="startTime")]
    
    pub start_time: Option<String>,
    /// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
    
    pub status: Option<OperationStatusEnum>,
    /// [Output Only] An optional textual description of the current status of the operation.
    #[serde(rename="statusMessage")]
    
    pub status_message: Option<String>,
    /// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
    #[serde(rename="targetId")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub target_id: Option<u64>,
    /// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
    #[serde(rename="targetLink")]
    
    pub target_link: Option<String>,
    /// [Output Only] User who requested the operation, for example: `user@example.com`.
    
    pub user: Option<String>,
    /// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
    
    pub warnings: Option<Vec<OperationWarnings>>,
    /// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
    
    pub zone: Option<String>,
}

impl client::ResponseResult for Operation {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list global operations](GlobalOperationAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationAggregatedList {
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    pub id: Option<String>,
    /// [Output Only] A map of scoped operation lists.
    
    pub items: Option<HashMap<String, OperationsScopedList>>,
    /// [Output Only] Type of resource. Always `compute#operationAggregatedList` for aggregated lists of operations.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<OperationAggregatedListWarning>,
}

impl client::ResponseResult for OperationAggregatedList {}


/// Contains a list of Operation resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list global operations](GlobalOperationListCall) (response)
/// * [list global organization operations](GlobalOrganizationOperationListCall) (response)
/// * [list region operations](RegionOperationListCall) (response)
/// * [list zone operations](ZoneOperationListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationList {
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    pub id: Option<String>,
    /// [Output Only] A list of Operation resources.
    
    pub items: Option<Vec<Operation>>,
    /// [Output Only] Type of resource. Always `compute#operations` for Operations resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<OperationListWarning>,
}

impl client::ResponseResult for OperationList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationsScopedList {
    /// [Output Only] A list of operations contained in this scope.
    
    pub operations: Option<Vec<Operation>>,
    /// [Output Only] Informational warning which replaces the list of operations when the list is empty.
    
    pub warning: Option<OperationsScopedListWarning>,
}

impl client::Part for OperationsScopedList {}


/// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OutlierDetection {
    /// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
    #[serde(rename="baseEjectionTime")]
    
    pub base_ejection_time: Option<Duration>,
    /// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="consecutiveErrors")]
    
    pub consecutive_errors: Option<i32>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="consecutiveGatewayFailure")]
    
    pub consecutive_gateway_failure: Option<i32>,
    /// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="enforcingConsecutiveErrors")]
    
    pub enforcing_consecutive_errors: Option<i32>,
    /// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="enforcingConsecutiveGatewayFailure")]
    
    pub enforcing_consecutive_gateway_failure: Option<i32>,
    /// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(rename="enforcingSuccessRate")]
    
    pub enforcing_success_rate: Option<i32>,
    /// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
    
    pub interval: Option<Duration>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
    #[serde(rename="maxEjectionPercent")]
    
    pub max_ejection_percent: Option<i32>,
    /// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
    #[serde(rename="successRateMinimumHosts")]
    
    pub success_rate_minimum_hosts: Option<i32>,
    /// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
    #[serde(rename="successRateRequestVolume")]
    
    pub success_rate_request_volume: Option<i32>,
    /// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
    #[serde(rename="successRateStdevFactor")]
    
    pub success_rate_stdev_factor: Option<i32>,
}

impl client::Part for OutlierDetection {}


/// Next free: 7
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketIntervals {
    /// Average observed inter-packet interval in milliseconds.
    #[serde(rename="avgMs")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub avg_ms: Option<i64>,
    /// From how long ago in the past these intervals were observed.
    
    pub duration: Option<PacketIntervalDurationEnum>,
    /// Maximum observed inter-packet interval in milliseconds.
    #[serde(rename="maxMs")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub max_ms: Option<i64>,
    /// Minimum observed inter-packet interval in milliseconds.
    #[serde(rename="minMs")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub min_ms: Option<i64>,
    /// Number of inter-packet intervals from which these statistics were derived.
    #[serde(rename="numIntervals")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub num_intervals: Option<i64>,
    /// The type of packets for which inter-packet intervals were computed.
    #[serde(rename="type")]
    
    pub type_: Option<PacketIntervalTypeEnum>,
}

impl client::Part for PacketIntervals {}


/// Represents a Packet Mirroring resource. Packet Mirroring clones the traffic of specified instances in your Virtual Private Cloud (VPC) network and forwards it to a collector destination, such as an instance group of an internal TCP/UDP load balancer, for analysis or examination. For more information about setting up Packet Mirroring, see Using Packet Mirroring.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list packet mirrorings](PacketMirroringAggregatedListCall) (none)
/// * [delete packet mirrorings](PacketMirroringDeleteCall) (none)
/// * [get packet mirrorings](PacketMirroringGetCall) (response)
/// * [insert packet mirrorings](PacketMirroringInsertCall) (request)
/// * [list packet mirrorings](PacketMirroringListCall) (none)
/// * [patch packet mirrorings](PacketMirroringPatchCall) (request)
/// * [test iam permissions packet mirrorings](PacketMirroringTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroring {
    /// The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector set to true.
    #[serde(rename="collectorIlb")]
    
    pub collector_ilb: Option<PacketMirroringForwardingRuleInfo>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE.
    
    pub enable: Option<PacketMirroringEnableEnum>,
    /// Filter for mirrored traffic. If unspecified, all traffic is mirrored.
    
    pub filter: Option<PacketMirroringFilter>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings.
    
    pub kind: Option<String>,
    /// PacketMirroring mirroredResourceInfos. MirroredResourceInfo specifies a set of mirrored VM instances, subnetworks and/or tags for which traffic from/to all VM instances will be mirrored.
    #[serde(rename="mirroredResources")]
    
    pub mirrored_resources: Option<PacketMirroringMirroredResourceInfo>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.
    
    pub network: Option<PacketMirroringNetworkInfo>,
    /// The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
    
    pub priority: Option<u32>,
    /// [Output Only] URI of the region where the packetMirroring resides.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::RequestValue for PacketMirroring {}
impl client::Resource for PacketMirroring {}
impl client::ResponseResult for PacketMirroring {}


/// Contains a list of packetMirrorings.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list packet mirrorings](PacketMirroringAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of PacketMirroring resources.
    
    pub items: Option<HashMap<String, PacketMirroringsScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<PacketMirroringAggregatedListWarning>,
}

impl client::ResponseResult for PacketMirroringAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringFilter {
    /// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
    #[serde(rename="IPProtocols")]
    
    pub ip_protocols: Option<Vec<String>>,
    /// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
    #[serde(rename="cidrRanges")]
    
    pub cidr_ranges: Option<Vec<String>>,
    /// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
    
    pub direction: Option<PacketMirroringFilterDirectionEnum>,
}

impl client::Part for PacketMirroringFilter {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringForwardingRuleInfo {
    /// [Output Only] Unique identifier for the forwarding rule; defined by the server.
    #[serde(rename="canonicalUrl")]
    
    pub canonical_url: Option<String>,
    /// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
    
    pub url: Option<String>,
}

impl client::Part for PacketMirroringForwardingRuleInfo {}


/// Contains a list of PacketMirroring resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list packet mirrorings](PacketMirroringListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of PacketMirroring resources.
    
    pub items: Option<Vec<PacketMirroring>>,
    /// [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<PacketMirroringListWarning>,
}

impl client::ResponseResult for PacketMirroringList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringMirroredResourceInfo {
    /// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
    
    pub instances: Option<Vec<PacketMirroringMirroredResourceInfoInstanceInfo>>,
    /// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
    
    pub subnetworks: Option<Vec<PacketMirroringMirroredResourceInfoSubnetInfo>>,
    /// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
    
    pub tags: Option<Vec<String>>,
}

impl client::Part for PacketMirroringMirroredResourceInfo {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringMirroredResourceInfoInstanceInfo {
    /// [Output Only] Unique identifier for the instance; defined by the server.
    #[serde(rename="canonicalUrl")]
    
    pub canonical_url: Option<String>,
    /// Resource URL to the virtual machine instance which is being mirrored.
    
    pub url: Option<String>,
}

impl client::Part for PacketMirroringMirroredResourceInfoInstanceInfo {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringMirroredResourceInfoSubnetInfo {
    /// [Output Only] Unique identifier for the subnetwork; defined by the server.
    #[serde(rename="canonicalUrl")]
    
    pub canonical_url: Option<String>,
    /// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
    
    pub url: Option<String>,
}

impl client::Part for PacketMirroringMirroredResourceInfoSubnetInfo {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringNetworkInfo {
    /// [Output Only] Unique identifier for the network; defined by the server.
    #[serde(rename="canonicalUrl")]
    
    pub canonical_url: Option<String>,
    /// URL of the network resource.
    
    pub url: Option<String>,
}

impl client::Part for PacketMirroringNetworkInfo {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringsScopedList {
    /// A list of packetMirrorings contained in this scope.
    #[serde(rename="packetMirrorings")]
    
    pub packet_mirrorings: Option<Vec<PacketMirroring>>,
    /// Informational warning which replaces the list of packetMirrorings when the list is empty.
    
    pub warning: Option<PacketMirroringsScopedListWarning>,
}

impl client::Part for PacketMirroringsScopedList {}


/// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service is used.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PathMatcher {
    /// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path matcher's defaultRouteAction.
    #[serde(rename="defaultRouteAction")]
    
    pub default_route_action: Option<HttpRouteAction>,
    /// The full or partial URL to the BackendService resource. This URL is used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use 
    #[serde(rename="defaultService")]
    
    pub default_service: Option<String>,
    /// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="defaultUrlRedirect")]
    
    pub default_url_redirect: Option<HttpRedirectAction>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Specifies changes to request and response headers that need to take effect for the selected backend service. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="headerAction")]
    
    pub header_action: Option<HttpHeaderAction>,
    /// The name to which this PathMatcher is referred by the HostRule.
    
    pub name: Option<String>,
    /// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
    #[serde(rename="pathRules")]
    
    pub path_rules: Option<Vec<PathRule>>,
    /// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
    #[serde(rename="routeRules")]
    
    pub route_rules: Option<Vec<HttpRouteRule>>,
}

impl client::Part for PathMatcher {}


/// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PathRule {
    /// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
    
    pub paths: Option<Vec<String>>,
    /// In response to a matching path, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path rule's routeAction.
    #[serde(rename="routeAction")]
    
    pub route_action: Option<HttpRouteAction>,
    /// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
    
    pub service: Option<String>,
    /// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="urlRedirect")]
    
    pub url_redirect: Option<HttpRedirectAction>,
}

impl client::Part for PathRule {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PerInstanceConfig {
    /// Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance configuration or the field needs to be unset.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The name of a per-instance configuration and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance configuration with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance configconfiguration for a VM instance that either doesn't exist or is not part of the group will result in an error.
    
    pub name: Option<String>,
    /// The intended preserved state for the given instance. Does not contain preserved state generated from a stateful policy.
    #[serde(rename="preservedState")]
    
    pub preserved_state: Option<PreservedState>,
    /// The status of applying this per-instance configuration on the corresponding managed instance.
    
    pub status: Option<PerInstanceConfigStatusEnum>,
}

impl client::Part for PerInstanceConfig {}


/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { “bindings”: \[ { “role”: “roles/resourcemanager.organizationAdmin”, “members”: \[ “user:mike@example.com”, “group:admins@example.com”, “domain:google.com”, “serviceAccount:my-project-id@appspot.gserviceaccount.com” \] }, { “role”: “roles/resourcemanager.organizationViewer”, “members”: \[ “user:eve@example.com” \], “condition”: { “title”: “expirable access”, “description”: “Does not grant access after Sep 2020”, “expression”: “request.time \< timestamp(‘2020-10-01T00:00:00.000Z’)”, } } \], “etag”: “BwWWja0YfJA=”, “version”: 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \< timestamp(‘2020-10-01T00:00:00.000Z’) etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get iam policy backend services](BackendServiceGetIamPolicyCall) (response)
/// * [set iam policy backend services](BackendServiceSetIamPolicyCall) (response)
/// * [get iam policy disks](DiskGetIamPolicyCall) (response)
/// * [set iam policy disks](DiskSetIamPolicyCall) (response)
/// * [get iam policy firewall policies](FirewallPolicyGetIamPolicyCall) (response)
/// * [set iam policy firewall policies](FirewallPolicySetIamPolicyCall) (response)
/// * [get iam policy images](ImageGetIamPolicyCall) (response)
/// * [set iam policy images](ImageSetIamPolicyCall) (response)
/// * [get iam policy instance templates](InstanceTemplateGetIamPolicyCall) (response)
/// * [set iam policy instance templates](InstanceTemplateSetIamPolicyCall) (response)
/// * [get iam policy instances](InstanceGetIamPolicyCall) (response)
/// * [set iam policy instances](InstanceSetIamPolicyCall) (response)
/// * [get iam policy licenses](LicenseGetIamPolicyCall) (response)
/// * [set iam policy licenses](LicenseSetIamPolicyCall) (response)
/// * [get iam policy machine images](MachineImageGetIamPolicyCall) (response)
/// * [set iam policy machine images](MachineImageSetIamPolicyCall) (response)
/// * [get iam policy network attachments](NetworkAttachmentGetIamPolicyCall) (response)
/// * [set iam policy network attachments](NetworkAttachmentSetIamPolicyCall) (response)
/// * [get iam policy network firewall policies](NetworkFirewallPolicyGetIamPolicyCall) (response)
/// * [set iam policy network firewall policies](NetworkFirewallPolicySetIamPolicyCall) (response)
/// * [get iam policy node groups](NodeGroupGetIamPolicyCall) (response)
/// * [set iam policy node groups](NodeGroupSetIamPolicyCall) (response)
/// * [get iam policy node templates](NodeTemplateGetIamPolicyCall) (response)
/// * [set iam policy node templates](NodeTemplateSetIamPolicyCall) (response)
/// * [get iam policy region backend services](RegionBackendServiceGetIamPolicyCall) (response)
/// * [set iam policy region backend services](RegionBackendServiceSetIamPolicyCall) (response)
/// * [get iam policy region disks](RegionDiskGetIamPolicyCall) (response)
/// * [set iam policy region disks](RegionDiskSetIamPolicyCall) (response)
/// * [get iam policy region network firewall policies](RegionNetworkFirewallPolicyGetIamPolicyCall) (response)
/// * [set iam policy region network firewall policies](RegionNetworkFirewallPolicySetIamPolicyCall) (response)
/// * [get iam policy reservations](ReservationGetIamPolicyCall) (response)
/// * [set iam policy reservations](ReservationSetIamPolicyCall) (response)
/// * [get iam policy resource policies](ResourcePolicyGetIamPolicyCall) (response)
/// * [set iam policy resource policies](ResourcePolicySetIamPolicyCall) (response)
/// * [get iam policy service attachments](ServiceAttachmentGetIamPolicyCall) (response)
/// * [set iam policy service attachments](ServiceAttachmentSetIamPolicyCall) (response)
/// * [get iam policy snapshots](SnapshotGetIamPolicyCall) (response)
/// * [set iam policy snapshots](SnapshotSetIamPolicyCall) (response)
/// * [get iam policy subnetworks](SubnetworkGetIamPolicyCall) (response)
/// * [set iam policy subnetworks](SubnetworkSetIamPolicyCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Policy {
    /// Specifies cloud audit logging configuration for this policy.
    #[serde(rename="auditConfigs")]
    
    pub audit_configs: Option<Vec<AuditConfig>>,
    /// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
    
    pub bindings: Option<Vec<Binding>>,
    /// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub etag: Option<Vec<u8>>,
    /// This is deprecated and has no effect. Do not use.
    
    pub rules: Option<Vec<Rule>>,
    /// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
    
    pub version: Option<i32>,
}

impl client::ResponseResult for Policy {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PreconfiguredWafSet {
    /// List of entities that are currently supported for WAF rules.
    #[serde(rename="expressionSets")]
    
    pub expression_sets: Option<Vec<WafExpressionSet>>,
}

impl client::Part for PreconfiguredWafSet {}


/// Preserved state for a given instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PreservedState {
    /// Preserved disks defined for this instance. This map is keyed with the device names of the disks.
    
    pub disks: Option<HashMap<String, PreservedStatePreservedDisk>>,
    /// Preserved metadata defined for this instance.
    
    pub metadata: Option<HashMap<String, String>>,
}

impl client::Part for PreservedState {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PreservedStatePreservedDisk {
    /// These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
    #[serde(rename="autoDelete")]
    
    pub auto_delete: Option<PreservedStatePreservedDiskAutoDeleteEnum>,
    /// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
    
    pub mode: Option<PreservedStatePreservedDiskModeEnum>,
    /// The URL of the disk resource that is stateful and should be attached to the VM instance.
    
    pub source: Option<String>,
}

impl client::Part for PreservedStatePreservedDisk {}


/// Represents a Project resource. A project is used to organize resources in a Google Cloud Platform environment. For more information, read about the Resource Hierarchy.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [disable xpn host projects](ProjectDisableXpnHostCall) (none)
/// * [disable xpn resource projects](ProjectDisableXpnResourceCall) (none)
/// * [enable xpn host projects](ProjectEnableXpnHostCall) (none)
/// * [enable xpn resource projects](ProjectEnableXpnResourceCall) (none)
/// * [get projects](ProjectGetCall) (response)
/// * [get xpn host projects](ProjectGetXpnHostCall) (response)
/// * [get xpn resources projects](ProjectGetXpnResourceCall) (none)
/// * [list xpn hosts projects](ProjectListXpnHostCall) (none)
/// * [move disk projects](ProjectMoveDiskCall) (none)
/// * [move instance projects](ProjectMoveInstanceCall) (none)
/// * [set common instance metadata projects](ProjectSetCommonInstanceMetadataCall) (none)
/// * [set default network tier projects](ProjectSetDefaultNetworkTierCall) (none)
/// * [set usage export bucket projects](ProjectSetUsageExportBucketCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Project {
    /// Metadata key/value pairs available to all instances contained in this project. See Custom metadata for more information.
    #[serde(rename="commonInstanceMetadata")]
    
    pub common_instance_metadata: Option<Metadata>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM.
    #[serde(rename="defaultNetworkTier")]
    
    pub default_network_tier: Option<ProjectDefaultNetworkTierEnum>,
    /// [Output Only] Default service account used by VMs running in this project.
    #[serde(rename="defaultServiceAccount")]
    
    pub default_service_account: Option<String>,
    /// An optional textual description of the resource.
    
    pub description: Option<String>,
    /// Restricted features enabled for use on this project.
    #[serde(rename="enabledFeatures")]
    
    pub enabled_features: Option<Vec<String>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is *not* the project ID, and is just a unique ID used by Compute Engine to identify resources.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#project for projects.
    
    pub kind: Option<String>,
    /// The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine.
    
    pub name: Option<String>,
    /// [Output Only] Quotas assigned to this project.
    
    pub quotas: Option<Vec<Quota>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The naming prefix for daily usage reports and the Google Cloud Storage bucket where they are stored.
    #[serde(rename="usageExportLocation")]
    
    pub usage_export_location: Option<UsageExportLocation>,
    /// [Output Only] Default internal DNS setting used by VMs running in this project.
    #[serde(rename="vmDnsSetting")]
    
    pub vm_dns_setting: Option<ProjectVmDnsSettingEnum>,
    /// [Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated.
    #[serde(rename="xpnProjectStatus")]
    
    pub xpn_project_status: Option<ProjectXpnProjectStatusEnum>,
}

impl client::Resource for Project {}
impl client::ResponseResult for Project {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [disable xpn resource projects](ProjectDisableXpnResourceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ProjectsDisableXpnResourceRequest {
    /// Service resource (a.k.a service project) ID.
    #[serde(rename="xpnResource")]
    
    pub xpn_resource: Option<XpnResourceId>,
}

impl client::RequestValue for ProjectsDisableXpnResourceRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [enable xpn resource projects](ProjectEnableXpnResourceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ProjectsEnableXpnResourceRequest {
    /// Service resource (a.k.a service project) ID.
    #[serde(rename="xpnResource")]
    
    pub xpn_resource: Option<XpnResourceId>,
}

impl client::RequestValue for ProjectsEnableXpnResourceRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get xpn resources projects](ProjectGetXpnResourceCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ProjectsGetXpnResources {
    /// [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects)
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// Service resources (a.k.a service projects) attached to this project as their shared VPC host.
    
    pub resources: Option<Vec<XpnResourceId>>,
}

impl client::ResponseResult for ProjectsGetXpnResources {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list xpn hosts projects](ProjectListXpnHostCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ProjectsListXpnHostsRequest {
    /// Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project.
    
    pub organization: Option<String>,
}

impl client::RequestValue for ProjectsListXpnHostsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set default network tier projects](ProjectSetDefaultNetworkTierCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ProjectsSetDefaultNetworkTierRequest {
    /// Default network tier to be set.
    #[serde(rename="networkTier")]
    
    pub network_tier: Option<ProjectsSetDefaultNetworkTierRequestNetworkTierEnum>,
}

impl client::RequestValue for ProjectsSetDefaultNetworkTierRequest {}


/// A public advertised prefix represents an aggregated IP prefix or netblock which customers bring to cloud. The IP prefix is a single unit of route advertisement and is announced globally to the internet.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get public advertised prefixes](PublicAdvertisedPrefixGetCall) (response)
/// * [insert public advertised prefixes](PublicAdvertisedPrefixInsertCall) (request)
/// * [patch public advertised prefixes](PublicAdvertisedPrefixPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicAdvertisedPrefix {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// The IPv4 address to be used for reverse DNS verification.
    #[serde(rename="dnsVerificationIp")]
    
    pub dns_verification_ip: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] The list of public delegated prefixes that exist for this public advertised prefix.
    #[serde(rename="publicDelegatedPrefixs")]
    
    pub public_delegated_prefixs: Option<Vec<PublicAdvertisedPrefixPublicDelegatedPrefix>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The shared secret to be used for reverse DNS verification.
    #[serde(rename="sharedSecret")]
    
    pub shared_secret: Option<String>,
    /// The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed. 
    
    pub status: Option<PublicAdvertisedPrefixStatusEnum>,
}

impl client::RequestValue for PublicAdvertisedPrefix {}
impl client::ResponseResult for PublicAdvertisedPrefix {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list public advertised prefixes](PublicAdvertisedPrefixListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicAdvertisedPrefixList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of PublicAdvertisedPrefix resources.
    
    pub items: Option<Vec<PublicAdvertisedPrefix>>,
    /// [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<PublicAdvertisedPrefixListWarning>,
}

impl client::ResponseResult for PublicAdvertisedPrefixList {}


/// Represents a CIDR range which can be used to assign addresses.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicAdvertisedPrefixPublicDelegatedPrefix {
    /// The IP address range of the public delegated prefix
    #[serde(rename="ipRange")]
    
    pub ip_range: Option<String>,
    /// The name of the public delegated prefix
    
    pub name: Option<String>,
    /// The project number of the public delegated prefix
    
    pub project: Option<String>,
    /// The region of the public delegated prefix if it is regional. If absent, the prefix is global.
    
    pub region: Option<String>,
    /// The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active.
    
    pub status: Option<String>,
}

impl client::Part for PublicAdvertisedPrefixPublicDelegatedPrefix {}


/// A PublicDelegatedPrefix resource represents an IP block within a PublicAdvertisedPrefix that is configured within a single cloud scope (global or region). IPs in the block can be allocated to resources within that scope. Public delegated prefixes may be further broken up into smaller IP blocks in the same scope as the parent block.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get global public delegated prefixes](GlobalPublicDelegatedPrefixGetCall) (response)
/// * [insert global public delegated prefixes](GlobalPublicDelegatedPrefixInsertCall) (request)
/// * [patch global public delegated prefixes](GlobalPublicDelegatedPrefixPatchCall) (request)
/// * [get public delegated prefixes](PublicDelegatedPrefixGetCall) (response)
/// * [insert public delegated prefixes](PublicDelegatedPrefixInsertCall) (request)
/// * [patch public delegated prefixes](PublicDelegatedPrefixPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefix {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicDelegatedPrefix. An up-to-date fingerprint must be provided in order to update the PublicDelegatedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicDelegatedPrefix.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// The IPv4 address range, in CIDR format, represented by this public delegated prefix.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// If true, the prefix will be live migrated.
    #[serde(rename="isLiveMigration")]
    
    pub is_live_migration: Option<bool>,
    /// [Output Only] Type of the resource. Always compute#publicDelegatedPrefix for public delegated prefixes.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The URL of parent prefix. Either PublicAdvertisedPrefix or PublicDelegatedPrefix.
    #[serde(rename="parentPrefix")]
    
    pub parent_prefix: Option<String>,
    /// The list of sub public delegated prefixes that exist for this public delegated prefix.
    #[serde(rename="publicDelegatedSubPrefixs")]
    
    pub public_delegated_sub_prefixs: Option<Vec<PublicDelegatedPrefixPublicDelegatedSubPrefix>>,
    /// [Output Only] URL of the region where the public delegated prefix resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The status of the public delegated prefix, which can be one of following values: - `INITIALIZING` The public delegated prefix is being initialized and addresses cannot be created yet. - `READY_TO_ANNOUNCE` The public delegated prefix is a live migration prefix and is active. - `ANNOUNCED` The public delegated prefix is active. - `DELETING` The public delegated prefix is being deprovsioned. 
    
    pub status: Option<PublicDelegatedPrefixStatusEnum>,
}

impl client::RequestValue for PublicDelegatedPrefix {}
impl client::ResponseResult for PublicDelegatedPrefix {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list public delegated prefixes](PublicDelegatedPrefixAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of PublicDelegatedPrefixesScopedList resources.
    
    pub items: Option<HashMap<String, PublicDelegatedPrefixesScopedList>>,
    /// [Output Only] Type of the resource. Always compute#publicDelegatedPrefixAggregatedList for aggregated lists of public delegated prefixes.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<PublicDelegatedPrefixAggregatedListWarning>,
}

impl client::ResponseResult for PublicDelegatedPrefixAggregatedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list global public delegated prefixes](GlobalPublicDelegatedPrefixListCall) (response)
/// * [list public delegated prefixes](PublicDelegatedPrefixListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of PublicDelegatedPrefix resources.
    
    pub items: Option<Vec<PublicDelegatedPrefix>>,
    /// [Output Only] Type of the resource. Always compute#publicDelegatedPrefixList for public delegated prefixes.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<PublicDelegatedPrefixListWarning>,
}

impl client::ResponseResult for PublicDelegatedPrefixList {}


/// Represents a sub PublicDelegatedPrefix.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixPublicDelegatedSubPrefix {
    /// Name of the project scoping this PublicDelegatedSubPrefix.
    #[serde(rename="delegateeProject")]
    
    pub delegatee_project: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// Whether the sub prefix is delegated to create Address resources in the delegatee project.
    #[serde(rename="isAddress")]
    
    pub is_address: Option<bool>,
    /// The name of the sub public delegated prefix.
    
    pub name: Option<String>,
    /// [Output Only] The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global.
    
    pub region: Option<String>,
    /// [Output Only] The status of the sub public delegated prefix.
    
    pub status: Option<PublicDelegatedPrefixPublicDelegatedSubPrefixStatusEnum>,
}

impl client::Part for PublicDelegatedPrefixPublicDelegatedSubPrefix {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixesScopedList {
    /// [Output Only] A list of PublicDelegatedPrefixes contained in this scope.
    #[serde(rename="publicDelegatedPrefixes")]
    
    pub public_delegated_prefixes: Option<Vec<PublicDelegatedPrefix>>,
    /// [Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty.
    
    pub warning: Option<PublicDelegatedPrefixesScopedListWarning>,
}

impl client::Part for PublicDelegatedPrefixesScopedList {}


/// A quotas entry.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Quota {
    /// [Output Only] Quota limit for this metric.
    
    pub limit: Option<f64>,
    /// [Output Only] Name of the quota metric.
    
    pub metric: Option<QuotaMetricEnum>,
    /// [Output Only] Owning resource. This is the resource on which this quota is applied.
    
    pub owner: Option<String>,
    /// [Output Only] Current usage of this metric.
    
    pub usage: Option<f64>,
}

impl client::Part for Quota {}


/// Additional details for quota exceeded error for resource quota.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct QuotaExceededInfo {
    /// The map holding related quota dimensions.
    
    pub dimensions: Option<HashMap<String, String>>,
    /// Current effective quota limit. The limit's unit depends on the quota type or metric.
    
    pub limit: Option<f64>,
    /// The name of the quota limit.
    #[serde(rename="limitName")]
    
    pub limit_name: Option<String>,
    /// The Compute Engine quota metric name.
    #[serde(rename="metricName")]
    
    pub metric_name: Option<String>,
}

impl client::Part for QuotaExceededInfo {}


/// Represents a reference to a resource.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Reference {
    /// [Output Only] Type of the resource. Always compute#reference for references.
    
    pub kind: Option<String>,
    /// A description of the reference type with no implied semantics. Possible values include: 1. MEMBER_OF 
    #[serde(rename="referenceType")]
    
    pub reference_type: Option<String>,
    /// URL of the resource which refers to the target.
    
    pub referrer: Option<String>,
    /// URL of the resource to which this reference points.
    
    pub target: Option<String>,
}

impl client::Part for Reference {}


/// Represents a Region resource. A region is a geographical area where a resource is located. For more information, read Regions and Zones.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get regions](RegionGetCall) (response)
/// * [list regions](RegionListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Region {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] The deprecation status associated with this region.
    
    pub deprecated: Option<DeprecationStatus>,
    /// [Output Only] Textual description of the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#region for regions.
    
    pub kind: Option<String>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] Quotas assigned to this region.
    
    pub quotas: Option<Vec<Quota>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Status of the region, either UP or DOWN.
    
    pub status: Option<RegionStatusEnum>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="supportsPzs")]
    
    pub supports_pzs: Option<bool>,
    /// [Output Only] A list of zones available in this region, in the form of resource URLs.
    
    pub zones: Option<Vec<String>>,
}

impl client::Resource for Region {}
impl client::ResponseResult for Region {}


/// Contains a list of autoscalers.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region autoscalers](RegionAutoscalerListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionAutoscalerList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Autoscaler resources.
    
    pub items: Option<Vec<Autoscaler>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionAutoscalerListWarning>,
}

impl client::ResponseResult for RegionAutoscalerList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region disk types](RegionDiskTypeListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionDiskTypeList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of DiskType resources.
    
    pub items: Option<Vec<DiskType>>,
    /// [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionDiskTypeListWarning>,
}

impl client::ResponseResult for RegionDiskTypeList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add resource policies region disks](RegionDiskAddResourcePolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionDisksAddResourcePoliciesRequest {
    /// Resource policies to be added to this disk.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
}

impl client::RequestValue for RegionDisksAddResourcePoliciesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove resource policies region disks](RegionDiskRemoveResourcePolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionDisksRemoveResourcePoliciesRequest {
    /// Resource policies to be removed from this disk.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<String>>,
}

impl client::RequestValue for RegionDisksRemoveResourcePoliciesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [resize region disks](RegionDiskResizeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionDisksResizeRequest {
    /// The new size of the regional persistent disk, which is specified in GB.
    #[serde(rename="sizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub size_gb: Option<i64>,
}

impl client::RequestValue for RegionDisksResizeRequest {}


/// Contains a list of InstanceGroup resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region instance groups](RegionInstanceGroupListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceGroup resources.
    
    pub items: Option<Vec<InstanceGroup>>,
    /// The resource type.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionInstanceGroupListWarning>,
}

impl client::ResponseResult for RegionInstanceGroupList {}


/// RegionInstanceGroupManagers.deletePerInstanceConfigs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete per instance configs region instance group managers](RegionInstanceGroupManagerDeletePerInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagerDeleteInstanceConfigReq {
    /// The list of instance names for which we want to delete per-instance configs on this managed instance group.
    
    pub names: Option<Vec<String>>,
}

impl client::RequestValue for RegionInstanceGroupManagerDeleteInstanceConfigReq {}


/// Contains a list of managed instance groups.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region instance group managers](RegionInstanceGroupManagerListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagerList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceGroupManager resources.
    
    pub items: Option<Vec<InstanceGroupManager>>,
    /// [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionInstanceGroupManagerListWarning>,
}

impl client::ResponseResult for RegionInstanceGroupManagerList {}


/// RegionInstanceGroupManagers.patchPerInstanceConfigs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [patch per instance configs region instance group managers](RegionInstanceGroupManagerPatchPerInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagerPatchInstanceConfigReq {
    /// The list of per-instance configurations to insert or patch on this managed instance group.
    #[serde(rename="perInstanceConfigs")]
    
    pub per_instance_configs: Option<Vec<PerInstanceConfig>>,
}

impl client::RequestValue for RegionInstanceGroupManagerPatchInstanceConfigReq {}


/// RegionInstanceGroupManagers.updatePerInstanceConfigs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [update per instance configs region instance group managers](RegionInstanceGroupManagerUpdatePerInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagerUpdateInstanceConfigReq {
    /// The list of per-instance configurations to insert or patch on this managed instance group.
    #[serde(rename="perInstanceConfigs")]
    
    pub per_instance_configs: Option<Vec<PerInstanceConfig>>,
}

impl client::RequestValue for RegionInstanceGroupManagerUpdateInstanceConfigReq {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [abandon instances region instance group managers](RegionInstanceGroupManagerAbandonInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersAbandonInstancesRequest {
    /// The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
}

impl client::RequestValue for RegionInstanceGroupManagersAbandonInstancesRequest {}


/// RegionInstanceGroupManagers.applyUpdatesToInstances
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [apply updates to instances region instance group managers](RegionInstanceGroupManagerApplyUpdatesToInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersApplyUpdatesRequest {
    /// Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request.
    #[serde(rename="allInstances")]
    
    pub all_instances: Option<bool>,
    /// The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
    /// The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
    #[serde(rename="minimalAction")]
    
    pub minimal_action: Option<RegionInstanceGroupManagersApplyUpdatesRequestMinimalActionEnum>,
    /// The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
    #[serde(rename="mostDisruptiveAllowedAction")]
    
    pub most_disruptive_allowed_action: Option<RegionInstanceGroupManagersApplyUpdatesRequestMostDisruptiveAllowedActionEnum>,
}

impl client::RequestValue for RegionInstanceGroupManagersApplyUpdatesRequest {}


/// RegionInstanceGroupManagers.createInstances
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [create instances region instance group managers](RegionInstanceGroupManagerCreateInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersCreateInstancesRequest {
    /// [Required] List of specifications of per-instance configs.
    
    pub instances: Option<Vec<PerInstanceConfig>>,
}

impl client::RequestValue for RegionInstanceGroupManagersCreateInstancesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete instances region instance group managers](RegionInstanceGroupManagerDeleteInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersDeleteInstancesRequest {
    /// The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
    /// Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group's zone or region.
    #[serde(rename="skipInstancesOnValidationError")]
    
    pub skip_instances_on_validation_error: Option<bool>,
}

impl client::RequestValue for RegionInstanceGroupManagersDeleteInstancesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list errors region instance group managers](RegionInstanceGroupManagerListErrorCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersListErrorsResponse {
    /// [Output Only] The list of errors of the managed instance group.
    
    pub items: Option<Vec<InstanceManagedByIgmError>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
}

impl client::ResponseResult for RegionInstanceGroupManagersListErrorsResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list per instance configs region instance group managers](RegionInstanceGroupManagerListPerInstanceConfigCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersListInstanceConfigsResp {
    /// [Output Only] The list of PerInstanceConfig.
    
    pub items: Option<Vec<PerInstanceConfig>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionInstanceGroupManagersListInstanceConfigsRespWarning>,
}

impl client::ResponseResult for RegionInstanceGroupManagersListInstanceConfigsResp {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list managed instances region instance group managers](RegionInstanceGroupManagerListManagedInstanceCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersListInstancesResponse {
    /// A list of managed instances.
    #[serde(rename="managedInstances")]
    
    pub managed_instances: Option<Vec<ManagedInstance>>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
}

impl client::ResponseResult for RegionInstanceGroupManagersListInstancesResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [recreate instances region instance group managers](RegionInstanceGroupManagerRecreateInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersRecreateRequest {
    /// The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
    
    pub instances: Option<Vec<String>>,
}

impl client::RequestValue for RegionInstanceGroupManagersRecreateRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set target pools region instance group managers](RegionInstanceGroupManagerSetTargetPoolCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersSetTargetPoolsRequest {
    /// Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
    #[serde(rename="targetPools")]
    
    pub target_pools: Option<Vec<String>>,
}

impl client::RequestValue for RegionInstanceGroupManagersSetTargetPoolsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set instance template region instance group managers](RegionInstanceGroupManagerSetInstanceTemplateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersSetTemplateRequest {
    /// URL of the InstanceTemplate resource from which all new instances will be created.
    #[serde(rename="instanceTemplate")]
    
    pub instance_template: Option<String>,
}

impl client::RequestValue for RegionInstanceGroupManagersSetTemplateRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instances region instance groups](RegionInstanceGroupListInstanceCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupsListInstances {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of InstanceWithNamedPorts resources.
    
    pub items: Option<Vec<InstanceWithNamedPorts>>,
    /// The resource type.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionInstanceGroupsListInstancesWarning>,
}

impl client::ResponseResult for RegionInstanceGroupsListInstances {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list instances region instance groups](RegionInstanceGroupListInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupsListInstancesRequest {
    /// Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances.
    #[serde(rename="instanceState")]
    
    pub instance_state: Option<RegionInstanceGroupsListInstancesRequestInstanceStateEnum>,
    /// Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
}

impl client::RequestValue for RegionInstanceGroupsListInstancesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set named ports region instance groups](RegionInstanceGroupSetNamedPortCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupsSetNamedPortsRequest {
    /// The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// The list of named ports to set for this instance group.
    #[serde(rename="namedPorts")]
    
    pub named_ports: Option<Vec<NamedPort>>,
}

impl client::RequestValue for RegionInstanceGroupsSetNamedPortsRequest {}


/// Contains a list of region resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list regions](RegionListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Region resources.
    
    pub items: Option<Vec<Region>>,
    /// [Output Only] Type of resource. Always compute#regionList for lists of regions.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RegionListWarning>,
}

impl client::ResponseResult for RegionList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get effective firewalls region network firewall policies](RegionNetworkFirewallPolicyGetEffectiveFirewallCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse {
    /// Effective firewalls from firewall policy.
    #[serde(rename="firewallPolicys")]
    
    pub firewall_policys: Option<Vec<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>>,
    /// Effective firewalls on the network.
    
    pub firewalls: Option<Vec<Firewall>>,
}

impl client::ResponseResult for RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    /// [Output Only] The display name of the firewall policy.
    #[serde(rename="displayName")]
    
    pub display_name: Option<String>,
    /// [Output Only] The name of the firewall policy.
    
    pub name: Option<String>,
    /// The rules that apply to the network.
    
    pub rules: Option<Vec<FirewallPolicyRule>>,
    /// [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL.
    #[serde(rename="type")]
    
    pub type_: Option<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyTypeEnum>,
}

impl client::Part for RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set labels addresses](AddressSetLabelCall) (request)
/// * [set labels forwarding rules](ForwardingRuleSetLabelCall) (request)
/// * [set labels interconnect attachments](InterconnectAttachmentSetLabelCall) (request)
/// * [set labels region disks](RegionDiskSetLabelCall) (request)
/// * [set labels target vpn gateways](TargetVpnGatewaySetLabelCall) (request)
/// * [set labels vpn gateways](VpnGatewaySetLabelCall) (request)
/// * [set labels vpn tunnels](VpnTunnelSetLabelCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionSetLabelsRequest {
    /// The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// The labels to set for this resource.
    
    pub labels: Option<HashMap<String, String>>,
}

impl client::RequestValue for RegionSetLabelsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set iam policy network attachments](NetworkAttachmentSetIamPolicyCall) (request)
/// * [set iam policy node templates](NodeTemplateSetIamPolicyCall) (request)
/// * [set iam policy region backend services](RegionBackendServiceSetIamPolicyCall) (request)
/// * [set iam policy region disks](RegionDiskSetIamPolicyCall) (request)
/// * [set iam policy region network firewall policies](RegionNetworkFirewallPolicySetIamPolicyCall) (request)
/// * [set iam policy resource policies](ResourcePolicySetIamPolicyCall) (request)
/// * [set iam policy service attachments](ServiceAttachmentSetIamPolicyCall) (request)
/// * [set iam policy subnetworks](SubnetworkSetIamPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionSetPolicyRequest {
    /// Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings.
    
    pub bindings: Option<Vec<Binding>>,
    /// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub etag: Option<Vec<u8>>,
    /// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    
    pub policy: Option<Policy>,
}

impl client::RequestValue for RegionSetPolicyRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set ssl certificates region target https proxies](RegionTargetHttpsProxySetSslCertificateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionTargetHttpsProxiesSetSslCertificatesRequest {
    /// New set of SslCertificate resources to associate with this TargetHttpsProxy resource.
    #[serde(rename="sslCertificates")]
    
    pub ssl_certificates: Option<Vec<String>>,
}

impl client::RequestValue for RegionTargetHttpsProxiesSetSslCertificatesRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [validate region url maps](RegionUrlMapValidateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionUrlMapsValidateRequest {
    /// Content of the UrlMap to be validated.
    
    pub resource: Option<UrlMap>,
}

impl client::RequestValue for RegionUrlMapsValidateRequest {}


/// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer doesn't wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RequestMirrorPolicy {
    /// The full or partial URL to the BackendService resource being mirrored to. The backend service configured for a mirroring policy must reference backends that are of the same type as the original backend service matched in the URL map. Serverless NEG backends are not currently supported as a mirrored backend service. 
    #[serde(rename="backendService")]
    
    pub backend_service: Option<String>,
}

impl client::Part for RequestMirrorPolicy {}


/// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list reservations](ReservationAggregatedListCall) (none)
/// * [delete reservations](ReservationDeleteCall) (none)
/// * [get reservations](ReservationGetCall) (response)
/// * [get iam policy reservations](ReservationGetIamPolicyCall) (none)
/// * [insert reservations](ReservationInsertCall) (request)
/// * [list reservations](ReservationListCall) (none)
/// * [resize reservations](ReservationResizeCall) (none)
/// * [set iam policy reservations](ReservationSetIamPolicyCall) (none)
/// * [test iam permissions reservations](ReservationTestIamPermissionCall) (none)
/// * [update reservations](ReservationUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Reservation {
    /// [Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
    
    pub commitment: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#reservations for reservations.
    
    pub kind: Option<String>,
    /// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] Status information for Reservation resource.
    #[serde(rename="resourceStatus")]
    
    pub resource_status: Option<AllocationResourceStatus>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined fully-qualified URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Specify share-settings to create a shared reservation. This property is optional. For more information about the syntax and options for this field and its subfields, see the guide for creating a shared reservation.
    #[serde(rename="shareSettings")]
    
    pub share_settings: Option<ShareSettings>,
    /// Reservation for instances with specific machine shapes.
    #[serde(rename="specificReservation")]
    
    pub specific_reservation: Option<AllocationSpecificSKUReservation>,
    /// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
    #[serde(rename="specificReservationRequired")]
    
    pub specific_reservation_required: Option<bool>,
    /// [Output Only] The status of the reservation.
    
    pub status: Option<ReservationStatusEnum>,
    /// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
    
    pub zone: Option<String>,
}

impl client::RequestValue for Reservation {}
impl client::Resource for Reservation {}
impl client::ResponseResult for Reservation {}


/// Specifies the reservations that this instance can consume from.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationAffinity {
    /// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
    #[serde(rename="consumeReservationType")]
    
    pub consume_reservation_type: Option<ReservationAffinityConsumeReservationTypeEnum>,
    /// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
    
    pub key: Option<String>,
    /// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
    
    pub values: Option<Vec<String>>,
}

impl client::Part for ReservationAffinity {}


/// Contains a list of reservations.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list reservations](ReservationAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Allocation resources.
    
    pub items: Option<HashMap<String, ReservationsScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ReservationAggregatedListWarning>,
}

impl client::ResponseResult for ReservationAggregatedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list reservations](ReservationListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationList {
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    pub id: Option<String>,
    /// [Output Only] A list of Allocation resources.
    
    pub items: Option<Vec<Reservation>>,
    /// [Output Only] Type of resource.Always compute#reservationsList for listsof reservations
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ReservationListWarning>,
}

impl client::ResponseResult for ReservationList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [resize reservations](ReservationResizeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationsResizeRequest {
    /// Number of allocated resources can be resized with minimum = 1 and maximum = 1000.
    #[serde(rename="specificSkuCount")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub specific_sku_count: Option<i64>,
}

impl client::RequestValue for ReservationsResizeRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationsScopedList {
    /// A list of reservations contained in this scope.
    
    pub reservations: Option<Vec<Reservation>>,
    /// Informational warning which replaces the list of reservations when the list is empty.
    
    pub warning: Option<ReservationsScopedListWarning>,
}

impl client::Part for ReservationsScopedList {}


/// Commitment for a particular resource (a Commitment is composed of one or more of these).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourceCommitment {
    /// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
    #[serde(rename="acceleratorType")]
    
    pub accelerator_type: Option<String>,
    /// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub amount: Option<i64>,
    /// Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR.
    #[serde(rename="type")]
    
    pub type_: Option<ResourceCommitmentTypeEnum>,
}

impl client::Part for ResourceCommitment {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get health backend services](BackendServiceGetHealthCall) (request)
/// * [get health region backend services](RegionBackendServiceGetHealthCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourceGroupReference {
    /// A URI referencing one of the instance groups or network endpoint groups listed in the backend service.
    
    pub group: Option<String>,
}

impl client::RequestValue for ResourceGroupReference {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePoliciesScopedList {
    /// A list of resourcePolicies contained in this scope.
    #[serde(rename="resourcePolicies")]
    
    pub resource_policies: Option<Vec<ResourcePolicy>>,
    /// Informational warning which replaces the list of resourcePolicies when the list is empty.
    
    pub warning: Option<ResourcePoliciesScopedListWarning>,
}

impl client::Part for ResourcePoliciesScopedList {}


/// Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get resource policies](ResourcePolicyGetCall) (response)
/// * [insert resource policies](ResourcePolicyInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicy {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// no description provided
    
    pub description: Option<String>,
    /// Resource policy for instances for placement configuration.
    #[serde(rename="groupPlacementPolicy")]
    
    pub group_placement_policy: Option<ResourcePolicyGroupPlacementPolicy>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// Resource policy for scheduling instance operations.
    #[serde(rename="instanceSchedulePolicy")]
    
    pub instance_schedule_policy: Option<ResourcePolicyInstanceSchedulePolicy>,
    /// [Output Only] Type of the resource. Always compute#resource_policies for resource policies.
    
    pub kind: Option<String>,
    /// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// no description provided
    
    pub region: Option<String>,
    /// [Output Only] The system status of the resource policy.
    #[serde(rename="resourceStatus")]
    
    pub resource_status: Option<ResourcePolicyResourceStatus>,
    /// [Output Only] Server-defined fully-qualified URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Resource policy for persistent disks for creating snapshots.
    #[serde(rename="snapshotSchedulePolicy")]
    
    pub snapshot_schedule_policy: Option<ResourcePolicySnapshotSchedulePolicy>,
    /// [Output Only] The status of resource policy creation.
    
    pub status: Option<ResourcePolicyStatusEnum>,
}

impl client::RequestValue for ResourcePolicy {}
impl client::ResponseResult for ResourcePolicy {}


/// Contains a list of resourcePolicies.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list resource policies](ResourcePolicyAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyAggregatedList {
    /// no description provided
    
    pub etag: Option<String>,
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ResourcePolicy resources.
    
    pub items: Option<HashMap<String, ResourcePoliciesScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ResourcePolicyAggregatedListWarning>,
}

impl client::ResponseResult for ResourcePolicyAggregatedList {}


/// Time window specified for daily operations.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyDailyCycle {
    /// Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle.
    #[serde(rename="daysInCycle")]
    
    pub days_in_cycle: Option<i32>,
    /// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
    
    pub duration: Option<String>,
    /// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    #[serde(rename="startTime")]
    
    pub start_time: Option<String>,
}

impl client::Part for ResourcePolicyDailyCycle {}


/// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyGroupPlacementPolicy {
    /// The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network.
    #[serde(rename="availabilityDomainCount")]
    
    pub availability_domain_count: Option<i32>,
    /// Specifies network collocation
    
    pub collocation: Option<ResourcePolicyGroupPlacementPolicyCollocationEnum>,
    /// Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this exact number of VMs.
    #[serde(rename="vmCount")]
    
    pub vm_count: Option<i32>,
}

impl client::Part for ResourcePolicyGroupPlacementPolicy {}


/// Time window specified for hourly operations.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyHourlyCycle {
    /// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
    
    pub duration: Option<String>,
    /// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
    #[serde(rename="hoursInCycle")]
    
    pub hours_in_cycle: Option<i32>,
    /// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(rename="startTime")]
    
    pub start_time: Option<String>,
}

impl client::Part for ResourcePolicyHourlyCycle {}


/// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyInstanceSchedulePolicy {
    /// The expiration time of the schedule. The timestamp is an RFC3339 string.
    #[serde(rename="expirationTime")]
    
    pub expiration_time: Option<String>,
    /// The start time of the schedule. The timestamp is an RFC3339 string.
    #[serde(rename="startTime")]
    
    pub start_time: Option<String>,
    /// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(rename="timeZone")]
    
    pub time_zone: Option<String>,
    /// Specifies the schedule for starting instances.
    #[serde(rename="vmStartSchedule")]
    
    pub vm_start_schedule: Option<ResourcePolicyInstanceSchedulePolicySchedule>,
    /// Specifies the schedule for stopping instances.
    #[serde(rename="vmStopSchedule")]
    
    pub vm_stop_schedule: Option<ResourcePolicyInstanceSchedulePolicySchedule>,
}

impl client::Part for ResourcePolicyInstanceSchedulePolicy {}


/// Schedule for an instance operation.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyInstanceSchedulePolicySchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    
    pub schedule: Option<String>,
}

impl client::Part for ResourcePolicyInstanceSchedulePolicySchedule {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list resource policies](ResourcePolicyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyList {
    /// no description provided
    
    pub etag: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    pub id: Option<String>,
    /// [Output Only] A list of ResourcePolicy resources.
    
    pub items: Option<Vec<ResourcePolicy>>,
    /// [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ResourcePolicyListWarning>,
}

impl client::ResponseResult for ResourcePolicyList {}


/// Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyResourceStatus {
    /// [Output Only] Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field.
    #[serde(rename="instanceSchedulePolicy")]
    
    pub instance_schedule_policy: Option<ResourcePolicyResourceStatusInstanceSchedulePolicyStatus>,
}

impl client::Part for ResourcePolicyResourceStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {
    /// [Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string.
    #[serde(rename="lastRunStartTime")]
    
    pub last_run_start_time: Option<String>,
    /// [Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
    #[serde(rename="nextRunStartTime")]
    
    pub next_run_start_time: Option<String>,
}

impl client::Part for ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {}


/// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicySnapshotSchedulePolicy {
    /// Retention policy applied to snapshots created by this resource policy.
    #[serde(rename="retentionPolicy")]
    
    pub retention_policy: Option<ResourcePolicySnapshotSchedulePolicyRetentionPolicy>,
    /// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
    
    pub schedule: Option<ResourcePolicySnapshotSchedulePolicySchedule>,
    /// Properties with which snapshots are created such as labels, encryption keys.
    #[serde(rename="snapshotProperties")]
    
    pub snapshot_properties: Option<ResourcePolicySnapshotSchedulePolicySnapshotProperties>,
}

impl client::Part for ResourcePolicySnapshotSchedulePolicy {}


/// Policy for retention of scheduled snapshots.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
    /// Maximum age of the snapshot that is allowed to be kept.
    #[serde(rename="maxRetentionDays")]
    
    pub max_retention_days: Option<i32>,
    /// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
    #[serde(rename="onSourceDiskDelete")]
    
    pub on_source_disk_delete: Option<ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteEnum>,
}

impl client::Part for ResourcePolicySnapshotSchedulePolicyRetentionPolicy {}


/// A schedule for disks where the schedueled operations are performed.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicySnapshotSchedulePolicySchedule {
    /// no description provided
    #[serde(rename="dailySchedule")]
    
    pub daily_schedule: Option<ResourcePolicyDailyCycle>,
    /// no description provided
    #[serde(rename="hourlySchedule")]
    
    pub hourly_schedule: Option<ResourcePolicyHourlyCycle>,
    /// no description provided
    #[serde(rename="weeklySchedule")]
    
    pub weekly_schedule: Option<ResourcePolicyWeeklyCycle>,
}

impl client::Part for ResourcePolicySnapshotSchedulePolicySchedule {}


/// Specified snapshot properties for scheduled snapshots created by this policy.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicySnapshotSchedulePolicySnapshotProperties {
    /// Chain name that the snapshot is created in.
    #[serde(rename="chainName")]
    
    pub chain_name: Option<String>,
    /// Indication to perform a 'guest aware' snapshot.
    #[serde(rename="guestFlush")]
    
    pub guest_flush: Option<bool>,
    /// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
    
    pub labels: Option<HashMap<String, String>>,
    /// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
    #[serde(rename="storageLocations")]
    
    pub storage_locations: Option<Vec<String>>,
}

impl client::Part for ResourcePolicySnapshotSchedulePolicySnapshotProperties {}


/// Time window specified for weekly operations.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyWeeklyCycle {
    /// Up to 7 intervals/windows, one for each day of the week.
    #[serde(rename="dayOfWeeks")]
    
    pub day_of_weeks: Option<Vec<ResourcePolicyWeeklyCycleDayOfWeek>>,
}

impl client::Part for ResourcePolicyWeeklyCycle {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyWeeklyCycleDayOfWeek {
    /// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    
    pub day: Option<ResourcePolicyWeeklyCycleDayOfWeekDayEnum>,
    /// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
    
    pub duration: Option<String>,
    /// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(rename="startTime")]
    
    pub start_time: Option<String>,
}

impl client::Part for ResourcePolicyWeeklyCycleDayOfWeek {}


/// Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourceStatus {
    /// [Output Only] An opaque ID of the host on which the VM is running.
    #[serde(rename="physicalHost")]
    
    pub physical_host: Option<String>,
}

impl client::Part for ResourceStatus {}


/// Represents a Route resource. A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [delete routes](RouteDeleteCall) (none)
/// * [get routes](RouteGetCall) (response)
/// * [insert routes](RouteInsertCall) (request)
/// * [list routes](RouteListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Route {
    /// [Output Only] AS path.
    #[serde(rename="asPaths")]
    
    pub as_paths: Option<Vec<RouteAsPath>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this field when you create the resource.
    
    pub description: Option<String>,
    /// The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported.
    #[serde(rename="destRange")]
    
    pub dest_range: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of this resource. Always compute#routes for Route resources.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    
    pub name: Option<String>,
    /// Fully-qualified URL of the network that this route applies to.
    
    pub network: Option<String>,
    /// The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL: projects/ project/global/gateways/default-internet-gateway
    #[serde(rename="nextHopGateway")]
    
    pub next_hop_gateway: Option<String>,
    /// The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all valid URLs: - 10.128.0.56 - https://www.googleapis.com/compute/v1/projects/project/regions/region /forwardingRules/forwardingRule - regions/region/forwardingRules/forwardingRule 
    #[serde(rename="nextHopIlb")]
    
    pub next_hop_ilb: Option<String>,
    /// The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/
    #[serde(rename="nextHopInstance")]
    
    pub next_hop_instance: Option<String>,
    /// The network IP address of an instance that should handle matching packets. Only IPv4 is supported.
    #[serde(rename="nextHopIp")]
    
    pub next_hop_ip: Option<String>,
    /// The URL of the local network if it should handle matching packets.
    #[serde(rename="nextHopNetwork")]
    
    pub next_hop_network: Option<String>,
    /// [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035.
    #[serde(rename="nextHopPeering")]
    
    pub next_hop_peering: Option<String>,
    /// The URL to a VpnTunnel that should handle matching packets.
    #[serde(rename="nextHopVpnTunnel")]
    
    pub next_hop_vpn_tunnel: Option<String>,
    /// The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive.
    
    pub priority: Option<u32>,
    /// [Output only] The status of the route.
    #[serde(rename="routeStatus")]
    
    pub route_status: Option<RouteRouteStatusEnum>,
    /// [Output Only] The type of this route, which can be one of the following values: - 'TRANSIT' for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers - 'SUBNET' for a route from a subnet of the VPC - 'BGP' for a route learned from a BGP peer of this router - 'STATIC' for a static route
    #[serde(rename="routeType")]
    
    pub route_type: Option<RouteRouteTypeEnum>,
    /// [Output Only] Server-defined fully-qualified URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// A list of instance tags to which this route applies.
    
    pub tags: Option<Vec<String>>,
    /// [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages.
    
    pub warnings: Option<Vec<RouteWarnings>>,
}

impl client::RequestValue for Route {}
impl client::Resource for Route {}
impl client::ResponseResult for Route {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouteAsPath {
    /// [Output Only] The AS numbers of the AS Path.
    #[serde(rename="asLists")]
    
    pub as_lists: Option<Vec<u32>>,
    /// [Output Only] The type of the AS Path, which can be one of the following values: - 'AS_SET': unordered set of autonomous systems that the route in has traversed - 'AS_SEQUENCE': ordered set of autonomous systems that the route has traversed - 'AS_CONFED_SEQUENCE': ordered set of Member Autonomous Systems in the local confederation that the route has traversed - 'AS_CONFED_SET': unordered set of Member Autonomous Systems in the local confederation that the route has traversed 
    #[serde(rename="pathSegmentType")]
    
    pub path_segment_type: Option<RouteAsPathPathSegmentTypeEnum>,
}

impl client::Part for RouteAsPath {}


/// Contains a list of Route resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list routes](RouteListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouteList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Route resources.
    
    pub items: Option<Vec<Route>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RouteListWarning>,
}

impl client::ResponseResult for RouteList {}


/// Represents a Cloud Router resource. For more information about Cloud Router, read the Cloud Router overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list routers](RouterAggregatedListCall) (none)
/// * [delete routers](RouterDeleteCall) (none)
/// * [get routers](RouterGetCall) (response)
/// * [get nat mapping info routers](RouterGetNatMappingInfoCall) (none)
/// * [get router status routers](RouterGetRouterStatuCall) (none)
/// * [insert routers](RouterInsertCall) (request)
/// * [list routers](RouterListCall) (none)
/// * [patch routers](RouterPatchCall) (request)
/// * [preview routers](RouterPreviewCall) (request)
/// * [update routers](RouterUpdateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Router {
    /// BGP information specific to this router.
    
    pub bgp: Option<RouterBgp>,
    /// BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273.
    #[serde(rename="bgpPeers")]
    
    pub bgp_peers: Option<Vec<RouterBgpPeer>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Indicates if a router is dedicated for use with encrypted VLAN attachments (interconnectAttachments).
    #[serde(rename="encryptedInterconnectRouter")]
    
    pub encrypted_interconnect_router: Option<bool>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both.
    
    pub interfaces: Option<Vec<RouterInterface>>,
    /// [Output Only] Type of resource. Always compute#router for routers.
    
    pub kind: Option<String>,
    /// Keys used for MD5 authentication.
    #[serde(rename="md5AuthenticationKeys")]
    
    pub md5_authentication_keys: Option<Vec<RouterMd5AuthenticationKey>>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// A list of NAT services created in this router.
    
    pub nats: Option<Vec<RouterNat>>,
    /// URI of the network to which this router belongs.
    
    pub network: Option<String>,
    /// [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
}

impl client::RequestValue for Router {}
impl client::Resource for Router {}
impl client::ResponseResult for Router {}


/// Description-tagged IP ranges for the router to advertise.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterAdvertisedIpRange {
    /// User-specified description for the IP range.
    
    pub description: Option<String>,
    /// The IP range to advertise. The value must be a CIDR-formatted string.
    
    pub range: Option<String>,
}

impl client::Part for RouterAdvertisedIpRange {}


/// Contains a list of routers.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list routers](RouterAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Router resources.
    
    pub items: Option<HashMap<String, RoutersScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RouterAggregatedListWarning>,
}

impl client::ResponseResult for RouterAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterBgp {
    /// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
    #[serde(rename="advertiseMode")]
    
    pub advertise_mode: Option<RouterBgpAdvertiseModeEnum>,
    /// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
    #[serde(rename="advertisedGroups")]
    
    pub advertised_groups: Option<Vec<RouterBgpAdvertisedGroupsEnum>>,
    /// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
    #[serde(rename="advertisedIpRanges")]
    
    pub advertised_ip_ranges: Option<Vec<RouterAdvertisedIpRange>>,
    /// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
    
    pub asn: Option<u32>,
    /// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
    #[serde(rename="keepaliveInterval")]
    
    pub keepalive_interval: Option<u32>,
}

impl client::Part for RouterBgp {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterBgpPeer {
    /// User-specified flag to indicate which mode to use for advertisement.
    #[serde(rename="advertiseMode")]
    
    pub advertise_mode: Option<RouterBgpPeerAdvertiseModeEnum>,
    /// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
    #[serde(rename="advertisedGroups")]
    
    pub advertised_groups: Option<Vec<RouterBgpPeerAdvertisedGroupsEnum>>,
    /// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
    #[serde(rename="advertisedIpRanges")]
    
    pub advertised_ip_ranges: Option<Vec<RouterAdvertisedIpRange>>,
    /// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
    #[serde(rename="advertisedRoutePriority")]
    
    pub advertised_route_priority: Option<u32>,
    /// BFD configuration for the BGP peering.
    
    pub bfd: Option<RouterBgpPeerBfd>,
    /// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
    
    pub enable: Option<RouterBgpPeerEnableEnum>,
    /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    #[serde(rename="enableIpv6")]
    
    pub enable_ipv6: Option<bool>,
    /// Name of the interface the BGP peer is associated with.
    #[serde(rename="interfaceName")]
    
    pub interface_name: Option<String>,
    /// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
    /// IPv6 address of the interface inside Google Cloud Platform.
    #[serde(rename="ipv6NexthopAddress")]
    
    pub ipv6_nexthop_address: Option<String>,
    /// [Output Only] The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted. 
    #[serde(rename="managementType")]
    
    pub management_type: Option<RouterBgpPeerManagementTypeEnum>,
    /// Present if MD5 authentication is enabled for the peering. Must be the name of one of the entries in the Router.md5_authentication_keys. The field must comply with RFC1035.
    #[serde(rename="md5AuthenticationKeyName")]
    
    pub md5_authentication_key_name: Option<String>,
    /// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
    #[serde(rename="peerAsn")]
    
    pub peer_asn: Option<u32>,
    /// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
    #[serde(rename="peerIpAddress")]
    
    pub peer_ip_address: Option<String>,
    /// IPv6 address of the BGP interface outside Google Cloud Platform.
    #[serde(rename="peerIpv6NexthopAddress")]
    
    pub peer_ipv6_nexthop_address: Option<String>,
    /// URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session.
    #[serde(rename="routerApplianceInstance")]
    
    pub router_appliance_instance: Option<String>,
}

impl client::Part for RouterBgpPeer {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterBgpPeerBfd {
    /// The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
    #[serde(rename="minReceiveInterval")]
    
    pub min_receive_interval: Option<u32>,
    /// The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
    #[serde(rename="minTransmitInterval")]
    
    pub min_transmit_interval: Option<u32>,
    /// The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5.
    
    pub multiplier: Option<u32>,
    /// The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
    #[serde(rename="sessionInitializationMode")]
    
    pub session_initialization_mode: Option<RouterBgpPeerBfdSessionInitializationModeEnum>,
}

impl client::Part for RouterBgpPeerBfd {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterInterface {
    /// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
    #[serde(rename="ipRange")]
    
    pub ip_range: Option<String>,
    /// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
    #[serde(rename="linkedInterconnectAttachment")]
    
    pub linked_interconnect_attachment: Option<String>,
    /// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
    #[serde(rename="linkedVpnTunnel")]
    
    pub linked_vpn_tunnel: Option<String>,
    /// [Output Only] The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted. 
    #[serde(rename="managementType")]
    
    pub management_type: Option<RouterInterfaceManagementTypeEnum>,
    /// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM.
    #[serde(rename="privateIpAddress")]
    
    pub private_ip_address: Option<String>,
    /// Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename="redundantInterface")]
    
    pub redundant_interface: Option<String>,
    /// The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here.
    
    pub subnetwork: Option<String>,
}

impl client::Part for RouterInterface {}


/// Contains a list of Router resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list routers](RouterListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Router resources.
    
    pub items: Option<Vec<Router>>,
    /// [Output Only] Type of resource. Always compute#router for routers.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<RouterListWarning>,
}

impl client::ResponseResult for RouterList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterMd5AuthenticationKey {
    /// [Input only] Value of the key. For patch and update calls, it can be skipped to copy the value from the previous configuration. This is allowed if the key with the same name existed before the operation. Maximum length is 80 characters. Can only contain printable ASCII characters.
    
    pub key: Option<String>,
    /// Name used to identify the key. Must be unique within a router. Must be referenced by at least one bgpPeer. Must comply with RFC1035.
    
    pub name: Option<String>,
}

impl client::Part for RouterMd5AuthenticationKey {}


/// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterNat {
    /// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
    #[serde(rename="drainNatIps")]
    
    pub drain_nat_ips: Option<Vec<String>>,
    /// Enable Dynamic Port Allocation. If not specified, it is disabled by default. If set to true, - Dynamic Port Allocation will be enabled on this NAT config. - enableEndpointIndependentMapping cannot be set to true. - If minPorts is set, minPortsPerVm must be set to a power of two greater than or equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. 
    #[serde(rename="enableDynamicPortAllocation")]
    
    pub enable_dynamic_port_allocation: Option<bool>,
    /// no description provided
    #[serde(rename="enableEndpointIndependentMapping")]
    
    pub enable_endpoint_independent_mapping: Option<bool>,
    /// List of NAT-ted endpoint types supported by the Nat Gateway. If the list is empty, then it will be equivalent to include ENDPOINT_TYPE_VM
    #[serde(rename="endpointTypes")]
    
    pub endpoint_types: Option<Vec<RouterNatEndpointTypesEnum>>,
    /// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    #[serde(rename="icmpIdleTimeoutSec")]
    
    pub icmp_idle_timeout_sec: Option<i32>,
    /// Configure logging on this NAT.
    #[serde(rename="logConfig")]
    
    pub log_config: Option<RouterNatLogConfig>,
    /// Maximum number of ports allocated to a VM from this NAT config when Dynamic Port Allocation is enabled. If Dynamic Port Allocation is not enabled, this field has no effect. If Dynamic Port Allocation is enabled, and this field is set, it must be set to a power of two greater than minPortsPerVm, or 64 if minPortsPerVm is not set. If Dynamic Port Allocation is enabled and this field is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
    #[serde(rename="maxPortsPerVm")]
    
    pub max_ports_per_vm: Option<i32>,
    /// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
    #[serde(rename="minPortsPerVm")]
    
    pub min_ports_per_vm: Option<i32>,
    /// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
    
    pub name: Option<String>,
    /// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty. 
    #[serde(rename="natIpAllocateOption")]
    
    pub nat_ip_allocate_option: Option<RouterNatNatIpAllocateOptionEnum>,
    /// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
    #[serde(rename="natIps")]
    
    pub nat_ips: Option<Vec<String>>,
    /// A list of rules associated with this NAT.
    
    pub rules: Option<Vec<RouterNatRule>>,
    /// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
    #[serde(rename="sourceSubnetworkIpRangesToNat")]
    
    pub source_subnetwork_ip_ranges_to_nat: Option<RouterNatSourceSubnetworkIpRangesToNatEnum>,
    /// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
    
    pub subnetworks: Option<Vec<RouterNatSubnetworkToNat>>,
    /// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
    #[serde(rename="tcpEstablishedIdleTimeoutSec")]
    
    pub tcp_established_idle_timeout_sec: Option<i32>,
    /// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
    #[serde(rename="tcpTimeWaitTimeoutSec")]
    
    pub tcp_time_wait_timeout_sec: Option<i32>,
    /// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
    #[serde(rename="tcpTransitoryIdleTimeoutSec")]
    
    pub tcp_transitory_idle_timeout_sec: Option<i32>,
    /// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    #[serde(rename="udpIdleTimeoutSec")]
    
    pub udp_idle_timeout_sec: Option<i32>,
}

impl client::Part for RouterNat {}


/// Configuration of logging on a NAT.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterNatLogConfig {
    /// Indicates whether or not to export logs. This is false by default.
    
    pub enable: Option<bool>,
    /// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful. 
    
    pub filter: Option<RouterNatLogConfigFilterEnum>,
}

impl client::Part for RouterNatLogConfig {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterNatRule {
    /// The action to be enforced for traffic that matches this rule.
    
    pub action: Option<RouterNatRuleAction>,
    /// An optional description of this rule.
    
    pub description: Option<String>,
    /// CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')" "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'" The following example is a valid match expression for private NAT: "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    #[serde(rename="match")]
    
    pub match_: Option<String>,
    /// An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    #[serde(rename="ruleNumber")]
    
    pub rule_number: Option<u32>,
}

impl client::Part for RouterNatRule {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterNatRuleAction {
    /// A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
    #[serde(rename="sourceNatActiveIps")]
    
    pub source_nat_active_ips: Option<Vec<String>>,
    /// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT.
    #[serde(rename="sourceNatDrainIps")]
    
    pub source_nat_drain_ips: Option<Vec<String>>,
}

impl client::Part for RouterNatRuleAction {}


/// Defines the IP ranges that want to use NAT for a subnetwork.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterNatSubnetworkToNat {
    /// URL for the subnetwork resource that will use NAT.
    
    pub name: Option<String>,
    /// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
    #[serde(rename="secondaryIpRangeNames")]
    
    pub secondary_ip_range_names: Option<Vec<String>>,
    /// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
    #[serde(rename="sourceIpRangesToNat")]
    
    pub source_ip_ranges_to_nat: Option<Vec<RouterNatSubnetworkToNatSourceIpRangesToNatEnum>>,
}

impl client::Part for RouterNatSubnetworkToNat {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterStatus {
    /// Best routes for this router's network.
    #[serde(rename="bestRoutes")]
    
    pub best_routes: Option<Vec<Route>>,
    /// Best routes learned by this router.
    #[serde(rename="bestRoutesForRouter")]
    
    pub best_routes_for_router: Option<Vec<Route>>,
    /// no description provided
    #[serde(rename="bgpPeerStatus")]
    
    pub bgp_peer_status: Option<Vec<RouterStatusBgpPeerStatus>>,
    /// no description provided
    #[serde(rename="natStatus")]
    
    pub nat_status: Option<Vec<RouterStatusNatStatus>>,
    /// URI of the network to which this router belongs.
    
    pub network: Option<String>,
}

impl client::Part for RouterStatus {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterStatusBgpPeerStatus {
    /// Routes that were advertised to the remote BGP peer
    #[serde(rename="advertisedRoutes")]
    
    pub advertised_routes: Option<Vec<Route>>,
    /// no description provided
    #[serde(rename="bfdStatus")]
    
    pub bfd_status: Option<BfdStatus>,
    /// Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    #[serde(rename="enableIpv6")]
    
    pub enable_ipv6: Option<bool>,
    /// IP address of the local BGP interface.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
    /// IPv6 address of the local BGP interface.
    #[serde(rename="ipv6NexthopAddress")]
    
    pub ipv6_nexthop_address: Option<String>,
    /// URL of the VPN tunnel that this BGP peer controls.
    #[serde(rename="linkedVpnTunnel")]
    
    pub linked_vpn_tunnel: Option<String>,
    /// Informs whether MD5 authentication is enabled on this BGP peer.
    #[serde(rename="md5AuthEnabled")]
    
    pub md5_auth_enabled: Option<bool>,
    /// Name of this BGP peer. Unique within the Routers resource.
    
    pub name: Option<String>,
    /// Number of routes learned from the remote BGP Peer.
    #[serde(rename="numLearnedRoutes")]
    
    pub num_learned_routes: Option<u32>,
    /// IP address of the remote BGP interface.
    #[serde(rename="peerIpAddress")]
    
    pub peer_ip_address: Option<String>,
    /// IPv6 address of the remote BGP interface.
    #[serde(rename="peerIpv6NexthopAddress")]
    
    pub peer_ipv6_nexthop_address: Option<String>,
    /// [Output only] URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance is the peer side of the BGP session.
    #[serde(rename="routerApplianceInstance")]
    
    pub router_appliance_instance: Option<String>,
    /// The state of the BGP session. For a list of possible values for this field, see BGP session states.
    
    pub state: Option<String>,
    /// Status of the BGP peer: {UP, DOWN}
    
    pub status: Option<RouterStatusBgpPeerStatuStatusEnum>,
    /// Indicates why particular status was returned.
    #[serde(rename="statusReason")]
    
    pub status_reason: Option<RouterStatusBgpPeerStatuStatusReasonEnum>,
    /// Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds
    
    pub uptime: Option<String>,
    /// Time this session has been up, in seconds. Format: 145
    #[serde(rename="uptimeSeconds")]
    
    pub uptime_seconds: Option<String>,
}

impl client::Part for RouterStatusBgpPeerStatus {}


/// Status of a NAT contained in this router.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterStatusNatStatus {
    /// A list of IPs auto-allocated for NAT. Example: ["1.1.1.1", "129.2.16.89"]
    #[serde(rename="autoAllocatedNatIps")]
    
    pub auto_allocated_nat_ips: Option<Vec<String>>,
    /// A list of IPs auto-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"].
    #[serde(rename="drainAutoAllocatedNatIps")]
    
    pub drain_auto_allocated_nat_ips: Option<Vec<String>>,
    /// A list of IPs user-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"].
    #[serde(rename="drainUserAllocatedNatIps")]
    
    pub drain_user_allocated_nat_ips: Option<Vec<String>>,
    /// The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is *not* used.
    #[serde(rename="minExtraNatIpsNeeded")]
    
    pub min_extra_nat_ips_needed: Option<i32>,
    /// Unique name of this NAT.
    
    pub name: Option<String>,
    /// Number of VM endpoints (i.e., Nics) that can use NAT.
    #[serde(rename="numVmEndpointsWithNatMappings")]
    
    pub num_vm_endpoints_with_nat_mappings: Option<i32>,
    /// Status of rules in this NAT.
    #[serde(rename="ruleStatus")]
    
    pub rule_status: Option<Vec<RouterStatusNatStatusNatRuleStatus>>,
    /// A list of fully qualified URLs of reserved IP address resources.
    #[serde(rename="userAllocatedNatIpResources")]
    
    pub user_allocated_nat_ip_resources: Option<Vec<String>>,
    /// A list of IPs user-allocated for NAT. They will be raw IP strings like "179.12.26.133".
    #[serde(rename="userAllocatedNatIps")]
    
    pub user_allocated_nat_ips: Option<Vec<String>>,
}

impl client::Part for RouterStatusNatStatus {}


/// Status of a NAT Rule contained in this NAT.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterStatusNatStatusNatRuleStatus {
    /// A list of active IPs for NAT. Example: ["1.1.1.1", "179.12.26.133"].
    #[serde(rename="activeNatIps")]
    
    pub active_nat_ips: Option<Vec<String>>,
    /// A list of IPs for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"].
    #[serde(rename="drainNatIps")]
    
    pub drain_nat_ips: Option<Vec<String>>,
    /// The number of extra IPs to allocate. This will be greater than 0 only if the existing IPs in this NAT Rule are NOT enough to allow all configured VMs to use NAT.
    #[serde(rename="minExtraIpsNeeded")]
    
    pub min_extra_ips_needed: Option<i32>,
    /// Number of VM endpoints (i.e., NICs) that have NAT Mappings from this NAT Rule.
    #[serde(rename="numVmEndpointsWithNatMappings")]
    
    pub num_vm_endpoints_with_nat_mappings: Option<i32>,
    /// Rule number of the rule.
    #[serde(rename="ruleNumber")]
    
    pub rule_number: Option<i32>,
}

impl client::Part for RouterStatusNatStatusNatRuleStatus {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get router status routers](RouterGetRouterStatuCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterStatusResponse {
    /// Type of resource.
    
    pub kind: Option<String>,
    /// no description provided
    
    pub result: Option<RouterStatus>,
}

impl client::ResponseResult for RouterStatusResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [preview routers](RouterPreviewCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RoutersPreviewResponse {
    /// Preview of given router.
    
    pub resource: Option<Router>,
}

impl client::ResponseResult for RoutersPreviewResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RoutersScopedList {
    /// A list of routers contained in this scope.
    
    pub routers: Option<Vec<Router>>,
    /// Informational warning which replaces the list of routers when the list is empty.
    
    pub warning: Option<RoutersScopedListWarning>,
}

impl client::Part for RoutersScopedList {}


/// This is deprecated and has no effect. Do not use.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Rule {
    /// This is deprecated and has no effect. Do not use.
    
    pub action: Option<RuleActionEnum>,
    /// This is deprecated and has no effect. Do not use.
    
    pub conditions: Option<Vec<Condition>>,
    /// This is deprecated and has no effect. Do not use.
    
    pub description: Option<String>,
    /// This is deprecated and has no effect. Do not use.
    
    pub ins: Option<Vec<String>>,
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="logConfigs")]
    
    pub log_configs: Option<Vec<LogConfig>>,
    /// This is deprecated and has no effect. Do not use.
    #[serde(rename="notIns")]
    
    pub not_ins: Option<Vec<String>>,
    /// This is deprecated and has no effect. Do not use.
    
    pub permissions: Option<Vec<String>>,
}

impl client::Part for Rule {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SSLHealthCheck {
    /// The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
    
    pub port: Option<i32>,
    /// Not supported.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    #[serde(rename="portSpecification")]
    
    pub port_specification: Option<SSLHealthCheckPortSpecificationEnum>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<SSLHealthCheckProxyHeaderEnum>,
    /// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake.
    
    pub request: Option<String>,
    /// Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
    
    pub response: Option<String>,
}

impl client::Part for SSLHealthCheck {}


/// DEPRECATED: Please use compute#savedDisk instead. An instance-attached disk resource.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SavedAttachedDisk {
    /// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
    #[serde(rename="autoDelete")]
    
    pub auto_delete: Option<bool>,
    /// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
    
    pub boot: Option<bool>,
    /// Specifies the name of the disk attached to the source instance.
    #[serde(rename="deviceName")]
    
    pub device_name: Option<String>,
    /// The encryption key for the disk.
    #[serde(rename="diskEncryptionKey")]
    
    pub disk_encryption_key: Option<CustomerEncryptionKey>,
    /// The size of the disk in base-2 GB.
    #[serde(rename="diskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub disk_size_gb: Option<i64>,
    /// [Output Only] URL of the disk type resource. For example: projects/project /zones/zone/diskTypes/pd-standard or pd-ssd
    #[serde(rename="diskType")]
    
    pub disk_type: Option<String>,
    /// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    #[serde(rename="guestOsFeatures")]
    
    pub guest_os_features: Option<Vec<GuestOsFeature>>,
    /// Specifies zero-based index of the disk that is attached to the source instance.
    
    pub index: Option<i32>,
    /// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
    
    pub interface: Option<SavedAttachedDiskInterfaceEnum>,
    /// [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
    
    pub kind: Option<String>,
    /// [Output Only] Any valid publicly visible licenses.
    
    pub licenses: Option<Vec<String>>,
    /// The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY.
    
    pub mode: Option<SavedAttachedDiskModeEnum>,
    /// Specifies a URL of the disk attached to the source instance.
    
    pub source: Option<String>,
    /// [Output Only] A size of the storage used by the disk's snapshot by this machine image.
    #[serde(rename="storageBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub storage_bytes: Option<i64>,
    /// [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    #[serde(rename="storageBytesStatus")]
    
    pub storage_bytes_status: Option<SavedAttachedDiskStorageBytesStatusEnum>,
    /// Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
    #[serde(rename="type")]
    
    pub type_: Option<SavedAttachedDiskTypeEnum>,
}

impl client::Part for SavedAttachedDisk {}


/// An instance-attached disk resource.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SavedDisk {
    /// [Output Only] The architecture of the attached disk.
    
    pub architecture: Option<SavedDiskArchitectureEnum>,
    /// [Output Only] Type of the resource. Always compute#savedDisk for attached disks.
    
    pub kind: Option<String>,
    /// Specifies a URL of the disk attached to the source instance.
    #[serde(rename="sourceDisk")]
    
    pub source_disk: Option<String>,
    /// [Output Only] Size of the individual disk snapshot used by this machine image.
    #[serde(rename="storageBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub storage_bytes: Option<i64>,
    /// [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    #[serde(rename="storageBytesStatus")]
    
    pub storage_bytes_status: Option<SavedDiskStorageBytesStatusEnum>,
}

impl client::Part for SavedDisk {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ScalingScheduleStatus {
    /// [Output Only] The last time the scaling schedule became active. Note: this is a timestamp when a schedule actually became active, not when it was planned to do so. The timestamp is in RFC3339 text format.
    #[serde(rename="lastStartTime")]
    
    pub last_start_time: Option<String>,
    /// [Output Only] The next time the scaling schedule is to become active. Note: this is a timestamp when a schedule is planned to run, but the actual time might be slightly different. The timestamp is in RFC3339 text format.
    #[serde(rename="nextStartTime")]
    
    pub next_start_time: Option<String>,
    /// [Output Only] The current state of a scaling schedule.
    
    pub state: Option<ScalingScheduleStatuStateEnum>,
}

impl client::Part for ScalingScheduleStatus {}


/// Sets the scheduling options for an Instance.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set scheduling instances](InstanceSetSchedulingCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Scheduling {
    /// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
    #[serde(rename="automaticRestart")]
    
    pub automatic_restart: Option<bool>,
    /// Specifies the termination action for the instance.
    #[serde(rename="instanceTerminationAction")]
    
    pub instance_termination_action: Option<SchedulingInstanceTerminationActionEnum>,
    /// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
    #[serde(rename="locationHint")]
    
    pub location_hint: Option<String>,
    /// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
    #[serde(rename="minNodeCpus")]
    
    pub min_node_cpus: Option<i32>,
    /// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
    #[serde(rename="nodeAffinities")]
    
    pub node_affinities: Option<Vec<SchedulingNodeAffinity>>,
    /// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
    #[serde(rename="onHostMaintenance")]
    
    pub on_host_maintenance: Option<SchedulingOnHostMaintenanceEnum>,
    /// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
    
    pub preemptible: Option<bool>,
    /// Specifies the provisioning model of the instance.
    #[serde(rename="provisioningModel")]
    
    pub provisioning_model: Option<SchedulingProvisioningModelEnum>,
}

impl client::RequestValue for Scheduling {}


/// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SchedulingNodeAffinity {
    /// Corresponds to the label key of Node resource.
    
    pub key: Option<String>,
    /// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
    
    pub operator: Option<SchedulingNodeAffinityOperatorEnum>,
    /// Corresponds to the label values of Node resource.
    
    pub values: Option<Vec<String>>,
}

impl client::Part for SchedulingNodeAffinity {}


/// An instance’s screenshot.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get screenshot instances](InstanceGetScreenshotCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Screenshot {
    /// [Output Only] The Base64-encoded screenshot data.
    
    pub contents: Option<String>,
    /// [Output Only] Type of the resource. Always compute#screenshot for the screenshots.
    
    pub kind: Option<String>,
}

impl client::ResponseResult for Screenshot {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list security policies](SecurityPolicyAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesAggregatedList {
    /// no description provided
    
    pub etag: Option<String>,
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SecurityPoliciesScopedList resources.
    
    pub items: Option<HashMap<String, SecurityPoliciesScopedList>>,
    /// [Output Only] Type of resource. Always compute#securityPolicyAggregatedList for lists of Security Policies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SecurityPoliciesAggregatedListWarning>,
}

impl client::ResponseResult for SecurityPoliciesAggregatedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list preconfigured expression sets security policies](SecurityPolicyListPreconfiguredExpressionSetCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesListPreconfiguredExpressionSetsResponse {
    /// no description provided
    #[serde(rename="preconfiguredExpressionSets")]
    
    pub preconfigured_expression_sets: Option<SecurityPoliciesWafConfig>,
}

impl client::ResponseResult for SecurityPoliciesListPreconfiguredExpressionSetsResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesScopedList {
    /// A list of SecurityPolicies contained in this scope.
    #[serde(rename="securityPolicies")]
    
    pub security_policies: Option<Vec<SecurityPolicy>>,
    /// Informational warning which replaces the list of security policies when the list is empty.
    
    pub warning: Option<SecurityPoliciesScopedListWarning>,
}

impl client::Part for SecurityPoliciesScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesWafConfig {
    /// no description provided
    #[serde(rename="wafRules")]
    
    pub waf_rules: Option<PreconfiguredWafSet>,
}

impl client::Part for SecurityPoliciesWafConfig {}


/// Represents a Google Cloud Armor security policy resource. Only external backend services that use load balancers can reference a security policy. For more information, see Google Cloud Armor security policy overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region security policies](RegionSecurityPolicyGetCall) (response)
/// * [insert region security policies](RegionSecurityPolicyInsertCall) (request)
/// * [patch region security policies](RegionSecurityPolicyPatchCall) (request)
/// * [get security policies](SecurityPolicyGetCall) (response)
/// * [insert security policies](SecurityPolicyInsertCall) (request)
/// * [patch security policies](SecurityPolicyPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicy {
    /// no description provided
    #[serde(rename="adaptiveProtectionConfig")]
    
    pub adaptive_protection_config: Option<SecurityPolicyAdaptiveProtectionConfig>,
    /// no description provided
    #[serde(rename="advancedOptionsConfig")]
    
    pub advanced_options_config: Option<SecurityPolicyAdvancedOptionsConfig>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// no description provided
    #[serde(rename="ddosProtectionConfig")]
    
    pub ddos_protection_config: Option<SecurityPolicyDdosProtectionConfig>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output only] Type of the resource. Always compute#securityPolicyfor security policies
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// no description provided
    #[serde(rename="recaptchaOptionsConfig")]
    
    pub recaptcha_options_config: Option<SecurityPolicyRecaptchaOptionsConfig>,
    /// [Output Only] URL of the region where the regional security policy resides. This field is not applicable to global security policies.
    
    pub region: Option<String>,
    /// A list of rules that belong to this policy. There must always be a default rule which is a rule with priority 2147483647 and match all condition (for the match condition this means match "*" for srcIpRanges and for the networkMatch condition every field must be either match "*" or not set). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
    
    pub rules: Option<Vec<SecurityPolicyRule>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. This field can be set only at resource creation time.
    #[serde(rename="type")]
    
    pub type_: Option<SecurityPolicyTypeEnum>,
}

impl client::RequestValue for SecurityPolicy {}
impl client::ResponseResult for SecurityPolicy {}


/// Configuration options for Cloud Armor Adaptive Protection (CAAP).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyAdaptiveProtectionConfig {
    /// If set to true, enables Cloud Armor Machine Learning.
    #[serde(rename="layer7DdosDefenseConfig")]
    
    pub layer7_ddos_defense_config: Option<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig>,
}

impl client::Part for SecurityPolicyAdaptiveProtectionConfig {}


/// Configuration options for L7 DDoS detection.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
    /// If set to true, enables CAAP for L7 DDoS detection.
    
    pub enable: Option<bool>,
    /// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
    #[serde(rename="ruleVisibility")]
    
    pub rule_visibility: Option<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibilityEnum>,
}

impl client::Part for SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyAdvancedOptionsConfig {
    /// Custom configuration to apply the JSON parsing. Only applicable when json_parsing is set to STANDARD.
    #[serde(rename="jsonCustomConfig")]
    
    pub json_custom_config: Option<SecurityPolicyAdvancedOptionsConfigJsonCustomConfig>,
    /// no description provided
    #[serde(rename="jsonParsing")]
    
    pub json_parsing: Option<SecurityPolicyAdvancedOptionsConfigJsonParsingEnum>,
    /// no description provided
    #[serde(rename="logLevel")]
    
    pub log_level: Option<SecurityPolicyAdvancedOptionsConfigLogLevelEnum>,
}

impl client::Part for SecurityPolicyAdvancedOptionsConfig {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {
    /// A list of custom Content-Type header values to apply the JSON parsing. As per RFC 1341, a Content-Type header value has the following format: Content-Type := type "/" subtype *[";" parameter] When configuring a custom Content-Type header value, only the type/subtype needs to be specified, and the parameters should be excluded.
    #[serde(rename="contentTypes")]
    
    pub content_types: Option<Vec<String>>,
}

impl client::Part for SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyDdosProtectionConfig {
    /// no description provided
    #[serde(rename="ddosProtection")]
    
    pub ddos_protection: Option<SecurityPolicyDdosProtectionConfigDdosProtectionEnum>,
}

impl client::Part for SecurityPolicyDdosProtectionConfig {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region security policies](RegionSecurityPolicyListCall) (response)
/// * [list security policies](SecurityPolicyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SecurityPolicy resources.
    
    pub items: Option<Vec<SecurityPolicy>>,
    /// [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SecurityPolicyListWarning>,
}

impl client::ResponseResult for SecurityPolicyList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRecaptchaOptionsConfig {
    /// An optional field to supply a reCAPTCHA site key to be used for all the rules using the redirect action with the type of GOOGLE_RECAPTCHA under the security policy. The specified site key needs to be created from the reCAPTCHA API. The user is responsible for the validity of the specified site key. If not specified, a Google-managed site key is used.
    #[serde(rename="redirectSiteKey")]
    
    pub redirect_site_key: Option<String>,
}

impl client::Part for SecurityPolicyRecaptchaOptionsConfig {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set edge security policy backend buckets](BackendBucketSetEdgeSecurityPolicyCall) (request)
/// * [set edge security policy backend services](BackendServiceSetEdgeSecurityPolicyCall) (request)
/// * [set security policy backend services](BackendServiceSetSecurityPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyReference {
    /// no description provided
    #[serde(rename="securityPolicy")]
    
    pub security_policy: Option<String>,
}

impl client::RequestValue for SecurityPolicyReference {}


/// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add rule security policies](SecurityPolicyAddRuleCall) (request)
/// * [get rule security policies](SecurityPolicyGetRuleCall) (response)
/// * [patch rule security policies](SecurityPolicyPatchRuleCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRule {
    /// The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502). - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this. 
    
    pub action: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Optional, additional actions that are performed on headers.
    #[serde(rename="headerAction")]
    
    pub header_action: Option<SecurityPolicyRuleHttpHeaderAction>,
    /// [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
    
    pub kind: Option<String>,
    /// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
    #[serde(rename="match")]
    
    pub match_: Option<SecurityPolicyRuleMatcher>,
    /// If set to true, the specified action is not enforced.
    
    pub preview: Option<bool>,
    /// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
    
    pub priority: Option<i32>,
    /// Must be specified if the action is "rate_based_ban" or "throttle". Cannot be specified for any other actions.
    #[serde(rename="rateLimitOptions")]
    
    pub rate_limit_options: Option<SecurityPolicyRuleRateLimitOptions>,
    /// Parameters defining the redirect action. Cannot be specified for any other actions.
    #[serde(rename="redirectOptions")]
    
    pub redirect_options: Option<SecurityPolicyRuleRedirectOptions>,
}

impl client::RequestValue for SecurityPolicyRule {}
impl client::ResponseResult for SecurityPolicyRule {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleHttpHeaderAction {
    /// The list of request headers to add or overwrite if they're already present.
    #[serde(rename="requestHeadersToAdds")]
    
    pub request_headers_to_adds: Option<Vec<SecurityPolicyRuleHttpHeaderActionHttpHeaderOption>>,
}

impl client::Part for SecurityPolicyRuleHttpHeaderAction {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {
    /// The name of the header to set.
    #[serde(rename="headerName")]
    
    pub header_name: Option<String>,
    /// The value to set the named header to.
    #[serde(rename="headerValue")]
    
    pub header_value: Option<String>,
}

impl client::Part for SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {}


/// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleMatcher {
    /// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
    
    pub config: Option<SecurityPolicyRuleMatcherConfig>,
    /// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
    
    pub expr: Option<Expr>,
    /// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
    #[serde(rename="versionedExpr")]
    
    pub versioned_expr: Option<SecurityPolicyRuleMatcherVersionedExprEnum>,
}

impl client::Part for SecurityPolicyRuleMatcher {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleMatcherConfig {
    /// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
    #[serde(rename="srcIpRanges")]
    
    pub src_ip_ranges: Option<Vec<String>>,
}

impl client::Part for SecurityPolicyRuleMatcherConfig {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleRateLimitOptions {
    /// Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
    #[serde(rename="banDurationSec")]
    
    pub ban_duration_sec: Option<i32>,
    /// Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
    #[serde(rename="banThreshold")]
    
    pub ban_threshold: Option<SecurityPolicyRuleRateLimitOptionsThreshold>,
    /// Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.
    #[serde(rename="conformAction")]
    
    pub conform_action: Option<String>,
    /// Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. 
    #[serde(rename="enforceOnKey")]
    
    pub enforce_on_key: Option<SecurityPolicyRuleRateLimitOptionEnforceOnKeyEnum>,
    /// Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
    #[serde(rename="enforceOnKeyName")]
    
    pub enforce_on_key_name: Option<String>,
    /// Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are "deny(status)", where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceedRedirectOptions below.
    #[serde(rename="exceedAction")]
    
    pub exceed_action: Option<String>,
    /// Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
    #[serde(rename="exceedRedirectOptions")]
    
    pub exceed_redirect_options: Option<SecurityPolicyRuleRedirectOptions>,
    /// Threshold at which to begin ratelimiting.
    #[serde(rename="rateLimitThreshold")]
    
    pub rate_limit_threshold: Option<SecurityPolicyRuleRateLimitOptionsThreshold>,
}

impl client::Part for SecurityPolicyRuleRateLimitOptions {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleRateLimitOptionsThreshold {
    /// Number of HTTP(S) requests for calculating the threshold.
    
    pub count: Option<i32>,
    /// Interval over which the threshold is computed.
    #[serde(rename="intervalSec")]
    
    pub interval_sec: Option<i32>,
}

impl client::Part for SecurityPolicyRuleRateLimitOptionsThreshold {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyRuleRedirectOptions {
    /// Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA.
    
    pub target: Option<String>,
    /// Type of the redirect action.
    #[serde(rename="type")]
    
    pub type_: Option<SecurityPolicyRuleRedirectOptionTypeEnum>,
}

impl client::Part for SecurityPolicyRuleRedirectOptions {}


/// The authentication and authorization settings for a BackendService.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecuritySettings {
    /// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
    #[serde(rename="clientTlsPolicy")]
    
    pub client_tls_policy: Option<String>,
    /// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
    #[serde(rename="subjectAltNames")]
    
    pub subject_alt_names: Option<Vec<String>>,
}

impl client::Part for SecuritySettings {}


/// An instance serial console output.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get serial port output instances](InstanceGetSerialPortOutputCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SerialPortOutput {
    /// [Output Only] The contents of the console output.
    
    pub contents: Option<String>,
    /// [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output.
    
    pub kind: Option<String>,
    /// [Output Only] The position of the next byte of content, regardless of whether the content exists, following the output returned in the `contents` property. Use this value in the next request as the start parameter.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub next: Option<i64>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer (1 MB), older output is overwritten by newer content. The output start value will indicate the byte position of the output that was returned, which might be different than the `start` value that was specified in the request.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub start: Option<i64>,
}

impl client::ResponseResult for SerialPortOutput {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServerBinding {
    /// no description provided
    #[serde(rename="type")]
    
    pub type_: Option<ServerBindingTypeEnum>,
}

impl client::Part for ServerBinding {}


/// A service account.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAccount {
    /// Email address of the service account.
    
    pub email: Option<String>,
    /// The list of scopes to be made available for this service account.
    
    pub scopes: Option<Vec<String>>,
}

impl client::Part for ServiceAccount {}


/// Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service. next tag = 20
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list service attachments](ServiceAttachmentAggregatedListCall) (none)
/// * [delete service attachments](ServiceAttachmentDeleteCall) (none)
/// * [get service attachments](ServiceAttachmentGetCall) (response)
/// * [get iam policy service attachments](ServiceAttachmentGetIamPolicyCall) (none)
/// * [insert service attachments](ServiceAttachmentInsertCall) (request)
/// * [list service attachments](ServiceAttachmentListCall) (none)
/// * [patch service attachments](ServiceAttachmentPatchCall) (request)
/// * [set iam policy service attachments](ServiceAttachmentSetIamPolicyCall) (none)
/// * [test iam permissions service attachments](ServiceAttachmentTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachment {
    /// [Output Only] An array of connections for all the consumers connected to this service attachment.
    #[serde(rename="connectedEndpoints")]
    
    pub connected_endpoints: Option<Vec<ServiceAttachmentConnectedEndpoint>>,
    /// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
    #[serde(rename="connectionPreference")]
    
    pub connection_preference: Option<ServiceAttachmentConnectionPreferenceEnum>,
    /// Projects that are allowed to connect to this service attachment.
    #[serde(rename="consumerAcceptLists")]
    
    pub consumer_accept_lists: Option<Vec<ServiceAttachmentConsumerProjectLimit>>,
    /// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
    #[serde(rename="consumerRejectLists")]
    
    pub consumer_reject_lists: Option<Vec<String>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
    #[serde(rename="domainNames")]
    
    pub domain_names: Option<Vec<String>>,
    /// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
    #[serde(rename="enableProxyProtocol")]
    
    pub enable_proxy_protocol: Option<bool>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
    #[serde(rename="natSubnets")]
    
    pub nat_subnets: Option<Vec<String>>,
    /// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
    #[serde(rename="producerForwardingRule")]
    
    pub producer_forwarding_rule: Option<String>,
    /// [Output Only] An 128-bit global unique ID of the PSC service attachment.
    #[serde(rename="pscServiceAttachmentId")]
    
    pub psc_service_attachment_id: Option<Uint128>,
    /// [Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The URL of a service serving the endpoint identified by this service attachment.
    #[serde(rename="targetService")]
    
    pub target_service: Option<String>,
}

impl client::RequestValue for ServiceAttachment {}
impl client::Resource for ServiceAttachment {}
impl client::ResponseResult for ServiceAttachment {}


/// Contains a list of ServiceAttachmentsScopedList.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list service attachments](ServiceAttachmentAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ServiceAttachmentsScopedList resources.
    
    pub items: Option<HashMap<String, ServiceAttachmentsScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ServiceAttachmentAggregatedListWarning>,
}

impl client::ResponseResult for ServiceAttachmentAggregatedList {}


/// [Output Only] A connection connected to this service attachment.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentConnectedEndpoint {
    /// The url of a connected endpoint.
    
    pub endpoint: Option<String>,
    /// The PSC connection id of the connected endpoint.
    #[serde(rename="pscConnectionId")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub psc_connection_id: Option<u64>,
    /// The status of a connected endpoint to this service attachment.
    
    pub status: Option<ServiceAttachmentConnectedEndpointStatusEnum>,
}

impl client::Part for ServiceAttachmentConnectedEndpoint {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentConsumerProjectLimit {
    /// The value of the limit to set.
    #[serde(rename="connectionLimit")]
    
    pub connection_limit: Option<u32>,
    /// The network URL for the network to set the limit for.
    #[serde(rename="networkUrl")]
    
    pub network_url: Option<String>,
    /// The project id or number for the project to set the limit for.
    #[serde(rename="projectIdOrNum")]
    
    pub project_id_or_num: Option<String>,
}

impl client::Part for ServiceAttachmentConsumerProjectLimit {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list service attachments](ServiceAttachmentListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of ServiceAttachment resources.
    
    pub items: Option<Vec<ServiceAttachment>>,
    /// [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ServiceAttachmentListWarning>,
}

impl client::ResponseResult for ServiceAttachmentList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentsScopedList {
    /// A list of ServiceAttachments contained in this scope.
    #[serde(rename="serviceAttachments")]
    
    pub service_attachments: Option<Vec<ServiceAttachment>>,
    /// Informational warning which replaces the list of service attachments when the list is empty.
    
    pub warning: Option<ServiceAttachmentsScopedListWarning>,
}

impl client::Part for ServiceAttachmentsScopedList {}


/// The share setting for reservations and sole tenancy node groups.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ShareSettings {
    /// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
    #[serde(rename="projectMap")]
    
    pub project_map: Option<HashMap<String, ShareSettingsProjectConfig>>,
    /// Type of sharing for this shared-reservation
    #[serde(rename="shareType")]
    
    pub share_type: Option<ShareSettingShareTypeEnum>,
}

impl client::Part for ShareSettings {}


/// Config for each project in the share settings.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ShareSettingsProjectConfig {
    /// The project ID, should be same as the key of this project config in the parent map.
    #[serde(rename="projectId")]
    
    pub project_id: Option<String>,
}

impl client::Part for ShareSettingsProjectConfig {}


/// A set of Shielded Instance options.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [update shielded instance config instances](InstanceUpdateShieldedInstanceConfigCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled. Enabled by default.
    #[serde(rename="enableIntegrityMonitoring")]
    
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled. Disabled by default.
    #[serde(rename="enableSecureBoot")]
    
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled. Enabled by default.
    #[serde(rename="enableVtpm")]
    
    pub enable_vtpm: Option<bool>,
}

impl client::RequestValue for ShieldedInstanceConfig {}


/// A Shielded Instance Identity.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get shielded instance identity instances](InstanceGetShieldedInstanceIdentityCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ShieldedInstanceIdentity {
    /// An Endorsement Key (EK) made by the RSA 2048 algorithm issued to the Shielded Instance's vTPM.
    #[serde(rename="encryptionKey")]
    
    pub encryption_key: Option<ShieldedInstanceIdentityEntry>,
    /// [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry.
    
    pub kind: Option<String>,
    /// An Attestation Key (AK) made by the RSA 2048 algorithm issued to the Shielded Instance's vTPM.
    #[serde(rename="signingKey")]
    
    pub signing_key: Option<ShieldedInstanceIdentityEntry>,
}

impl client::ResponseResult for ShieldedInstanceIdentity {}


/// A Shielded Instance Identity Entry.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ShieldedInstanceIdentityEntry {
    /// A PEM-encoded X.509 certificate. This field can be empty.
    #[serde(rename="ekCert")]
    
    pub ek_cert: Option<String>,
    /// A PEM-encoded public key.
    #[serde(rename="ekPub")]
    
    pub ek_pub: Option<String>,
}

impl client::Part for ShieldedInstanceIdentityEntry {}


/// The policy describes the baseline against which Instance boot integrity is measured.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set shielded instance integrity policy instances](InstanceSetShieldedInstanceIntegrityPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ShieldedInstanceIntegrityPolicy {
    /// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
    #[serde(rename="updateAutoLearnPolicy")]
    
    pub update_auto_learn_policy: Option<bool>,
}

impl client::RequestValue for ShieldedInstanceIntegrityPolicy {}


/// Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add signed url key backend buckets](BackendBucketAddSignedUrlKeyCall) (request)
/// * [add signed url key backend services](BackendServiceAddSignedUrlKeyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SignedUrlKey {
    /// Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename="keyName")]
    
    pub key_name: Option<String>,
    /// 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string.
    #[serde(rename="keyValue")]
    
    pub key_value: Option<String>,
}

impl client::RequestValue for SignedUrlKey {}


/// Represents a Persistent Disk Snapshot resource. You can use snapshots to back up data on a regular interval. For more information, read Creating persistent disk snapshots.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [create snapshot disks](DiskCreateSnapshotCall) (request)
/// * [create snapshot region disks](RegionDiskCreateSnapshotCall) (request)
/// * [delete snapshots](SnapshotDeleteCall) (none)
/// * [get snapshots](SnapshotGetCall) (response)
/// * [get iam policy snapshots](SnapshotGetIamPolicyCall) (none)
/// * [insert snapshots](SnapshotInsertCall) (request)
/// * [list snapshots](SnapshotListCall) (none)
/// * [set iam policy snapshots](SnapshotSetIamPolicyCall) (none)
/// * [set labels snapshots](SnapshotSetLabelCall) (none)
/// * [test iam permissions snapshots](SnapshotTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Snapshot {
    /// [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
    
    pub architecture: Option<SnapshotArchitectureEnum>,
    /// [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
    #[serde(rename="autoCreated")]
    
    pub auto_created: Option<bool>,
    /// Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
    #[serde(rename="chainName")]
    
    pub chain_name: Option<String>,
    /// [Output Only] Size in bytes of the snapshot at creation time.
    #[serde(rename="creationSizeBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub creation_size_bytes: Option<i64>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] Size of the source disk, specified in GB.
    #[serde(rename="diskSizeGb")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub disk_size_gb: Option<i64>,
    /// [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
    #[serde(rename="downloadBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub download_bytes: Option<i64>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
    
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
    
    pub labels: Option<HashMap<String, String>>,
    /// [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
    #[serde(rename="licenseCodes")]
    
    #[serde_as(as = "Option<Vec<::client::serde_with::DisplayFromStr>>")]
    pub license_codes: Option<Vec<i64>>,
    /// [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
    
    pub licenses: Option<Vec<String>>,
    /// An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
    #[serde(rename="locationHint")]
    
    pub location_hint: Option<String>,
    /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="satisfiesPzs")]
    
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
    #[serde(rename="snapshotEncryptionKey")]
    
    pub snapshot_encryption_key: Option<CustomerEncryptionKey>,
    /// Indicates the type of the snapshot.
    #[serde(rename="snapshotType")]
    
    pub snapshot_type: Option<SnapshotSnapshotTypeEnum>,
    /// The source disk used to create this snapshot.
    #[serde(rename="sourceDisk")]
    
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    #[serde(rename="sourceDiskEncryptionKey")]
    
    pub source_disk_encryption_key: Option<CustomerEncryptionKey>,
    /// [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
    #[serde(rename="sourceDiskId")]
    
    pub source_disk_id: Option<String>,
    /// [Output Only] URL of the resource policy which created this scheduled snapshot.
    #[serde(rename="sourceSnapshotSchedulePolicy")]
    
    pub source_snapshot_schedule_policy: Option<String>,
    /// [Output Only] ID of the resource policy which created this scheduled snapshot.
    #[serde(rename="sourceSnapshotSchedulePolicyId")]
    
    pub source_snapshot_schedule_policy_id: Option<String>,
    /// [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
    
    pub status: Option<SnapshotStatusEnum>,
    /// [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
    #[serde(rename="storageBytes")]
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub storage_bytes: Option<i64>,
    /// [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    #[serde(rename="storageBytesStatus")]
    
    pub storage_bytes_status: Option<SnapshotStorageBytesStatusEnum>,
    /// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    #[serde(rename="storageLocations")]
    
    pub storage_locations: Option<Vec<String>>,
}

impl client::RequestValue for Snapshot {}
impl client::Resource for Snapshot {}
impl client::ResponseResult for Snapshot {}


/// Contains a list of Snapshot resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list snapshots](SnapshotListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SnapshotList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Snapshot resources.
    
    pub items: Option<Vec<Snapshot>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SnapshotListWarning>,
}

impl client::ResponseResult for SnapshotList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SourceDiskEncryptionKey {
    /// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    #[serde(rename="diskEncryptionKey")]
    
    pub disk_encryption_key: Option<CustomerEncryptionKey>,
    /// URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
    #[serde(rename="sourceDisk")]
    
    pub source_disk: Option<String>,
}

impl client::Part for SourceDiskEncryptionKey {}


/// A specification of the parameters to use when creating the instance template from a source instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SourceInstanceParams {
    /// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, the source images for each disk will be used. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
    #[serde(rename="diskConfigs")]
    
    pub disk_configs: Option<Vec<DiskInstantiationConfig>>,
}

impl client::Part for SourceInstanceParams {}


/// DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SourceInstanceProperties {
    /// Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
    #[serde(rename="canIpForward")]
    
    pub can_ip_forward: Option<bool>,
    /// Whether the instance created from this machine image should be protected against deletion.
    #[serde(rename="deletionProtection")]
    
    pub deletion_protection: Option<bool>,
    /// An optional text description for the instances that are created from this machine image.
    
    pub description: Option<String>,
    /// An array of disks that are associated with the instances that are created from this machine image.
    
    pub disks: Option<Vec<SavedAttachedDisk>>,
    /// A list of guest accelerator cards' type and count to use for instances created from this machine image.
    #[serde(rename="guestAccelerators")]
    
    pub guest_accelerators: Option<Vec<AcceleratorConfig>>,
    /// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
    #[serde(rename="keyRevocationActionType")]
    
    pub key_revocation_action_type: Option<SourceInstancePropertyKeyRevocationActionTypeEnum>,
    /// Labels to apply to instances that are created from this machine image.
    
    pub labels: Option<HashMap<String, String>>,
    /// The machine type to use for instances that are created from this machine image.
    #[serde(rename="machineType")]
    
    pub machine_type: Option<String>,
    /// The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
    
    pub metadata: Option<Metadata>,
    /// Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
    #[serde(rename="minCpuPlatform")]
    
    pub min_cpu_platform: Option<String>,
    /// An array of network access configurations for this interface.
    #[serde(rename="networkInterfaces")]
    
    pub network_interfaces: Option<Vec<NetworkInterface>>,
    /// Specifies the scheduling options for the instances that are created from this machine image.
    
    pub scheduling: Option<Scheduling>,
    /// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances.
    #[serde(rename="serviceAccounts")]
    
    pub service_accounts: Option<Vec<ServiceAccount>>,
    /// A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
    
    pub tags: Option<Tags>,
}

impl client::Part for SourceInstanceProperties {}


/// Represents an SSL Certificate resource. Google Compute Engine has two SSL Certificate resources: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/sslCertificates) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionSslCertificates) The sslCertificates are used by: - external HTTPS load balancers - SSL proxy load balancers The regionSslCertificates are used by internal HTTPS load balancers. Optionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read Creating and using SSL certificates, SSL certificates quotas and limits, and Troubleshooting SSL certificates.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region ssl certificates](RegionSslCertificateGetCall) (response)
/// * [insert region ssl certificates](RegionSslCertificateInsertCall) (request)
/// * [aggregated list ssl certificates](SslCertificateAggregatedListCall) (none)
/// * [delete ssl certificates](SslCertificateDeleteCall) (none)
/// * [get ssl certificates](SslCertificateGetCall) (response)
/// * [insert ssl certificates](SslCertificateInsertCall) (request)
/// * [list ssl certificates](SslCertificateListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificate {
    /// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
    
    pub certificate: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] Expire time of the certificate. RFC3339
    #[serde(rename="expireTime")]
    
    pub expire_time: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
    
    pub kind: Option<String>,
    /// Configuration and status of a managed SSL certificate.
    
    pub managed: Option<SslCertificateManagedSslCertificate>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
    #[serde(rename="privateKey")]
    
    pub private_key: Option<String>,
    /// [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
    
    pub region: Option<String>,
    /// [Output only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Configuration and status of a self-managed SSL certificate.
    #[serde(rename="selfManaged")]
    
    pub self_managed: Option<SslCertificateSelfManagedSslCertificate>,
    /// [Output Only] Domains associated with the certificate via Subject Alternative Name.
    #[serde(rename="subjectAlternativeNames")]
    
    pub subject_alternative_names: Option<Vec<String>>,
    /// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
    #[serde(rename="type")]
    
    pub type_: Option<SslCertificateTypeEnum>,
}

impl client::RequestValue for SslCertificate {}
impl client::Resource for SslCertificate {}
impl client::ResponseResult for SslCertificate {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list ssl certificates](SslCertificateAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SslCertificatesScopedList resources.
    
    pub items: Option<HashMap<String, SslCertificatesScopedList>>,
    /// [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SslCertificateAggregatedListWarning>,
}

impl client::ResponseResult for SslCertificateAggregatedList {}


/// Contains a list of SslCertificate resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region ssl certificates](RegionSslCertificateListCall) (response)
/// * [list ssl certificates](SslCertificateListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SslCertificate resources.
    
    pub items: Option<Vec<SslCertificate>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SslCertificateListWarning>,
}

impl client::ResponseResult for SslCertificateList {}


/// Configuration and status of a managed SSL certificate.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateManagedSslCertificate {
    /// [Output only] Detailed statuses of the domains specified for managed certificate resource.
    #[serde(rename="domainStatus")]
    
    pub domain_status: Option<HashMap<String, SslCertificateManagedSslCertificateDomainStatusEnum>>,
    /// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](https://cloud.google.com/load-balancing/docs/quotas#ssl_certificates).
    
    pub domains: Option<Vec<String>>,
    /// [Output only] Status of the managed certificate resource.
    
    pub status: Option<SslCertificateManagedSslCertificateStatusEnum>,
}

impl client::Part for SslCertificateManagedSslCertificate {}


/// Configuration and status of a self-managed SSL certificate.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateSelfManagedSslCertificate {
    /// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
    
    pub certificate: Option<String>,
    /// A write-only private key in PEM format. Only insert requests will include this field.
    #[serde(rename="privateKey")]
    
    pub private_key: Option<String>,
}

impl client::Part for SslCertificateSelfManagedSslCertificate {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificatesScopedList {
    /// List of SslCertificates contained in this scope.
    #[serde(rename="sslCertificates")]
    
    pub ssl_certificates: Option<Vec<SslCertificate>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<SslCertificatesScopedListWarning>,
}

impl client::Part for SslCertificatesScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list ssl policies](SslPolicyAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesAggregatedList {
    /// no description provided
    
    pub etag: Option<String>,
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SslPoliciesScopedList resources.
    
    pub items: Option<HashMap<String, SslPoliciesScopedList>>,
    /// [Output Only] Type of resource. Always compute#sslPolicyAggregatedList for lists of SSL Policies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SslPoliciesAggregatedListWarning>,
}

impl client::ResponseResult for SslPoliciesAggregatedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region ssl policies](RegionSslPolicyListCall) (response)
/// * [list ssl policies](SslPolicyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SslPolicy resources.
    
    pub items: Option<Vec<SslPolicy>>,
    /// [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SslPoliciesListWarning>,
}

impl client::ResponseResult for SslPoliciesList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list available features region ssl policies](RegionSslPolicyListAvailableFeatureCall) (response)
/// * [list available features ssl policies](SslPolicyListAvailableFeatureCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesListAvailableFeaturesResponse {
    /// no description provided
    
    pub features: Option<Vec<String>>,
}

impl client::ResponseResult for SslPoliciesListAvailableFeaturesResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesScopedList {
    /// A list of SslPolicies contained in this scope.
    #[serde(rename="sslPolicies")]
    
    pub ssl_policies: Option<Vec<SslPolicy>>,
    /// Informational warning which replaces the list of SSL policies when the list is empty.
    
    pub warning: Option<SslPoliciesScopedListWarning>,
}

impl client::Part for SslPoliciesScopedList {}


/// Represents an SSL Policy resource. Use SSL policies to control the SSL features, such as versions and cipher suites, offered by an HTTPS or SSL Proxy load balancer. For more information, read SSL Policy Concepts.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region ssl policies](RegionSslPolicyGetCall) (response)
/// * [insert region ssl policies](RegionSslPolicyInsertCall) (request)
/// * [patch region ssl policies](RegionSslPolicyPatchCall) (request)
/// * [get ssl policies](SslPolicyGetCall) (response)
/// * [insert ssl policies](SslPolicyInsertCall) (request)
/// * [patch ssl policies](SslPolicyPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPolicy {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.
    #[serde(rename="customFeatures")]
    
    pub custom_features: Option<Vec<String>>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The list of features enabled in the SSL policy.
    #[serde(rename="enabledFeatures")]
    
    pub enabled_features: Option<Vec<String>>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies.
    
    pub kind: Option<String>,
    /// The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
    #[serde(rename="minTlsVersion")]
    
    pub min_tls_version: Option<SslPolicyMinTlsVersionEnum>,
    /// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
    
    pub profile: Option<SslPolicyProfileEnum>,
    /// [Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.
    
    pub warnings: Option<Vec<SslPolicyWarnings>>,
}

impl client::RequestValue for SslPolicy {}
impl client::ResponseResult for SslPolicy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set ssl policy target https proxies](TargetHttpsProxySetSslPolicyCall) (request)
/// * [set ssl policy target ssl proxies](TargetSslProxySetSslPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPolicyReference {
    /// URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource.
    #[serde(rename="sslPolicy")]
    
    pub ssl_policy: Option<String>,
}

impl client::RequestValue for SslPolicyReference {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct StatefulPolicy {
    /// no description provided
    #[serde(rename="preservedState")]
    
    pub preserved_state: Option<StatefulPolicyPreservedState>,
}

impl client::Part for StatefulPolicy {}


/// Configuration of preserved resources.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct StatefulPolicyPreservedState {
    /// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
    
    pub disks: Option<HashMap<String, StatefulPolicyPreservedStateDiskDevice>>,
}

impl client::Part for StatefulPolicyPreservedState {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct StatefulPolicyPreservedStateDiskDevice {
    /// These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
    #[serde(rename="autoDelete")]
    
    pub auto_delete: Option<StatefulPolicyPreservedStateDiskDeviceAutoDeleteEnum>,
}

impl client::Part for StatefulPolicyPreservedStateDiskDevice {}


/// Represents a Subnetwork resource. A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read Virtual Private Cloud (VPC) Network.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list subnetworks](SubnetworkAggregatedListCall) (none)
/// * [delete subnetworks](SubnetworkDeleteCall) (none)
/// * [expand ip cidr range subnetworks](SubnetworkExpandIpCidrRangeCall) (none)
/// * [get subnetworks](SubnetworkGetCall) (response)
/// * [get iam policy subnetworks](SubnetworkGetIamPolicyCall) (none)
/// * [insert subnetworks](SubnetworkInsertCall) (request)
/// * [list subnetworks](SubnetworkListCall) (none)
/// * [list usable subnetworks](SubnetworkListUsableCall) (none)
/// * [patch subnetworks](SubnetworkPatchCall) (request)
/// * [set iam policy subnetworks](SubnetworkSetIamPolicyCall) (none)
/// * [set private ip google access subnetworks](SubnetworkSetPrivateIpGoogleAccesCall) (none)
/// * [test iam permissions subnetworks](SubnetworkTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Subnetwork {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
    
    pub description: Option<String>,
    /// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
    #[serde(rename="enableFlowLogs")]
    
    pub enable_flow_logs: Option<bool>,
    /// The external IPv6 address range that is owned by this subnetwork.
    #[serde(rename="externalIpv6Prefix")]
    
    pub external_ipv6_prefix: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork.
    #[serde(rename="gatewayAddress")]
    
    pub gateway_address: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
    #[serde(rename="internalIpv6Prefix")]
    
    pub internal_ipv6_prefix: Option<String>,
    /// The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
    #[serde(rename="ipv6AccessType")]
    
    pub ipv6_access_type: Option<SubnetworkIpv6AccessTypeEnum>,
    /// [Output Only] This field is for internal use.
    #[serde(rename="ipv6CidrRange")]
    
    pub ipv6_cidr_range: Option<String>,
    /// [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources.
    
    pub kind: Option<String>,
    /// This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging.
    #[serde(rename="logConfig")]
    
    pub log_config: Option<SubnetworkLogConfig>,
    /// The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time.
    
    pub network: Option<String>,
    /// Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
    #[serde(rename="privateIpGoogleAccess")]
    
    pub private_ip_google_access: Option<bool>,
    /// This field is for internal use. This field can be both set at resource creation time and updated using patch.
    #[serde(rename="privateIpv6GoogleAccess")]
    
    pub private_ipv6_google_access: Option<SubnetworkPrivateIpv6GoogleAccessEnum>,
    /// The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
    
    pub purpose: Option<SubnetworkPurposeEnum>,
    /// URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
    
    pub region: Option<String>,
    /// The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
    
    pub role: Option<SubnetworkRoleEnum>,
    /// An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
    #[serde(rename="secondaryIpRanges")]
    
    pub secondary_ip_ranges: Option<Vec<SubnetworkSecondaryRange>>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
    #[serde(rename="stackType")]
    
    pub stack_type: Option<SubnetworkStackTypeEnum>,
    /// [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
    
    pub state: Option<SubnetworkStateEnum>,
}

impl client::RequestValue for Subnetwork {}
impl client::Resource for Subnetwork {}
impl client::ResponseResult for Subnetwork {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list subnetworks](SubnetworkAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of SubnetworksScopedList resources.
    
    pub items: Option<HashMap<String, SubnetworksScopedList>>,
    /// [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SubnetworkAggregatedListWarning>,
}

impl client::ResponseResult for SubnetworkAggregatedList {}


/// Contains a list of Subnetwork resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list subnetworks](SubnetworkListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Subnetwork resources.
    
    pub items: Option<Vec<Subnetwork>>,
    /// [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<SubnetworkListWarning>,
}

impl client::ResponseResult for SubnetworkList {}


/// The available logging options for this subnetwork.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkLogConfig {
    /// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
    #[serde(rename="aggregationInterval")]
    
    pub aggregation_interval: Option<SubnetworkLogConfigAggregationIntervalEnum>,
    /// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
    
    pub enable: Option<bool>,
    /// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
    #[serde(rename="filterExpr")]
    
    pub filter_expr: Option<String>,
    /// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
    #[serde(rename="flowSampling")]
    
    pub flow_sampling: Option<f32>,
    /// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
    
    pub metadata: Option<SubnetworkLogConfigMetadataEnum>,
    /// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
    #[serde(rename="metadataFields")]
    
    pub metadata_fields: Option<Vec<String>>,
}

impl client::Part for SubnetworkLogConfig {}


/// Represents a secondary IP range of a subnetwork.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkSecondaryRange {
    /// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
    #[serde(rename="rangeName")]
    
    pub range_name: Option<String>,
}

impl client::Part for SubnetworkSecondaryRange {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [expand ip cidr range subnetworks](SubnetworkExpandIpCidrRangeCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworksExpandIpCidrRangeRequest {
    /// The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
}

impl client::RequestValue for SubnetworksExpandIpCidrRangeRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworksScopedList {
    /// A list of subnetworks contained in this scope.
    
    pub subnetworks: Option<Vec<Subnetwork>>,
    /// An informational warning that appears when the list of addresses is empty.
    
    pub warning: Option<SubnetworksScopedListWarning>,
}

impl client::Part for SubnetworksScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set private ip google access subnetworks](SubnetworkSetPrivateIpGoogleAccesCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworksSetPrivateIpGoogleAccessRequest {
    /// no description provided
    #[serde(rename="privateIpGoogleAccess")]
    
    pub private_ip_google_access: Option<bool>,
}

impl client::RequestValue for SubnetworksSetPrivateIpGoogleAccessRequest {}


/// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Subsetting {
    /// no description provided
    
    pub policy: Option<SubsettingPolicyEnum>,
}

impl client::Part for Subsetting {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TCPHealthCheck {
    /// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
    
    pub port: Option<i32>,
    /// Not supported.
    #[serde(rename="portName")]
    
    pub port_name: Option<String>,
    /// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    #[serde(rename="portSpecification")]
    
    pub port_specification: Option<TCPHealthCheckPortSpecificationEnum>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<TCPHealthCheckProxyHeaderEnum>,
    /// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
    
    pub request: Option<String>,
    /// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
    
    pub response: Option<String>,
}

impl client::Part for TCPHealthCheck {}


/// A set of instance tags.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set tags instances](InstanceSetTagCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Tags {
    /// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
    
    pub items: Option<Vec<String>>,
}

impl client::RequestValue for Tags {}


/// Represents a Target gRPC Proxy resource. A target gRPC proxy is a component of load balancers intended for load balancing gRPC traffic. Only global forwarding rules with load balancing scheme INTERNAL_SELF_MANAGED can reference a target gRPC proxy. The target gRPC Proxy references a URL map that specifies how traffic is routed to gRPC backend services.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get target grpc proxies](TargetGrpcProxyGetCall) (response)
/// * [insert target grpc proxies](TargetGrpcProxyInsertCall) (request)
/// * [patch target grpc proxies](TargetGrpcProxyPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetGrpcProxy {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Server-defined URL with id for the resource.
    #[serde(rename="selfLinkWithId")]
    
    pub self_link_with_id: Option<String>,
    /// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC.
    #[serde(rename="urlMap")]
    
    pub url_map: Option<String>,
    /// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is connecting to
    #[serde(rename="validateForProxyless")]
    
    pub validate_for_proxyless: Option<bool>,
}

impl client::RequestValue for TargetGrpcProxy {}
impl client::ResponseResult for TargetGrpcProxy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list target grpc proxies](TargetGrpcProxyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetGrpcProxyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetGrpcProxy resources.
    
    pub items: Option<Vec<TargetGrpcProxy>>,
    /// [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetGrpcProxyListWarning>,
}

impl client::ResponseResult for TargetGrpcProxyList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxiesScopedList {
    /// A list of TargetHttpProxies contained in this scope.
    #[serde(rename="targetHttpProxies")]
    
    pub target_http_proxies: Option<Vec<TargetHttpProxy>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<TargetHttpProxiesScopedListWarning>,
}

impl client::Part for TargetHttpProxiesScopedList {}


/// Represents a Target HTTP Proxy resource. Google Compute Engine has two Target HTTP Proxy resources: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/targetHttpProxies) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionTargetHttpProxies) A target HTTP proxy is a component of GCP HTTP load balancers. * targetHttpProxies are used by external HTTP load balancers and Traffic Director. * regionTargetHttpProxies are used by internal HTTP load balancers. Forwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region target http proxies](RegionTargetHttpProxyGetCall) (response)
/// * [insert region target http proxies](RegionTargetHttpProxyInsertCall) (request)
/// * [get target http proxies](TargetHttpProxyGetCall) (response)
/// * [insert target http proxies](TargetHttpProxyInsertCall) (request)
/// * [patch target http proxies](TargetHttpProxyPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxy {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
    #[serde(rename="proxyBind")]
    
    pub proxy_bind: Option<bool>,
    /// [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
    #[serde(rename="urlMap")]
    
    pub url_map: Option<String>,
}

impl client::RequestValue for TargetHttpProxy {}
impl client::ResponseResult for TargetHttpProxy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target http proxies](TargetHttpProxyAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxyAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetHttpProxiesScopedList resources.
    
    pub items: Option<HashMap<String, TargetHttpProxiesScopedList>>,
    /// [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
}

impl client::ResponseResult for TargetHttpProxyAggregatedList {}


/// A list of TargetHttpProxy resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region target http proxies](RegionTargetHttpProxyListCall) (response)
/// * [list target http proxies](TargetHttpProxyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetHttpProxy resources.
    
    pub items: Option<Vec<TargetHttpProxy>>,
    /// Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetHttpProxyListWarning>,
}

impl client::ResponseResult for TargetHttpProxyList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxiesScopedList {
    /// A list of TargetHttpsProxies contained in this scope.
    #[serde(rename="targetHttpsProxies")]
    
    pub target_https_proxies: Option<Vec<TargetHttpsProxy>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<TargetHttpsProxiesScopedListWarning>,
}

impl client::Part for TargetHttpsProxiesScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set certificate map target https proxies](TargetHttpsProxySetCertificateMapCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxiesSetCertificateMapRequest {
    /// URL of the Certificate Map to associate with this TargetHttpsProxy.
    #[serde(rename="certificateMap")]
    
    pub certificate_map: Option<String>,
}

impl client::RequestValue for TargetHttpsProxiesSetCertificateMapRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set quic override target https proxies](TargetHttpsProxySetQuicOverrideCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxiesSetQuicOverrideRequest {
    /// QUIC policy for the TargetHttpsProxy resource.
    #[serde(rename="quicOverride")]
    
    pub quic_override: Option<TargetHttpsProxiesSetQuicOverrideRequestQuicOverrideEnum>,
}

impl client::RequestValue for TargetHttpsProxiesSetQuicOverrideRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set ssl certificates target https proxies](TargetHttpsProxySetSslCertificateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxiesSetSslCertificatesRequest {
    /// New set of SslCertificate resources to associate with this TargetHttpsProxy resource. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
    #[serde(rename="sslCertificates")]
    
    pub ssl_certificates: Option<Vec<String>>,
}

impl client::RequestValue for TargetHttpsProxiesSetSslCertificatesRequest {}


/// Represents a Target HTTPS Proxy resource. Google Compute Engine has two Target HTTPS Proxy resources: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/targetHttpsProxies) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionTargetHttpsProxies) A target HTTPS proxy is a component of GCP HTTPS load balancers. * targetHttpsProxies are used by external HTTPS load balancers. * regionTargetHttpsProxies are used by internal HTTPS load balancers. Forwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region target https proxies](RegionTargetHttpsProxyGetCall) (response)
/// * [insert region target https proxies](RegionTargetHttpsProxyInsertCall) (request)
/// * [patch region target https proxies](RegionTargetHttpsProxyPatchCall) (request)
/// * [get target https proxies](TargetHttpsProxyGetCall) (response)
/// * [insert target https proxies](TargetHttpsProxyInsertCall) (request)
/// * [patch target https proxies](TargetHttpsProxyPatchCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxy {
    /// Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be restricted by an authorization policy. Refer to the AuthorizationPolicy resource for additional details. authorizationPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. Note: This field currently has no impact.
    #[serde(rename="authorizationPolicy")]
    
    pub authorization_policy: Option<String>,
    /// URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored.
    #[serde(rename="certificateMap")]
    
    pub certificate_map: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
    #[serde(rename="proxyBind")]
    
    pub proxy_bind: Option<bool>,
    /// Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied. 
    #[serde(rename="quicOverride")]
    
    pub quic_override: Option<TargetHttpsProxyQuicOverrideEnum>,
    /// [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
    #[serde(rename="serverTlsPolicy")]
    
    pub server_tls_policy: Option<String>,
    /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
    #[serde(rename="sslCertificates")]
    
    pub ssl_certificates: Option<Vec<String>>,
    /// URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured.
    #[serde(rename="sslPolicy")]
    
    pub ssl_policy: Option<String>,
    /// A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map: - https://www.googleapis.compute/v1/projects/project/global/urlMaps/ url-map - projects/project/global/urlMaps/url-map - global/urlMaps/url-map 
    #[serde(rename="urlMap")]
    
    pub url_map: Option<String>,
}

impl client::RequestValue for TargetHttpsProxy {}
impl client::ResponseResult for TargetHttpsProxy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target https proxies](TargetHttpsProxyAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxyAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetHttpsProxiesScopedList resources.
    
    pub items: Option<HashMap<String, TargetHttpsProxiesScopedList>>,
    /// [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetHttpsProxyAggregatedListWarning>,
}

impl client::ResponseResult for TargetHttpsProxyAggregatedList {}


/// Contains a list of TargetHttpsProxy resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region target https proxies](RegionTargetHttpsProxyListCall) (response)
/// * [list target https proxies](TargetHttpsProxyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetHttpsProxy resources.
    
    pub items: Option<Vec<TargetHttpsProxy>>,
    /// Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetHttpsProxyListWarning>,
}

impl client::ResponseResult for TargetHttpsProxyList {}


/// Represents a Target Instance resource. You can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target instances](TargetInstanceAggregatedListCall) (none)
/// * [delete target instances](TargetInstanceDeleteCall) (none)
/// * [get target instances](TargetInstanceGetCall) (response)
/// * [insert target instances](TargetInstanceInsertCall) (request)
/// * [list target instances](TargetInstanceListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstance {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance 
    
    pub instance: Option<String>,
    /// [Output Only] The type of the resource. Always compute#targetInstance for target instances.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance.
    #[serde(rename="natPolicy")]
    
    pub nat_policy: Option<TargetInstanceNatPolicyEnum>,
    /// The URL of the network this target instance uses to forward traffic. If not specified, the traffic will be forwarded to the network that the default network interface belongs to.
    
    pub network: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub zone: Option<String>,
}

impl client::RequestValue for TargetInstance {}
impl client::Resource for TargetInstance {}
impl client::ResponseResult for TargetInstance {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target instances](TargetInstanceAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstanceAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetInstance resources.
    
    pub items: Option<HashMap<String, TargetInstancesScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetInstanceAggregatedListWarning>,
}

impl client::ResponseResult for TargetInstanceAggregatedList {}


/// Contains a list of TargetInstance resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list target instances](TargetInstanceListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstanceList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetInstance resources.
    
    pub items: Option<Vec<TargetInstance>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetInstanceListWarning>,
}

impl client::ResponseResult for TargetInstanceList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstancesScopedList {
    /// A list of target instances contained in this scope.
    #[serde(rename="targetInstances")]
    
    pub target_instances: Option<Vec<TargetInstance>>,
    /// Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<TargetInstancesScopedListWarning>,
}

impl client::Part for TargetInstancesScopedList {}


/// Represents a Target Pool resource. Target pools are used for network TCP/UDP load balancing. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add health check target pools](TargetPoolAddHealthCheckCall) (none)
/// * [add instance target pools](TargetPoolAddInstanceCall) (none)
/// * [aggregated list target pools](TargetPoolAggregatedListCall) (none)
/// * [delete target pools](TargetPoolDeleteCall) (none)
/// * [get target pools](TargetPoolGetCall) (response)
/// * [get health target pools](TargetPoolGetHealthCall) (none)
/// * [insert target pools](TargetPoolInsertCall) (request)
/// * [list target pools](TargetPoolListCall) (none)
/// * [remove health check target pools](TargetPoolRemoveHealthCheckCall) (none)
/// * [remove instance target pools](TargetPoolRemoveInstanceCall) (none)
/// * [set backup target pools](TargetPoolSetBackupCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPool {
    /// The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1]. backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
    #[serde(rename="backupPool")]
    
    pub backup_pool: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1]. If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
    #[serde(rename="failoverRatio")]
    
    pub failover_ratio: Option<f32>,
    /// The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. Only legacy HttpHealthChecks are supported. Only one health check may be specified.
    #[serde(rename="healthChecks")]
    
    pub health_checks: Option<Vec<String>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool.
    
    pub instances: Option<Vec<String>>,
    /// [Output Only] Type of the resource. Always compute#targetPool for target pools.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// [Output Only] URL of the region where the target pool resides.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
    #[serde(rename="sessionAffinity")]
    
    pub session_affinity: Option<TargetPoolSessionAffinityEnum>,
}

impl client::RequestValue for TargetPool {}
impl client::Resource for TargetPool {}
impl client::ResponseResult for TargetPool {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target pools](TargetPoolAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetPool resources.
    
    pub items: Option<HashMap<String, TargetPoolsScopedList>>,
    /// [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetPoolAggregatedListWarning>,
}

impl client::ResponseResult for TargetPoolAggregatedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get health target pools](TargetPoolGetHealthCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolInstanceHealth {
    /// no description provided
    #[serde(rename="healthStatus")]
    
    pub health_status: Option<Vec<HealthStatus>>,
    /// [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance.
    
    pub kind: Option<String>,
}

impl client::ResponseResult for TargetPoolInstanceHealth {}


/// Contains a list of TargetPool resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list target pools](TargetPoolListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetPool resources.
    
    pub items: Option<Vec<TargetPool>>,
    /// [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetPoolListWarning>,
}

impl client::ResponseResult for TargetPoolList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add health check target pools](TargetPoolAddHealthCheckCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsAddHealthCheckRequest {
    /// The HttpHealthCheck to add to the target pool.
    #[serde(rename="healthChecks")]
    
    pub health_checks: Option<Vec<HealthCheckReference>>,
}

impl client::RequestValue for TargetPoolsAddHealthCheckRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [add instance target pools](TargetPoolAddInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsAddInstanceRequest {
    /// A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs: - https://www.googleapis.com/compute/v1/projects/project-id/zones/zone /instances/instance-name - projects/project-id/zones/zone/instances/instance-name - zones/zone/instances/instance-name 
    
    pub instances: Option<Vec<InstanceReference>>,
}

impl client::RequestValue for TargetPoolsAddInstanceRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove health check target pools](TargetPoolRemoveHealthCheckCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsRemoveHealthCheckRequest {
    /// Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project /global/httpHealthChecks/health-check - projects/project/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check 
    #[serde(rename="healthChecks")]
    
    pub health_checks: Option<Vec<HealthCheckReference>>,
}

impl client::RequestValue for TargetPoolsRemoveHealthCheckRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [remove instance target pools](TargetPoolRemoveInstanceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsRemoveInstanceRequest {
    /// URLs of the instances to be removed from target pool.
    
    pub instances: Option<Vec<InstanceReference>>,
}

impl client::RequestValue for TargetPoolsRemoveInstanceRequest {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsScopedList {
    /// A list of target pools contained in this scope.
    #[serde(rename="targetPools")]
    
    pub target_pools: Option<Vec<TargetPool>>,
    /// Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<TargetPoolsScopedListWarning>,
}

impl client::Part for TargetPoolsScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set target forwarding rules](ForwardingRuleSetTargetCall) (request)
/// * [set target global forwarding rules](GlobalForwardingRuleSetTargetCall) (request)
/// * [set backup target pools](TargetPoolSetBackupCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetReference {
    /// no description provided
    
    pub target: Option<String>,
}

impl client::RequestValue for TargetReference {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set backend service target ssl proxies](TargetSslProxySetBackendServiceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxiesSetBackendServiceRequest {
    /// The URL of the new BackendService resource for the targetSslProxy.
    
    pub service: Option<String>,
}

impl client::RequestValue for TargetSslProxiesSetBackendServiceRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set certificate map target ssl proxies](TargetSslProxySetCertificateMapCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxiesSetCertificateMapRequest {
    /// URL of the Certificate Map to associate with this TargetSslProxy.
    #[serde(rename="certificateMap")]
    
    pub certificate_map: Option<String>,
}

impl client::RequestValue for TargetSslProxiesSetCertificateMapRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set proxy header target ssl proxies](TargetSslProxySetProxyHeaderCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxiesSetProxyHeaderRequest {
    /// The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<TargetSslProxiesSetProxyHeaderRequestProxyHeaderEnum>,
}

impl client::RequestValue for TargetSslProxiesSetProxyHeaderRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set ssl certificates target ssl proxies](TargetSslProxySetSslCertificateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxiesSetSslCertificatesRequest {
    /// New set of URLs to SslCertificate resources to associate with this TargetSslProxy. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
    #[serde(rename="sslCertificates")]
    
    pub ssl_certificates: Option<Vec<String>>,
}

impl client::RequestValue for TargetSslProxiesSetSslCertificatesRequest {}


/// Represents a Target SSL Proxy resource. A target SSL proxy is a component of a SSL Proxy load balancer. Global forwarding rules reference a target SSL proxy, and the target proxy then references an external backend service. For more information, read Using Target Proxies.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get target ssl proxies](TargetSslProxyGetCall) (response)
/// * [insert target ssl proxies](TargetSslProxyInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxy {
    /// URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored.
    #[serde(rename="certificateMap")]
    
    pub certificate_map: Option<String>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<TargetSslProxyProxyHeaderEnum>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// URL to the BackendService resource.
    
    pub service: Option<String>,
    /// URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
    #[serde(rename="sslCertificates")]
    
    pub ssl_certificates: Option<Vec<String>>,
    /// URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured.
    #[serde(rename="sslPolicy")]
    
    pub ssl_policy: Option<String>,
}

impl client::RequestValue for TargetSslProxy {}
impl client::ResponseResult for TargetSslProxy {}


/// Contains a list of TargetSslProxy resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list target ssl proxies](TargetSslProxyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetSslProxy resources.
    
    pub items: Option<Vec<TargetSslProxy>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetSslProxyListWarning>,
}

impl client::ResponseResult for TargetSslProxyList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxiesScopedList {
    /// A list of TargetTcpProxies contained in this scope.
    #[serde(rename="targetTcpProxies")]
    
    pub target_tcp_proxies: Option<Vec<TargetTcpProxy>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<TargetTcpProxiesScopedListWarning>,
}

impl client::Part for TargetTcpProxiesScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set backend service target tcp proxies](TargetTcpProxySetBackendServiceCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxiesSetBackendServiceRequest {
    /// The URL of the new BackendService resource for the targetTcpProxy.
    
    pub service: Option<String>,
}

impl client::RequestValue for TargetTcpProxiesSetBackendServiceRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set proxy header target tcp proxies](TargetTcpProxySetProxyHeaderCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxiesSetProxyHeaderRequest {
    /// The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<TargetTcpProxiesSetProxyHeaderRequestProxyHeaderEnum>,
}

impl client::RequestValue for TargetTcpProxiesSetProxyHeaderRequest {}


/// Represents a Target TCP Proxy resource. A target TCP proxy is a component of a TCP Proxy load balancer. Global forwarding rules reference target TCP proxy, and the target proxy then references an external backend service. For more information, read TCP Proxy Load Balancing overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region target tcp proxies](RegionTargetTcpProxyGetCall) (response)
/// * [insert region target tcp proxies](RegionTargetTcpProxyInsertCall) (request)
/// * [get target tcp proxies](TargetTcpProxyGetCall) (response)
/// * [insert target tcp proxies](TargetTcpProxyInsertCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxy {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
    #[serde(rename="proxyBind")]
    
    pub proxy_bind: Option<bool>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    #[serde(rename="proxyHeader")]
    
    pub proxy_header: Option<TargetTcpProxyProxyHeaderEnum>,
    /// [Output Only] URL of the region where the regional TCP proxy resides. This field is not applicable to global TCP proxy.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// URL to the BackendService resource.
    
    pub service: Option<String>,
}

impl client::RequestValue for TargetTcpProxy {}
impl client::ResponseResult for TargetTcpProxy {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target tcp proxies](TargetTcpProxyAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxyAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetTcpProxiesScopedList resources.
    
    pub items: Option<HashMap<String, TargetTcpProxiesScopedList>>,
    /// [Output Only] Type of resource. Always compute#targetTcpProxyAggregatedList for lists of Target TCP Proxies.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetTcpProxyAggregatedListWarning>,
}

impl client::ResponseResult for TargetTcpProxyAggregatedList {}


/// Contains a list of TargetTcpProxy resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region target tcp proxies](RegionTargetTcpProxyListCall) (response)
/// * [list target tcp proxies](TargetTcpProxyListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxyList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetTcpProxy resources.
    
    pub items: Option<Vec<TargetTcpProxy>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetTcpProxyListWarning>,
}

impl client::ResponseResult for TargetTcpProxyList {}


/// Represents a Target VPN Gateway resource. The target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target vpn gateways](TargetVpnGatewayAggregatedListCall) (none)
/// * [delete target vpn gateways](TargetVpnGatewayDeleteCall) (none)
/// * [get target vpn gateways](TargetVpnGatewayGetCall) (response)
/// * [insert target vpn gateways](TargetVpnGatewayInsertCall) (request)
/// * [list target vpn gateways](TargetVpnGatewayListCall) (none)
/// * [set labels target vpn gateways](TargetVpnGatewaySetLabelCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGateway {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway.
    #[serde(rename="forwardingRules")]
    
    pub forwarding_rules: Option<Vec<String>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
    
    pub network: Option<String>,
    /// [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
    
    pub status: Option<TargetVpnGatewayStatusEnum>,
    /// [Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway.
    
    pub tunnels: Option<Vec<String>>,
}

impl client::RequestValue for TargetVpnGateway {}
impl client::Resource for TargetVpnGateway {}
impl client::ResponseResult for TargetVpnGateway {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list target vpn gateways](TargetVpnGatewayAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewayAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetVpnGateway resources.
    
    pub items: Option<HashMap<String, TargetVpnGatewaysScopedList>>,
    /// [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetVpnGatewayAggregatedListWarning>,
}

impl client::ResponseResult for TargetVpnGatewayAggregatedList {}


/// Contains a list of TargetVpnGateway resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list target vpn gateways](TargetVpnGatewayListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewayList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of TargetVpnGateway resources.
    
    pub items: Option<Vec<TargetVpnGateway>>,
    /// [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<TargetVpnGatewayListWarning>,
}

impl client::ResponseResult for TargetVpnGatewayList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewaysScopedList {
    /// [Output Only] A list of target VPN gateways contained in this scope.
    #[serde(rename="targetVpnGateways")]
    
    pub target_vpn_gateways: Option<Vec<TargetVpnGateway>>,
    /// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<TargetVpnGatewaysScopedListWarning>,
}

impl client::Part for TargetVpnGatewaysScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TestFailure {
    /// The actual output URL evaluated by a load balancer containing the scheme, host, path and query parameters.
    #[serde(rename="actualOutputUrl")]
    
    pub actual_output_url: Option<String>,
    /// Actual HTTP status code for rule with `urlRedirect` calculated by load balancer
    #[serde(rename="actualRedirectResponseCode")]
    
    pub actual_redirect_response_code: Option<i32>,
    /// BackendService or BackendBucket returned by load balancer.
    #[serde(rename="actualService")]
    
    pub actual_service: Option<String>,
    /// The expected output URL evaluated by a load balancer containing the scheme, host, path and query parameters.
    #[serde(rename="expectedOutputUrl")]
    
    pub expected_output_url: Option<String>,
    /// Expected HTTP status code for rule with `urlRedirect` calculated by load balancer
    #[serde(rename="expectedRedirectResponseCode")]
    
    pub expected_redirect_response_code: Option<i32>,
    /// Expected BackendService or BackendBucket resource the given URL should be mapped to.
    #[serde(rename="expectedService")]
    
    pub expected_service: Option<String>,
    /// HTTP headers of the request.
    
    pub headers: Option<Vec<UrlMapTestHeader>>,
    /// Host portion of the URL.
    
    pub host: Option<String>,
    /// Path portion including query parameters in the URL.
    
    pub path: Option<String>,
}

impl client::Part for TestFailure {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [test iam permissions disks](DiskTestIamPermissionCall) (request)
/// * [test iam permissions external vpn gateways](ExternalVpnGatewayTestIamPermissionCall) (request)
/// * [test iam permissions firewall policies](FirewallPolicyTestIamPermissionCall) (request)
/// * [test iam permissions images](ImageTestIamPermissionCall) (request)
/// * [test iam permissions instance templates](InstanceTemplateTestIamPermissionCall) (request)
/// * [test iam permissions instances](InstanceTestIamPermissionCall) (request)
/// * [test iam permissions license codes](LicenseCodeTestIamPermissionCall) (request)
/// * [test iam permissions licenses](LicenseTestIamPermissionCall) (request)
/// * [test iam permissions machine images](MachineImageTestIamPermissionCall) (request)
/// * [test iam permissions network attachments](NetworkAttachmentTestIamPermissionCall) (request)
/// * [test iam permissions network endpoint groups](NetworkEndpointGroupTestIamPermissionCall) (request)
/// * [test iam permissions network firewall policies](NetworkFirewallPolicyTestIamPermissionCall) (request)
/// * [test iam permissions node groups](NodeGroupTestIamPermissionCall) (request)
/// * [test iam permissions node templates](NodeTemplateTestIamPermissionCall) (request)
/// * [test iam permissions packet mirrorings](PacketMirroringTestIamPermissionCall) (request)
/// * [test iam permissions region disks](RegionDiskTestIamPermissionCall) (request)
/// * [test iam permissions region network firewall policies](RegionNetworkFirewallPolicyTestIamPermissionCall) (request)
/// * [test iam permissions reservations](ReservationTestIamPermissionCall) (request)
/// * [test iam permissions resource policies](ResourcePolicyTestIamPermissionCall) (request)
/// * [test iam permissions service attachments](ServiceAttachmentTestIamPermissionCall) (request)
/// * [test iam permissions snapshots](SnapshotTestIamPermissionCall) (request)
/// * [test iam permissions subnetworks](SubnetworkTestIamPermissionCall) (request)
/// * [test iam permissions vpn gateways](VpnGatewayTestIamPermissionCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TestPermissionsRequest {
    /// The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed.
    
    pub permissions: Option<Vec<String>>,
}

impl client::RequestValue for TestPermissionsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [test iam permissions disks](DiskTestIamPermissionCall) (response)
/// * [test iam permissions external vpn gateways](ExternalVpnGatewayTestIamPermissionCall) (response)
/// * [test iam permissions firewall policies](FirewallPolicyTestIamPermissionCall) (response)
/// * [test iam permissions images](ImageTestIamPermissionCall) (response)
/// * [test iam permissions instance templates](InstanceTemplateTestIamPermissionCall) (response)
/// * [test iam permissions instances](InstanceTestIamPermissionCall) (response)
/// * [test iam permissions license codes](LicenseCodeTestIamPermissionCall) (response)
/// * [test iam permissions licenses](LicenseTestIamPermissionCall) (response)
/// * [test iam permissions machine images](MachineImageTestIamPermissionCall) (response)
/// * [test iam permissions network attachments](NetworkAttachmentTestIamPermissionCall) (response)
/// * [test iam permissions network endpoint groups](NetworkEndpointGroupTestIamPermissionCall) (response)
/// * [test iam permissions network firewall policies](NetworkFirewallPolicyTestIamPermissionCall) (response)
/// * [test iam permissions node groups](NodeGroupTestIamPermissionCall) (response)
/// * [test iam permissions node templates](NodeTemplateTestIamPermissionCall) (response)
/// * [test iam permissions packet mirrorings](PacketMirroringTestIamPermissionCall) (response)
/// * [test iam permissions region disks](RegionDiskTestIamPermissionCall) (response)
/// * [test iam permissions region network firewall policies](RegionNetworkFirewallPolicyTestIamPermissionCall) (response)
/// * [test iam permissions reservations](ReservationTestIamPermissionCall) (response)
/// * [test iam permissions resource policies](ResourcePolicyTestIamPermissionCall) (response)
/// * [test iam permissions service attachments](ServiceAttachmentTestIamPermissionCall) (response)
/// * [test iam permissions snapshots](SnapshotTestIamPermissionCall) (response)
/// * [test iam permissions subnetworks](SubnetworkTestIamPermissionCall) (response)
/// * [test iam permissions vpn gateways](VpnGatewayTestIamPermissionCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TestPermissionsResponse {
    /// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
    
    pub permissions: Option<Vec<String>>,
}

impl client::ResponseResult for TestPermissionsResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Uint128 {
    /// no description provided
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub high: Option<u64>,
    /// no description provided
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub low: Option<u64>,
}

impl client::Part for Uint128 {}


/// Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/urlMaps) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get region url maps](RegionUrlMapGetCall) (response)
/// * [insert region url maps](RegionUrlMapInsertCall) (request)
/// * [patch region url maps](RegionUrlMapPatchCall) (request)
/// * [update region url maps](RegionUrlMapUpdateCall) (request)
/// * [aggregated list url maps](UrlMapAggregatedListCall) (none)
/// * [delete url maps](UrlMapDeleteCall) (none)
/// * [get url maps](UrlMapGetCall) (response)
/// * [insert url maps](UrlMapInsertCall) (request)
/// * [invalidate cache url maps](UrlMapInvalidateCacheCall) (none)
/// * [list url maps](UrlMapListCall) (none)
/// * [patch url maps](UrlMapPatchCall) (request)
/// * [update url maps](UrlMapUpdateCall) (request)
/// * [validate url maps](UrlMapValidateCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMap {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction. defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    #[serde(rename="defaultRouteAction")]
    
    pub default_route_action: Option<HttpRouteAction>,
    /// The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. defaultService has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    #[serde(rename="defaultService")]
    
    pub default_service: Option<String>,
    /// When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    #[serde(rename="defaultUrlRedirect")]
    
    pub default_url_redirect: Option<HttpRedirectAction>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field is ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a UrlMap.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub fingerprint: Option<Vec<u8>>,
    /// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here take effect after headerAction specified under pathMatcher. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="headerAction")]
    
    pub header_action: Option<HttpHeaderAction>,
    /// The list of host rules to use against the URL.
    #[serde(rename="hostRules")]
    
    pub host_rules: Option<Vec<HostRule>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#urlMaps for url maps.
    
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// The list of named PathMatchers to use against the URL.
    #[serde(rename="pathMatchers")]
    
    pub path_matchers: Option<Vec<PathMatcher>>,
    /// [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The list of expected URL mapping tests. Request to update the UrlMap succeeds only if all test cases pass. You can specify a maximum of 100 tests per UrlMap. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    
    pub tests: Option<Vec<UrlMapTest>>,
}

impl client::RequestValue for UrlMap {}
impl client::Resource for UrlMap {}
impl client::ResponseResult for UrlMap {}


/// Contains a list of UrlMap resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list region url maps](RegionUrlMapListCall) (response)
/// * [list url maps](UrlMapListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of UrlMap resources.
    
    pub items: Option<Vec<UrlMap>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<UrlMapListWarning>,
}

impl client::ResponseResult for UrlMapList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set url map region target http proxies](RegionTargetHttpProxySetUrlMapCall) (request)
/// * [set url map region target https proxies](RegionTargetHttpsProxySetUrlMapCall) (request)
/// * [set url map target http proxies](TargetHttpProxySetUrlMapCall) (request)
/// * [set url map target https proxies](TargetHttpsProxySetUrlMapCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapReference {
    /// no description provided
    #[serde(rename="urlMap")]
    
    pub url_map: Option<String>,
}

impl client::RequestValue for UrlMapReference {}


/// Message for the expected URL mappings.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapTest {
    /// Description of this test case.
    
    pub description: Option<String>,
    /// The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
    #[serde(rename="expectedOutputUrl")]
    
    pub expected_output_url: Option<String>,
    /// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
    #[serde(rename="expectedRedirectResponseCode")]
    
    pub expected_redirect_response_code: Option<i32>,
    /// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
    
    pub headers: Option<Vec<UrlMapTestHeader>>,
    /// Host portion of the URL. If headers contains a host header, then host must also match the header value.
    
    pub host: Option<String>,
    /// Path portion of the URL.
    
    pub path: Option<String>,
    /// Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
    
    pub service: Option<String>,
}

impl client::Part for UrlMapTest {}


/// HTTP headers used in UrlMapTests.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapTestHeader {
    /// Header name.
    
    pub name: Option<String>,
    /// Header value.
    
    pub value: Option<String>,
}

impl client::Part for UrlMapTestHeader {}


/// Message representing the validation result for a UrlMap.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapValidationResult {
    /// no description provided
    #[serde(rename="loadErrors")]
    
    pub load_errors: Option<Vec<String>>,
    /// Whether the given UrlMap can be successfully loaded. If false, 'loadErrors' indicates the reasons.
    #[serde(rename="loadSucceeded")]
    
    pub load_succeeded: Option<bool>,
    /// no description provided
    #[serde(rename="testFailures")]
    
    pub test_failures: Option<Vec<TestFailure>>,
    /// If successfully loaded, this field indicates whether the test passed. If false, 'testFailures's indicate the reason of failure.
    #[serde(rename="testPassed")]
    
    pub test_passed: Option<bool>,
}

impl client::Part for UrlMapValidationResult {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list url maps](UrlMapAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of UrlMapsScopedList resources.
    
    pub items: Option<HashMap<String, UrlMapsScopedList>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<UrlMapsAggregatedListWarning>,
}

impl client::ResponseResult for UrlMapsAggregatedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsScopedList {
    /// A list of UrlMaps contained in this scope.
    #[serde(rename="urlMaps")]
    
    pub url_maps: Option<Vec<UrlMap>>,
    /// Informational warning which replaces the list of backend services when the list is empty.
    
    pub warning: Option<UrlMapsScopedListWarning>,
}

impl client::Part for UrlMapsScopedList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [validate url maps](UrlMapValidateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsValidateRequest {
    /// Specifies the load balancer type(s) this validation request is for. Use EXTERNAL_MANAGED for HTTP/HTTPS External Global Load Balancer with Advanced Traffic Management. Use EXTERNAL for Classic HTTP/HTTPS External Global Load Balancer. Other load balancer types are not supported. For more information, refer to Choosing a load balancer. If unspecified, the load balancing scheme will be inferred from the backend service resources this URL map references. If that can not be inferred (for example, this URL map only references backend buckets, or this Url map is for rewrites and redirects only and doesn't reference any backends), EXTERNAL will be used as the default type. If specified, the scheme(s) must not conflict with the load balancing scheme of the backend service resources this Url map references.
    #[serde(rename="loadBalancingSchemes")]
    
    pub load_balancing_schemes: Option<Vec<UrlMapsValidateRequestLoadBalancingSchemesEnum>>,
    /// Content of the UrlMap to be validated.
    
    pub resource: Option<UrlMap>,
}

impl client::RequestValue for UrlMapsValidateRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [validate region url maps](RegionUrlMapValidateCall) (response)
/// * [validate url maps](UrlMapValidateCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsValidateResponse {
    /// no description provided
    
    pub result: Option<UrlMapValidationResult>,
}

impl client::ResponseResult for UrlMapsValidateResponse {}


/// The spec for modifying the path before sending the request to the matched backend service.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlRewrite {
    /// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
    #[serde(rename="hostRewrite")]
    
    pub host_rewrite: Option<String>,
    /// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
    #[serde(rename="pathPrefixRewrite")]
    
    pub path_prefix_rewrite: Option<String>,
}

impl client::Part for UrlRewrite {}


/// Subnetwork which the current user has compute.subnetworks.use permission on.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UsableSubnetwork {
    /// [Output Only] The external IPv6 address range that is assigned to this subnetwork.
    #[serde(rename="externalIpv6Prefix")]
    
    pub external_ipv6_prefix: Option<String>,
    /// [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
    #[serde(rename="internalIpv6Prefix")]
    
    pub internal_ipv6_prefix: Option<String>,
    /// The range of internal addresses that are owned by this subnetwork.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
    #[serde(rename="ipv6AccessType")]
    
    pub ipv6_access_type: Option<UsableSubnetworkIpv6AccessTypeEnum>,
    /// Network URL.
    
    pub network: Option<String>,
    /// The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
    
    pub purpose: Option<UsableSubnetworkPurposeEnum>,
    /// The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
    
    pub role: Option<UsableSubnetworkRoleEnum>,
    /// Secondary IP ranges.
    #[serde(rename="secondaryIpRanges")]
    
    pub secondary_ip_ranges: Option<Vec<UsableSubnetworkSecondaryRange>>,
    /// The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
    #[serde(rename="stackType")]
    
    pub stack_type: Option<UsableSubnetworkStackTypeEnum>,
    /// Subnetwork URL.
    
    pub subnetwork: Option<String>,
}

impl client::Part for UsableSubnetwork {}


/// Secondary IP range of a usable subnetwork.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UsableSubnetworkSecondaryRange {
    /// The range of IP addresses belonging to this subnetwork secondary range.
    #[serde(rename="ipCidrRange")]
    
    pub ip_cidr_range: Option<String>,
    /// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
    #[serde(rename="rangeName")]
    
    pub range_name: Option<String>,
}

impl client::Part for UsableSubnetworkSecondaryRange {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list usable subnetworks](SubnetworkListUsableCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UsableSubnetworksAggregatedList {
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    pub id: Option<String>,
    /// [Output] A list of usable subnetwork URLs.
    
    pub items: Option<Vec<UsableSubnetwork>>,
    /// [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. In special cases listUsable may return 0 subnetworks and nextPageToken which still should be used to get the next page of results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<UsableSubnetworksAggregatedListWarning>,
}

impl client::ResponseResult for UsableSubnetworksAggregatedList {}


/// The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set usage export bucket projects](ProjectSetUsageExportBucketCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UsageExportLocation {
    /// The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket.
    #[serde(rename="bucketName")]
    
    pub bucket_name: Option<String>,
    /// An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage_gce. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions.
    #[serde(rename="reportNamePrefix")]
    
    pub report_name_prefix: Option<String>,
}

impl client::RequestValue for UsageExportLocation {}


/// Contain information of Nat mapping for a VM endpoint (i.e., NIC).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VmEndpointNatMappings {
    /// Name of the VM instance which the endpoint belongs to
    #[serde(rename="instanceName")]
    
    pub instance_name: Option<String>,
    /// no description provided
    #[serde(rename="interfaceNatMappings")]
    
    pub interface_nat_mappings: Option<Vec<VmEndpointNatMappingsInterfaceNatMappings>>,
}

impl client::Part for VmEndpointNatMappings {}


/// Contain information of Nat mapping for an interface of this endpoint.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VmEndpointNatMappingsInterfaceNatMappings {
    /// List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
    #[serde(rename="drainNatIpPortRanges")]
    
    pub drain_nat_ip_port_ranges: Option<Vec<String>>,
    /// A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
    #[serde(rename="natIpPortRanges")]
    
    pub nat_ip_port_ranges: Option<Vec<String>>,
    /// Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges.
    #[serde(rename="numTotalDrainNatPorts")]
    
    pub num_total_drain_nat_ports: Option<i32>,
    /// Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges.
    #[serde(rename="numTotalNatPorts")]
    
    pub num_total_nat_ports: Option<i32>,
    /// Information about mappings provided by rules in this NAT.
    #[serde(rename="ruleMappings")]
    
    pub rule_mappings: Option<Vec<VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings>>,
    /// Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: "10.33.4.55/32", or "192.168.5.0/24".
    #[serde(rename="sourceAliasIpRange")]
    
    pub source_alias_ip_range: Option<String>,
    /// Primary IP of the VM for this NIC.
    #[serde(rename="sourceVirtualIp")]
    
    pub source_virtual_ip: Option<String>,
}

impl client::Part for VmEndpointNatMappingsInterfaceNatMappings {}


/// Contains information of NAT Mappings provided by a NAT Rule.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {
    /// List of all drain IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
    #[serde(rename="drainNatIpPortRanges")]
    
    pub drain_nat_ip_port_ranges: Option<Vec<String>>,
    /// A list of all IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
    #[serde(rename="natIpPortRanges")]
    
    pub nat_ip_port_ranges: Option<Vec<String>>,
    /// Total number of drain ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field drain_nat_ip_port_ranges.
    #[serde(rename="numTotalDrainNatPorts")]
    
    pub num_total_drain_nat_ports: Option<i32>,
    /// Total number of ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field nat_ip_port_ranges.
    #[serde(rename="numTotalNatPorts")]
    
    pub num_total_nat_ports: Option<i32>,
    /// Rule number of the NAT Rule.
    #[serde(rename="ruleNumber")]
    
    pub rule_number: Option<i32>,
}

impl client::Part for VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {}


/// Contains a list of VmEndpointNatMappings.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get nat mapping info routers](RouterGetNatMappingInfoCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VmEndpointNatMappingsList {
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    pub id: Option<String>,
    /// [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] A list of Nat mapping information of VM endpoints.
    
    pub result: Option<Vec<VmEndpointNatMappings>>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<VmEndpointNatMappingsListWarning>,
}

impl client::ResponseResult for VmEndpointNatMappingsList {}


/// Represents a HA VPN gateway. HA VPN is a high-availability (HA) Cloud VPN solution that lets you securely connect your on-premises network to your Google Cloud Virtual Private Cloud network through an IPsec VPN connection in a single region. For more information about Cloud HA VPN solutions, see Cloud VPN topologies .
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list vpn gateways](VpnGatewayAggregatedListCall) (none)
/// * [delete vpn gateways](VpnGatewayDeleteCall) (none)
/// * [get vpn gateways](VpnGatewayGetCall) (response)
/// * [get status vpn gateways](VpnGatewayGetStatuCall) (none)
/// * [insert vpn gateways](VpnGatewayInsertCall) (request)
/// * [list vpn gateways](VpnGatewayListCall) (none)
/// * [set labels vpn gateways](VpnGatewaySetLabelCall) (none)
/// * [test iam permissions vpn gateways](VpnGatewayTestIamPermissionCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGateway {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
    
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an VpnGateway.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
    
    pub labels: Option<HashMap<String, String>>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
    
    pub network: Option<String>,
    /// [Output Only] URL of the region where the VPN gateway resides.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used.
    #[serde(rename="stackType")]
    
    pub stack_type: Option<VpnGatewayStackTypeEnum>,
    /// The list of VPN interfaces associated with this VPN gateway.
    #[serde(rename="vpnInterfaces")]
    
    pub vpn_interfaces: Option<Vec<VpnGatewayVpnGatewayInterface>>,
}

impl client::RequestValue for VpnGateway {}
impl client::Resource for VpnGateway {}
impl client::ResponseResult for VpnGateway {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list vpn gateways](VpnGatewayAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of VpnGateway resources.
    
    pub items: Option<HashMap<String, VpnGatewaysScopedList>>,
    /// [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<VpnGatewayAggregatedListWarning>,
}

impl client::ResponseResult for VpnGatewayAggregatedList {}


/// Contains a list of VpnGateway resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list vpn gateways](VpnGatewayListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of VpnGateway resources.
    
    pub items: Option<Vec<VpnGateway>>,
    /// [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<VpnGatewayListWarning>,
}

impl client::ResponseResult for VpnGatewayList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayStatus {
    /// List of VPN connection for this VpnGateway.
    #[serde(rename="vpnConnections")]
    
    pub vpn_connections: Option<Vec<VpnGatewayStatusVpnConnection>>,
}

impl client::Part for VpnGatewayStatus {}


/// Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayStatusHighAvailabilityRequirementState {
    /// Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET.
    
    pub state: Option<VpnGatewayStatusHighAvailabilityRequirementStateStateEnum>,
    /// Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE.
    #[serde(rename="unsatisfiedReason")]
    
    pub unsatisfied_reason: Option<VpnGatewayStatusHighAvailabilityRequirementStateUnsatisfiedReasonEnum>,
}

impl client::Part for VpnGatewayStatusHighAvailabilityRequirementState {}


/// Contains some information about a VPN tunnel.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayStatusTunnel {
    /// The VPN gateway interface this VPN tunnel is associated with.
    #[serde(rename="localGatewayInterface")]
    
    pub local_gateway_interface: Option<u32>,
    /// The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or GCP VPN gateway.
    #[serde(rename="peerGatewayInterface")]
    
    pub peer_gateway_interface: Option<u32>,
    /// URL reference to the VPN tunnel.
    #[serde(rename="tunnelUrl")]
    
    pub tunnel_url: Option<String>,
}

impl client::Part for VpnGatewayStatusTunnel {}


/// A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be a external VPN gateway or GCP VPN gateway.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayStatusVpnConnection {
    /// URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway.
    #[serde(rename="peerExternalGateway")]
    
    pub peer_external_gateway: Option<String>,
    /// URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway.
    #[serde(rename="peerGcpGateway")]
    
    pub peer_gcp_gateway: Option<String>,
    /// HighAvailabilityRequirementState for the VPN connection.
    
    pub state: Option<VpnGatewayStatusHighAvailabilityRequirementState>,
    /// List of VPN tunnels that are in this VPN connection.
    
    pub tunnels: Option<Vec<VpnGatewayStatusTunnel>>,
}

impl client::Part for VpnGatewayStatusVpnConnection {}


/// A VPN gateway interface.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayVpnGatewayInterface {
    /// [Output Only] Numeric identifier for this VPN interface associated with the VPN gateway.
    
    pub id: Option<u32>,
    /// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
    #[serde(rename="interconnectAttachment")]
    
    pub interconnect_attachment: Option<String>,
    /// [Output Only] IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
    #[serde(rename="ipAddress")]
    
    pub ip_address: Option<String>,
}

impl client::Part for VpnGatewayVpnGatewayInterface {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get status vpn gateways](VpnGatewayGetStatuCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewaysGetStatusResponse {
    /// no description provided
    
    pub result: Option<VpnGatewayStatus>,
}

impl client::ResponseResult for VpnGatewaysGetStatusResponse {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewaysScopedList {
    /// [Output Only] A list of VPN gateways contained in this scope.
    #[serde(rename="vpnGateways")]
    
    pub vpn_gateways: Option<Vec<VpnGateway>>,
    /// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<VpnGatewaysScopedListWarning>,
}

impl client::Part for VpnGatewaysScopedList {}


/// Represents a Cloud VPN Tunnel resource. For more information about VPN, read the the Cloud VPN Overview.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list vpn tunnels](VpnTunnelAggregatedListCall) (none)
/// * [delete vpn tunnels](VpnTunnelDeleteCall) (none)
/// * [get vpn tunnels](VpnTunnelGetCall) (response)
/// * [insert vpn tunnels](VpnTunnelInsertCall) (request)
/// * [list vpn tunnels](VpnTunnelListCall) (none)
/// * [set labels vpn tunnels](VpnTunnelSetLabelCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnel {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    
    pub description: Option<String>,
    /// [Output Only] Detailed status message for the VPN tunnel.
    #[serde(rename="detailedStatus")]
    
    pub detailed_status: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
    #[serde(rename="ikeVersion")]
    
    pub ike_version: Option<i32>,
    /// [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    
    pub kind: Option<String>,
    /// Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported.
    #[serde(rename="localTrafficSelector")]
    
    pub local_traffic_selector: Option<Vec<String>>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    
    pub name: Option<String>,
    /// URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway.
    #[serde(rename="peerExternalGateway")]
    
    pub peer_external_gateway: Option<String>,
    /// The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. Possible values are: `0`, `1`, `2`, `3`. The number of IDs in use depends on the external VPN gateway redundancy type.
    #[serde(rename="peerExternalGatewayInterface")]
    
    pub peer_external_gateway_interface: Option<i32>,
    /// URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway.
    #[serde(rename="peerGcpGateway")]
    
    pub peer_gcp_gateway: Option<String>,
    /// IP address of the peer VPN gateway. Only IPv4 is supported.
    #[serde(rename="peerIp")]
    
    pub peer_ip: Option<String>,
    /// [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    
    pub region: Option<String>,
    /// Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported.
    #[serde(rename="remoteTrafficSelector")]
    
    pub remote_traffic_selector: Option<Vec<String>>,
    /// URL of the router resource to be used for dynamic routing.
    
    pub router: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
    #[serde(rename="sharedSecret")]
    
    pub shared_secret: Option<String>,
    /// Hash of the shared secret.
    #[serde(rename="sharedSecretHash")]
    
    pub shared_secret_hash: Option<String>,
    /// [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel. 
    
    pub status: Option<VpnTunnelStatusEnum>,
    /// URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created.
    #[serde(rename="targetVpnGateway")]
    
    pub target_vpn_gateway: Option<String>,
    /// URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created.
    #[serde(rename="vpnGateway")]
    
    pub vpn_gateway: Option<String>,
    /// The interface ID of the VPN gateway with which this VPN tunnel is associated. Possible values are: `0`, `1`.
    #[serde(rename="vpnGatewayInterface")]
    
    pub vpn_gateway_interface: Option<i32>,
}

impl client::RequestValue for VpnTunnel {}
impl client::Resource for VpnTunnel {}
impl client::ResponseResult for VpnTunnel {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [aggregated list vpn tunnels](VpnTunnelAggregatedListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of VpnTunnelsScopedList resources.
    
    pub items: Option<HashMap<String, VpnTunnelsScopedList>>,
    /// [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Unreachable resources.
    
    pub unreachables: Option<Vec<String>>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<VpnTunnelAggregatedListWarning>,
}

impl client::ResponseResult for VpnTunnelAggregatedList {}


/// Contains a list of VpnTunnel resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list vpn tunnels](VpnTunnelListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of VpnTunnel resources.
    
    pub items: Option<Vec<VpnTunnel>>,
    /// [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<VpnTunnelListWarning>,
}

impl client::ResponseResult for VpnTunnelList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelsScopedList {
    /// A list of VPN tunnels contained in this scope.
    #[serde(rename="vpnTunnels")]
    
    pub vpn_tunnels: Option<Vec<VpnTunnel>>,
    /// Informational warning which replaces the list of addresses when the list is empty.
    
    pub warning: Option<VpnTunnelsScopedListWarning>,
}

impl client::Part for VpnTunnelsScopedList {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct WafExpressionSet {
    /// A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like "stable" is particularly useful if a policy likes to avail newer set of expressions without having to change the policy. A given alias name can't be used for more than one entity set.
    
    pub aliases: Option<Vec<String>>,
    /// List of available expressions.
    
    pub expressions: Option<Vec<WafExpressionSetExpression>>,
    /// Google specified expression set ID. The format should be: - E.g. XSS-20170329 required
    
    pub id: Option<String>,
}

impl client::Part for WafExpressionSet {}


/// There is no detailed description.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct WafExpressionSetExpression {
    /// Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive. required
    
    pub id: Option<String>,
}

impl client::Part for WafExpressionSetExpression {}


/// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct WeightedBackendService {
    /// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
    #[serde(rename="backendService")]
    
    pub backend_service: Option<String>,
    /// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    #[serde(rename="headerAction")]
    
    pub header_action: Option<HttpHeaderAction>,
    /// Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
    
    pub weight: Option<u32>,
}

impl client::Part for WeightedBackendService {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list xpn hosts projects](ProjectListXpnHostCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct XpnHostList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// [Output Only] A list of shared VPC host project URLs.
    
    pub items: Option<Vec<Project>>,
    /// [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<XpnHostListWarning>,
}

impl client::ResponseResult for XpnHostList {}


/// Service resource (a.k.a service project) ID.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct XpnResourceId {
    /// The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678).
    
    pub id: Option<String>,
    /// The type of the service resource.
    #[serde(rename="type")]
    
    pub type_: Option<XpnResourceIdTypeEnum>,
}

impl client::Part for XpnResourceId {}


/// Represents a Zone resource. A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get zones](ZoneGetCall) (response)
/// * [list zones](ZoneListCall) (none)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct Zone {
    /// [Output Only] Available cpu/platform selections for the zone.
    #[serde(rename="availableCpuPlatforms")]
    
    pub available_cpu_platforms: Option<Vec<String>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename="creationTimestamp")]
    
    pub creation_timestamp: Option<String>,
    /// [Output Only] The deprecation status associated with this zone.
    
    pub deprecated: Option<DeprecationStatus>,
    /// [Output Only] Textual description of the resource.
    
    pub description: Option<String>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    
    #[serde_as(as = "Option<::client::serde_with::DisplayFromStr>")]
    pub id: Option<u64>,
    /// [Output Only] Type of the resource. Always compute#zone for zones.
    
    pub kind: Option<String>,
    /// [Output Only] Name of the resource.
    
    pub name: Option<String>,
    /// [Output Only] Full URL reference to the region which hosts the zone.
    
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Status of the zone, either UP or DOWN.
    
    pub status: Option<ZoneStatusEnum>,
    /// [Output Only] Reserved for future use.
    #[serde(rename="supportsPzs")]
    
    pub supports_pzs: Option<bool>,
}

impl client::Resource for Zone {}
impl client::ResponseResult for Zone {}


/// Contains a list of zone resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list zones](ZoneListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ZoneList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    
    pub id: Option<String>,
    /// A list of Zone resources.
    
    pub items: Option<Vec<Zone>>,
    /// Type of resource.
    
    pub kind: Option<String>,
    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// [Output Only] Server-defined URL for this resource.
    #[serde(rename="selfLink")]
    
    pub self_link: Option<String>,
    /// [Output Only] Informational warning message.
    
    pub warning: Option<ZoneListWarning>,
}

impl client::ResponseResult for ZoneList {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set labels disks](DiskSetLabelCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ZoneSetLabelsRequest {
    /// The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint.
    #[serde(rename="labelFingerprint")]
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// The labels to set for this resource.
    
    pub labels: Option<HashMap<String, String>>,
}

impl client::RequestValue for ZoneSetLabelsRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set iam policy disks](DiskSetIamPolicyCall) (request)
/// * [set iam policy instances](InstanceSetIamPolicyCall) (request)
/// * [set iam policy node groups](NodeGroupSetIamPolicyCall) (request)
/// * [set iam policy reservations](ReservationSetIamPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ZoneSetPolicyRequest {
    /// Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings.
    
    pub bindings: Option<Vec<Binding>>,
    /// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub etag: Option<Vec<u8>>,
    /// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    
    pub policy: Option<Policy>,
}

impl client::RequestValue for ZoneSetPolicyRequest {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypeAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AcceleratorTypeAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AcceleratorTypeAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AcceleratorTypeAggregatedListWarning {}
impl client::Part for AcceleratorTypeAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypeAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AcceleratorTypeAggregatedListWarningData {}
impl client::Part for AcceleratorTypeAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypeListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AcceleratorTypeListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AcceleratorTypeListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AcceleratorTypeListWarning {}
impl client::Part for AcceleratorTypeListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypeListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AcceleratorTypeListWarningData {}
impl client::Part for AcceleratorTypeListWarningData {}


/// [Output Only] An informational warning that appears when the accelerator types list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AcceleratorTypesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AcceleratorTypesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AcceleratorTypesScopedListWarning {}
impl client::Part for AcceleratorTypesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AcceleratorTypesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AcceleratorTypesScopedListWarningData {}
impl client::Part for AcceleratorTypesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AddressAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AddressAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AddressAggregatedListWarning {}
impl client::Part for AddressAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AddressAggregatedListWarningData {}
impl client::Part for AddressAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AddressListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AddressListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AddressListWarning {}
impl client::Part for AddressListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AddressListWarningData {}
impl client::Part for AddressListWarningData {}


/// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AddressesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AddressesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AddressesScopedListWarning {}
impl client::Part for AddressesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AddressesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AddressesScopedListWarningData {}
impl client::Part for AddressesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AutoscalerAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AutoscalerAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AutoscalerAggregatedListWarning {}
impl client::Part for AutoscalerAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AutoscalerAggregatedListWarningData {}
impl client::Part for AutoscalerAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AutoscalerListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AutoscalerListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AutoscalerListWarning {}
impl client::Part for AutoscalerListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalerListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AutoscalerListWarningData {}
impl client::Part for AutoscalerListWarningData {}


/// [Output Only] Informational warning which replaces the list of autoscalers when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalersScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<AutoscalersScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<AutoscalersScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for AutoscalersScopedListWarning {}
impl client::Part for AutoscalersScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct AutoscalersScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for AutoscalersScopedListWarningData {}
impl client::Part for AutoscalersScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<BackendBucketListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<BackendBucketListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for BackendBucketListWarning {}
impl client::Part for BackendBucketListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendBucketListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for BackendBucketListWarningData {}
impl client::Part for BackendBucketListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<BackendServiceAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<BackendServiceAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for BackendServiceAggregatedListWarning {}
impl client::Part for BackendServiceAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for BackendServiceAggregatedListWarningData {}
impl client::Part for BackendServiceAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<BackendServiceListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<BackendServiceListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for BackendServiceListWarning {}
impl client::Part for BackendServiceListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServiceListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for BackendServiceListWarningData {}
impl client::Part for BackendServiceListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServicesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<BackendServicesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<BackendServicesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for BackendServicesScopedListWarning {}
impl client::Part for BackendServicesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct BackendServicesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for BackendServicesScopedListWarningData {}
impl client::Part for BackendServicesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<CommitmentAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<CommitmentAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for CommitmentAggregatedListWarning {}
impl client::Part for CommitmentAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for CommitmentAggregatedListWarningData {}
impl client::Part for CommitmentAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<CommitmentListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<CommitmentListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for CommitmentListWarning {}
impl client::Part for CommitmentListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for CommitmentListWarningData {}
impl client::Part for CommitmentListWarningData {}


/// [Output Only] Informational warning which replaces the list of commitments when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<CommitmentsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<CommitmentsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for CommitmentsScopedListWarning {}
impl client::Part for CommitmentsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct CommitmentsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for CommitmentsScopedListWarningData {}
impl client::Part for CommitmentsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<DiskAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<DiskAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for DiskAggregatedListWarning {}
impl client::Part for DiskAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for DiskAggregatedListWarningData {}
impl client::Part for DiskAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<DiskListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<DiskListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for DiskListWarning {}
impl client::Part for DiskListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for DiskListWarningData {}
impl client::Part for DiskListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypeAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<DiskTypeAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<DiskTypeAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for DiskTypeAggregatedListWarning {}
impl client::Part for DiskTypeAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypeAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for DiskTypeAggregatedListWarningData {}
impl client::Part for DiskTypeAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypeListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<DiskTypeListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<DiskTypeListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for DiskTypeListWarning {}
impl client::Part for DiskTypeListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypeListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for DiskTypeListWarningData {}
impl client::Part for DiskTypeListWarningData {}


/// [Output Only] Informational warning which replaces the list of disk types when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<DiskTypesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<DiskTypesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for DiskTypesScopedListWarning {}
impl client::Part for DiskTypesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DiskTypesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for DiskTypesScopedListWarningData {}
impl client::Part for DiskTypesScopedListWarningData {}


/// [Output Only] Informational warning which replaces the list of disks when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisksScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<DisksScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<DisksScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for DisksScopedListWarning {}
impl client::Part for DisksScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct DisksScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for DisksScopedListWarningData {}
impl client::Part for DisksScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExchangedPeeringRoutesListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ExchangedPeeringRoutesListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ExchangedPeeringRoutesListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ExchangedPeeringRoutesListWarning {}
impl client::Part for ExchangedPeeringRoutesListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExchangedPeeringRoutesListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ExchangedPeeringRoutesListWarningData {}
impl client::Part for ExchangedPeeringRoutesListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExternalVpnGatewayListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ExternalVpnGatewayListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ExternalVpnGatewayListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ExternalVpnGatewayListWarning {}
impl client::Part for ExternalVpnGatewayListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ExternalVpnGatewayListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ExternalVpnGatewayListWarningData {}
impl client::Part for ExternalVpnGatewayListWarningData {}


/// The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallAllowed {
    /// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
    #[serde(rename="IPProtocol")]
    
    pub ip_protocol: Option<String>,
    /// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
    
    pub ports: Option<Vec<String>>,
}

impl client::NestedType for FirewallAllowed {}
impl client::Part for FirewallAllowed {}


/// The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallDenied {
    /// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
    #[serde(rename="IPProtocol")]
    
    pub ip_protocol: Option<String>,
    /// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
    
    pub ports: Option<Vec<String>>,
}

impl client::NestedType for FirewallDenied {}
impl client::Part for FirewallDenied {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<FirewallListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<FirewallListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for FirewallListWarning {}
impl client::Part for FirewallListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for FirewallListWarningData {}
impl client::Part for FirewallListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<FirewallPolicyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<FirewallPolicyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for FirewallPolicyListWarning {}
impl client::Part for FirewallPolicyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct FirewallPolicyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for FirewallPolicyListWarningData {}
impl client::Part for FirewallPolicyListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ForwardingRuleAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ForwardingRuleAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ForwardingRuleAggregatedListWarning {}
impl client::Part for ForwardingRuleAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ForwardingRuleAggregatedListWarningData {}
impl client::Part for ForwardingRuleAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ForwardingRuleListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ForwardingRuleListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ForwardingRuleListWarning {}
impl client::Part for ForwardingRuleListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRuleListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ForwardingRuleListWarningData {}
impl client::Part for ForwardingRuleListWarningData {}


/// Informational warning which replaces the list of forwarding rules when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRulesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ForwardingRulesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ForwardingRulesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ForwardingRulesScopedListWarning {}
impl client::Part for ForwardingRulesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ForwardingRulesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ForwardingRulesScopedListWarningData {}
impl client::Part for ForwardingRulesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<HealthCheckListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<HealthCheckListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for HealthCheckListWarning {}
impl client::Part for HealthCheckListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for HealthCheckListWarningData {}
impl client::Part for HealthCheckListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckServicesListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<HealthCheckServicesListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<HealthCheckServicesListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for HealthCheckServicesListWarning {}
impl client::Part for HealthCheckServicesListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthCheckServicesListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for HealthCheckServicesListWarningData {}
impl client::Part for HealthCheckServicesListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthChecksAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<HealthChecksAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<HealthChecksAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for HealthChecksAggregatedListWarning {}
impl client::Part for HealthChecksAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthChecksAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for HealthChecksAggregatedListWarningData {}
impl client::Part for HealthChecksAggregatedListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthChecksScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<HealthChecksScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<HealthChecksScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for HealthChecksScopedListWarning {}
impl client::Part for HealthChecksScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HealthChecksScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for HealthChecksScopedListWarningData {}
impl client::Part for HealthChecksScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHealthCheckListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<HttpHealthCheckListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<HttpHealthCheckListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for HttpHealthCheckListWarning {}
impl client::Part for HttpHealthCheckListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpHealthCheckListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for HttpHealthCheckListWarningData {}
impl client::Part for HttpHealthCheckListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpsHealthCheckListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<HttpsHealthCheckListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<HttpsHealthCheckListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for HttpsHealthCheckListWarning {}
impl client::Part for HttpsHealthCheckListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct HttpsHealthCheckListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for HttpsHealthCheckListWarningData {}
impl client::Part for HttpsHealthCheckListWarningData {}


/// The parameters of the raw disk image.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ImageRawDisk {
    /// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
    #[serde(rename="containerType")]
    
    pub container_type: Option<ImageRawDiskContainerTypeEnum>,
    /// [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created.
    #[serde(rename="sha1Checksum")]
    
    pub sha1_checksum: Option<String>,
    /// The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: - https://storage.googleapis.com/bucket_name/image_archive_name - https://storage.googleapis.com/bucket_name/folder_name/ image_archive_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL 
    
    pub source: Option<String>,
}

impl client::NestedType for ImageRawDisk {}
impl client::Part for ImageRawDisk {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ImageListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ImageListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ImageListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ImageListWarning {}
impl client::Part for ImageListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ImageListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ImageListWarningData {}
impl client::Part for ImageListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceAggregatedListWarning {}
impl client::Part for InstanceAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceAggregatedListWarningData {}
impl client::Part for InstanceAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupAggregatedListWarning {}
impl client::Part for InstanceGroupAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupAggregatedListWarningData {}
impl client::Part for InstanceGroupAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupListWarning {}
impl client::Part for InstanceGroupListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupListWarningData {}
impl client::Part for InstanceGroupListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupManagerAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupManagerAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupManagerAggregatedListWarning {}
impl client::Part for InstanceGroupManagerAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupManagerAggregatedListWarningData {}
impl client::Part for InstanceGroupManagerAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupManagerListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupManagerListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupManagerListWarning {}
impl client::Part for InstanceGroupManagerListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagerListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupManagerListWarningData {}
impl client::Part for InstanceGroupManagerListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersListPerInstanceConfigsRespWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupManagersListPerInstanceConfigsRespWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupManagersListPerInstanceConfigsRespWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupManagersListPerInstanceConfigsRespWarning {}
impl client::Part for InstanceGroupManagersListPerInstanceConfigsRespWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersListPerInstanceConfigsRespWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupManagersListPerInstanceConfigsRespWarningData {}
impl client::Part for InstanceGroupManagersListPerInstanceConfigsRespWarningData {}


/// [Output Only] The warning that replaces the list of managed instance groups when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupManagersScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupManagersScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupManagersScopedListWarning {}
impl client::Part for InstanceGroupManagersScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupManagersScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupManagersScopedListWarningData {}
impl client::Part for InstanceGroupManagersScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsListInstancesWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupsListInstancesWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupsListInstancesWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupsListInstancesWarning {}
impl client::Part for InstanceGroupsListInstancesWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsListInstancesWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupsListInstancesWarningData {}
impl client::Part for InstanceGroupsListInstancesWarningData {}


/// [Output Only] An informational warning that replaces the list of instance groups when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceGroupsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceGroupsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceGroupsScopedListWarning {}
impl client::Part for InstanceGroupsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceGroupsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceGroupsScopedListWarningData {}
impl client::Part for InstanceGroupsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceListWarning {}
impl client::Part for InstanceListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceListWarningData {}
impl client::Part for InstanceListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceListReferrersWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceListReferrersWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceListReferrersWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceListReferrersWarning {}
impl client::Part for InstanceListReferrersWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceListReferrersWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceListReferrersWarningData {}
impl client::Part for InstanceListReferrersWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceTemplateListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstanceTemplateListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstanceTemplateListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstanceTemplateListWarning {}
impl client::Part for InstanceTemplateListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstanceTemplateListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstanceTemplateListWarningData {}
impl client::Part for InstanceTemplateListWarningData {}


/// [Output Only] Informational warning which replaces the list of instances when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InstancesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InstancesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InstancesScopedListWarning {}
impl client::Part for InstancesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InstancesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InstancesScopedListWarningData {}
impl client::Part for InstancesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InterconnectAttachmentAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InterconnectAttachmentAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InterconnectAttachmentAggregatedListWarning {}
impl client::Part for InterconnectAttachmentAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InterconnectAttachmentAggregatedListWarningData {}
impl client::Part for InterconnectAttachmentAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InterconnectAttachmentListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InterconnectAttachmentListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InterconnectAttachmentListWarning {}
impl client::Part for InterconnectAttachmentListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InterconnectAttachmentListWarningData {}
impl client::Part for InterconnectAttachmentListWarningData {}


/// Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InterconnectAttachmentsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InterconnectAttachmentsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InterconnectAttachmentsScopedListWarning {}
impl client::Part for InterconnectAttachmentsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectAttachmentsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InterconnectAttachmentsScopedListWarningData {}
impl client::Part for InterconnectAttachmentsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InterconnectListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InterconnectListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InterconnectListWarning {}
impl client::Part for InterconnectListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InterconnectListWarningData {}
impl client::Part for InterconnectListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectLocationListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<InterconnectLocationListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<InterconnectLocationListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for InterconnectLocationListWarning {}
impl client::Part for InterconnectLocationListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct InterconnectLocationListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for InterconnectLocationListWarningData {}
impl client::Part for InterconnectLocationListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicensesListResponseWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<LicensesListResponseWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<LicensesListResponseWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for LicensesListResponseWarning {}
impl client::Part for LicensesListResponseWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct LicensesListResponseWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for LicensesListResponseWarningData {}
impl client::Part for LicensesListResponseWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineImageListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<MachineImageListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<MachineImageListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for MachineImageListWarning {}
impl client::Part for MachineImageListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineImageListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for MachineImageListWarningData {}
impl client::Part for MachineImageListWarningData {}


/// [Output Only] A list of accelerator configurations assigned to this machine type.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeAccelerators {
    /// Number of accelerator cards exposed to the guest.
    #[serde(rename="guestAcceleratorCount")]
    
    pub guest_accelerator_count: Option<i32>,
    /// The accelerator type resource name, not a full URL, e.g. 'nvidia-tesla-k80'.
    #[serde(rename="guestAcceleratorType")]
    
    pub guest_accelerator_type: Option<String>,
}

impl client::NestedType for MachineTypeAccelerators {}
impl client::Part for MachineTypeAccelerators {}


/// [Output Only] A list of extended scratch disks assigned to the instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeScratchDisks {
    /// Size of the scratch disk, defined in GB.
    #[serde(rename="diskGb")]
    
    pub disk_gb: Option<i32>,
}

impl client::NestedType for MachineTypeScratchDisks {}
impl client::Part for MachineTypeScratchDisks {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<MachineTypeAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<MachineTypeAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for MachineTypeAggregatedListWarning {}
impl client::Part for MachineTypeAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for MachineTypeAggregatedListWarningData {}
impl client::Part for MachineTypeAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<MachineTypeListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<MachineTypeListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for MachineTypeListWarning {}
impl client::Part for MachineTypeListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypeListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for MachineTypeListWarningData {}
impl client::Part for MachineTypeListWarningData {}


/// [Output Only] An informational warning that appears when the machine types list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<MachineTypesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<MachineTypesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for MachineTypesScopedListWarning {}
impl client::Part for MachineTypesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MachineTypesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for MachineTypesScopedListWarningData {}
impl client::Part for MachineTypesScopedListWarningData {}


/// [Output Only] Encountered errors during the last attempt to create or delete the instance.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstanceLastAttemptErrors {
    /// [Output Only] The array of errors encountered while processing this operation.
    
    pub errors: Option<Vec<ManagedInstanceLastAttemptErrorsErrors>>,
}

impl client::NestedType for ManagedInstanceLastAttemptErrors {}
impl client::Part for ManagedInstanceLastAttemptErrors {}


/// [Output Only] The array of errors encountered while processing this operation.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstanceLastAttemptErrorsErrors {
    /// [Output Only] The error type identifier for this error.
    
    pub code: Option<String>,
    /// [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
    #[serde(rename="errorDetails")]
    
    pub error_details: Option<Vec<ManagedInstanceLastAttemptErrorsErrorsErrorDetails>>,
    /// [Output Only] Indicates the field in the request that caused the error. This property is optional.
    
    pub location: Option<String>,
    /// [Output Only] An optional, human-readable error message.
    
    pub message: Option<String>,
}

impl client::NestedType for ManagedInstanceLastAttemptErrorsErrors {}
impl client::Part for ManagedInstanceLastAttemptErrorsErrors {}


/// [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ManagedInstanceLastAttemptErrorsErrorsErrorDetails {
    /// no description provided
    #[serde(rename="errorInfo")]
    
    pub error_info: Option<ErrorInfo>,
    /// no description provided
    
    pub help: Option<Help>,
    /// no description provided
    #[serde(rename="localizedMessage")]
    
    pub localized_message: Option<LocalizedMessage>,
    /// no description provided
    #[serde(rename="quotaInfo")]
    
    pub quota_info: Option<QuotaExceededInfo>,
}

impl client::NestedType for ManagedInstanceLastAttemptErrorsErrorsErrorDetails {}
impl client::Part for ManagedInstanceLastAttemptErrorsErrorsErrorDetails {}


/// Metadata
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct MetadataItems {
    /// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
    
    pub key: Option<String>,
    /// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
    
    pub value: Option<String>,
}

impl client::NestedType for MetadataItems {}
impl client::Part for MetadataItems {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkAttachmentAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkAttachmentAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkAttachmentAggregatedListWarning {}
impl client::Part for NetworkAttachmentAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkAttachmentAggregatedListWarningData {}
impl client::Part for NetworkAttachmentAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkAttachmentListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkAttachmentListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkAttachmentListWarning {}
impl client::Part for NetworkAttachmentListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkAttachmentListWarningData {}
impl client::Part for NetworkAttachmentListWarningData {}


/// Informational warning which replaces the list of network attachments when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkAttachmentsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkAttachmentsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkAttachmentsScopedListWarning {}
impl client::Part for NetworkAttachmentsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkAttachmentsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkAttachmentsScopedListWarningData {}
impl client::Part for NetworkAttachmentsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityServiceAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkEdgeSecurityServiceAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkEdgeSecurityServiceAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkEdgeSecurityServiceAggregatedListWarning {}
impl client::Part for NetworkEdgeSecurityServiceAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityServiceAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkEdgeSecurityServiceAggregatedListWarningData {}
impl client::Part for NetworkEdgeSecurityServiceAggregatedListWarningData {}


/// Informational warning which replaces the list of security policies when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityServicesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkEdgeSecurityServicesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkEdgeSecurityServicesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkEdgeSecurityServicesScopedListWarning {}
impl client::Part for NetworkEdgeSecurityServicesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEdgeSecurityServicesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkEdgeSecurityServicesScopedListWarningData {}
impl client::Part for NetworkEdgeSecurityServicesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkEndpointGroupAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkEndpointGroupAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupAggregatedListWarning {}
impl client::Part for NetworkEndpointGroupAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupAggregatedListWarningData {}
impl client::Part for NetworkEndpointGroupAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkEndpointGroupListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkEndpointGroupListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupListWarning {}
impl client::Part for NetworkEndpointGroupListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupListWarningData {}
impl client::Part for NetworkEndpointGroupListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsListNetworkEndpointsWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkEndpointGroupsListNetworkEndpointsWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkEndpointGroupsListNetworkEndpointsWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupsListNetworkEndpointsWarning {}
impl client::Part for NetworkEndpointGroupsListNetworkEndpointsWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsListNetworkEndpointsWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupsListNetworkEndpointsWarningData {}
impl client::Part for NetworkEndpointGroupsListNetworkEndpointsWarningData {}


/// [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkEndpointGroupsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkEndpointGroupsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupsScopedListWarning {}
impl client::Part for NetworkEndpointGroupsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkEndpointGroupsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkEndpointGroupsScopedListWarningData {}
impl client::Part for NetworkEndpointGroupsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NetworkListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NetworkListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NetworkListWarning {}
impl client::Part for NetworkListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NetworkListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NetworkListWarningData {}
impl client::Part for NetworkListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeGroupAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeGroupAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeGroupAggregatedListWarning {}
impl client::Part for NodeGroupAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeGroupAggregatedListWarningData {}
impl client::Part for NodeGroupAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeGroupListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeGroupListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeGroupListWarning {}
impl client::Part for NodeGroupListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeGroupListWarningData {}
impl client::Part for NodeGroupListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsListNodesWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeGroupsListNodesWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeGroupsListNodesWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeGroupsListNodesWarning {}
impl client::Part for NodeGroupsListNodesWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsListNodesWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeGroupsListNodesWarningData {}
impl client::Part for NodeGroupsListNodesWarningData {}


/// [Output Only] An informational warning that appears when the nodeGroup list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeGroupsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeGroupsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeGroupsScopedListWarning {}
impl client::Part for NodeGroupsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeGroupsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeGroupsScopedListWarningData {}
impl client::Part for NodeGroupsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeTemplateAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeTemplateAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeTemplateAggregatedListWarning {}
impl client::Part for NodeTemplateAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeTemplateAggregatedListWarningData {}
impl client::Part for NodeTemplateAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeTemplateListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeTemplateListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeTemplateListWarning {}
impl client::Part for NodeTemplateListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplateListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeTemplateListWarningData {}
impl client::Part for NodeTemplateListWarningData {}


/// [Output Only] An informational warning that appears when the node templates list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplatesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeTemplatesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeTemplatesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeTemplatesScopedListWarning {}
impl client::Part for NodeTemplatesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTemplatesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeTemplatesScopedListWarningData {}
impl client::Part for NodeTemplatesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypeAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeTypeAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeTypeAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeTypeAggregatedListWarning {}
impl client::Part for NodeTypeAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypeAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeTypeAggregatedListWarningData {}
impl client::Part for NodeTypeAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypeListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeTypeListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeTypeListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeTypeListWarning {}
impl client::Part for NodeTypeListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypeListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeTypeListWarningData {}
impl client::Part for NodeTypeListWarningData {}


/// [Output Only] An informational warning that appears when the node types list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NodeTypesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NodeTypesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NodeTypesScopedListWarning {}
impl client::Part for NodeTypesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NodeTypesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NodeTypesScopedListWarningData {}
impl client::Part for NodeTypesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NotificationEndpointListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<NotificationEndpointListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<NotificationEndpointListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for NotificationEndpointListWarning {}
impl client::Part for NotificationEndpointListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct NotificationEndpointListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for NotificationEndpointListWarningData {}
impl client::Part for NotificationEndpointListWarningData {}


/// [Output Only] If errors are generated during processing of the operation, this field will be populated.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationError {
    /// [Output Only] The array of errors encountered while processing this operation.
    
    pub errors: Option<Vec<OperationErrorErrors>>,
}

impl client::NestedType for OperationError {}
impl client::Part for OperationError {}


/// [Output Only] The array of errors encountered while processing this operation.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationErrorErrors {
    /// [Output Only] The error type identifier for this error.
    
    pub code: Option<String>,
    /// [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
    #[serde(rename="errorDetails")]
    
    pub error_details: Option<Vec<OperationErrorErrorsErrorDetails>>,
    /// [Output Only] Indicates the field in the request that caused the error. This property is optional.
    
    pub location: Option<String>,
    /// [Output Only] An optional, human-readable error message.
    
    pub message: Option<String>,
}

impl client::NestedType for OperationErrorErrors {}
impl client::Part for OperationErrorErrors {}


/// [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationErrorErrorsErrorDetails {
    /// no description provided
    #[serde(rename="errorInfo")]
    
    pub error_info: Option<ErrorInfo>,
    /// no description provided
    
    pub help: Option<Help>,
    /// no description provided
    #[serde(rename="localizedMessage")]
    
    pub localized_message: Option<LocalizedMessage>,
    /// no description provided
    #[serde(rename="quotaInfo")]
    
    pub quota_info: Option<QuotaExceededInfo>,
}

impl client::NestedType for OperationErrorErrorsErrorDetails {}
impl client::Part for OperationErrorErrorsErrorDetails {}


/// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationWarnings {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<OperationWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<OperationWarningsData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for OperationWarnings {}
impl client::Part for OperationWarnings {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationWarningsData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for OperationWarningsData {}
impl client::Part for OperationWarningsData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<OperationAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<OperationAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for OperationAggregatedListWarning {}
impl client::Part for OperationAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for OperationAggregatedListWarningData {}
impl client::Part for OperationAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<OperationListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<OperationListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for OperationListWarning {}
impl client::Part for OperationListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for OperationListWarningData {}
impl client::Part for OperationListWarningData {}


/// [Output Only] Informational warning which replaces the list of operations when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<OperationsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<OperationsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for OperationsScopedListWarning {}
impl client::Part for OperationsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct OperationsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for OperationsScopedListWarningData {}
impl client::Part for OperationsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PacketMirroringAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PacketMirroringAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PacketMirroringAggregatedListWarning {}
impl client::Part for PacketMirroringAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PacketMirroringAggregatedListWarningData {}
impl client::Part for PacketMirroringAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PacketMirroringListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PacketMirroringListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PacketMirroringListWarning {}
impl client::Part for PacketMirroringListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PacketMirroringListWarningData {}
impl client::Part for PacketMirroringListWarningData {}


/// Informational warning which replaces the list of packetMirrorings when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PacketMirroringsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PacketMirroringsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PacketMirroringsScopedListWarning {}
impl client::Part for PacketMirroringsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PacketMirroringsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PacketMirroringsScopedListWarningData {}
impl client::Part for PacketMirroringsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicAdvertisedPrefixListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PublicAdvertisedPrefixListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PublicAdvertisedPrefixListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PublicAdvertisedPrefixListWarning {}
impl client::Part for PublicAdvertisedPrefixListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicAdvertisedPrefixListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PublicAdvertisedPrefixListWarningData {}
impl client::Part for PublicAdvertisedPrefixListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PublicDelegatedPrefixAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PublicDelegatedPrefixAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PublicDelegatedPrefixAggregatedListWarning {}
impl client::Part for PublicDelegatedPrefixAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PublicDelegatedPrefixAggregatedListWarningData {}
impl client::Part for PublicDelegatedPrefixAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PublicDelegatedPrefixListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PublicDelegatedPrefixListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PublicDelegatedPrefixListWarning {}
impl client::Part for PublicDelegatedPrefixListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PublicDelegatedPrefixListWarningData {}
impl client::Part for PublicDelegatedPrefixListWarningData {}


/// [Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<PublicDelegatedPrefixesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<PublicDelegatedPrefixesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for PublicDelegatedPrefixesScopedListWarning {}
impl client::Part for PublicDelegatedPrefixesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct PublicDelegatedPrefixesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for PublicDelegatedPrefixesScopedListWarningData {}
impl client::Part for PublicDelegatedPrefixesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionAutoscalerListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionAutoscalerListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionAutoscalerListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionAutoscalerListWarning {}
impl client::Part for RegionAutoscalerListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionAutoscalerListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionAutoscalerListWarningData {}
impl client::Part for RegionAutoscalerListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionDiskTypeListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionDiskTypeListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionDiskTypeListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionDiskTypeListWarning {}
impl client::Part for RegionDiskTypeListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionDiskTypeListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionDiskTypeListWarningData {}
impl client::Part for RegionDiskTypeListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionInstanceGroupListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionInstanceGroupListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionInstanceGroupListWarning {}
impl client::Part for RegionInstanceGroupListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionInstanceGroupListWarningData {}
impl client::Part for RegionInstanceGroupListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagerListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionInstanceGroupManagerListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionInstanceGroupManagerListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionInstanceGroupManagerListWarning {}
impl client::Part for RegionInstanceGroupManagerListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagerListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionInstanceGroupManagerListWarningData {}
impl client::Part for RegionInstanceGroupManagerListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersListInstanceConfigsRespWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionInstanceGroupManagersListInstanceConfigsRespWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionInstanceGroupManagersListInstanceConfigsRespWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionInstanceGroupManagersListInstanceConfigsRespWarning {}
impl client::Part for RegionInstanceGroupManagersListInstanceConfigsRespWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupManagersListInstanceConfigsRespWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionInstanceGroupManagersListInstanceConfigsRespWarningData {}
impl client::Part for RegionInstanceGroupManagersListInstanceConfigsRespWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupsListInstancesWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionInstanceGroupsListInstancesWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionInstanceGroupsListInstancesWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionInstanceGroupsListInstancesWarning {}
impl client::Part for RegionInstanceGroupsListInstancesWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionInstanceGroupsListInstancesWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionInstanceGroupsListInstancesWarningData {}
impl client::Part for RegionInstanceGroupsListInstancesWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RegionListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RegionListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RegionListWarning {}
impl client::Part for RegionListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RegionListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RegionListWarningData {}
impl client::Part for RegionListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ReservationAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ReservationAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ReservationAggregatedListWarning {}
impl client::Part for ReservationAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ReservationAggregatedListWarningData {}
impl client::Part for ReservationAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ReservationListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ReservationListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ReservationListWarning {}
impl client::Part for ReservationListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ReservationListWarningData {}
impl client::Part for ReservationListWarningData {}


/// Informational warning which replaces the list of reservations when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ReservationsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ReservationsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ReservationsScopedListWarning {}
impl client::Part for ReservationsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ReservationsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ReservationsScopedListWarningData {}
impl client::Part for ReservationsScopedListWarningData {}


/// Informational warning which replaces the list of resourcePolicies when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePoliciesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ResourcePoliciesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ResourcePoliciesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ResourcePoliciesScopedListWarning {}
impl client::Part for ResourcePoliciesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePoliciesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ResourcePoliciesScopedListWarningData {}
impl client::Part for ResourcePoliciesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ResourcePolicyAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ResourcePolicyAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ResourcePolicyAggregatedListWarning {}
impl client::Part for ResourcePolicyAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ResourcePolicyAggregatedListWarningData {}
impl client::Part for ResourcePolicyAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ResourcePolicyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ResourcePolicyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ResourcePolicyListWarning {}
impl client::Part for ResourcePolicyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ResourcePolicyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ResourcePolicyListWarningData {}
impl client::Part for ResourcePolicyListWarningData {}


/// [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouteWarnings {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RouteWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RouteWarningsData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RouteWarnings {}
impl client::Part for RouteWarnings {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouteWarningsData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RouteWarningsData {}
impl client::Part for RouteWarningsData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouteListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RouteListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RouteListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RouteListWarning {}
impl client::Part for RouteListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouteListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RouteListWarningData {}
impl client::Part for RouteListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RouterAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RouterAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RouterAggregatedListWarning {}
impl client::Part for RouterAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RouterAggregatedListWarningData {}
impl client::Part for RouterAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RouterListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RouterListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RouterListWarning {}
impl client::Part for RouterListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RouterListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RouterListWarningData {}
impl client::Part for RouterListWarningData {}


/// Informational warning which replaces the list of routers when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RoutersScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<RoutersScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<RoutersScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for RoutersScopedListWarning {}
impl client::Part for RoutersScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct RoutersScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for RoutersScopedListWarningData {}
impl client::Part for RoutersScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SecurityPoliciesAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SecurityPoliciesAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SecurityPoliciesAggregatedListWarning {}
impl client::Part for SecurityPoliciesAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SecurityPoliciesAggregatedListWarningData {}
impl client::Part for SecurityPoliciesAggregatedListWarningData {}


/// Informational warning which replaces the list of security policies when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SecurityPoliciesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SecurityPoliciesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SecurityPoliciesScopedListWarning {}
impl client::Part for SecurityPoliciesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPoliciesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SecurityPoliciesScopedListWarningData {}
impl client::Part for SecurityPoliciesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SecurityPolicyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SecurityPolicyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SecurityPolicyListWarning {}
impl client::Part for SecurityPolicyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SecurityPolicyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SecurityPolicyListWarningData {}
impl client::Part for SecurityPolicyListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ServiceAttachmentAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ServiceAttachmentAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ServiceAttachmentAggregatedListWarning {}
impl client::Part for ServiceAttachmentAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ServiceAttachmentAggregatedListWarningData {}
impl client::Part for ServiceAttachmentAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ServiceAttachmentListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ServiceAttachmentListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ServiceAttachmentListWarning {}
impl client::Part for ServiceAttachmentListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ServiceAttachmentListWarningData {}
impl client::Part for ServiceAttachmentListWarningData {}


/// Informational warning which replaces the list of service attachments when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ServiceAttachmentsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ServiceAttachmentsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ServiceAttachmentsScopedListWarning {}
impl client::Part for ServiceAttachmentsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ServiceAttachmentsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ServiceAttachmentsScopedListWarningData {}
impl client::Part for ServiceAttachmentsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SnapshotListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SnapshotListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SnapshotListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SnapshotListWarning {}
impl client::Part for SnapshotListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SnapshotListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SnapshotListWarningData {}
impl client::Part for SnapshotListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslCertificateAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslCertificateAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslCertificateAggregatedListWarning {}
impl client::Part for SslCertificateAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslCertificateAggregatedListWarningData {}
impl client::Part for SslCertificateAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslCertificateListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslCertificateListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslCertificateListWarning {}
impl client::Part for SslCertificateListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificateListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslCertificateListWarningData {}
impl client::Part for SslCertificateListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificatesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslCertificatesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslCertificatesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslCertificatesScopedListWarning {}
impl client::Part for SslCertificatesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslCertificatesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslCertificatesScopedListWarningData {}
impl client::Part for SslCertificatesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslPoliciesAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslPoliciesAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslPoliciesAggregatedListWarning {}
impl client::Part for SslPoliciesAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslPoliciesAggregatedListWarningData {}
impl client::Part for SslPoliciesAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslPoliciesListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslPoliciesListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslPoliciesListWarning {}
impl client::Part for SslPoliciesListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslPoliciesListWarningData {}
impl client::Part for SslPoliciesListWarningData {}


/// Informational warning which replaces the list of SSL policies when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslPoliciesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslPoliciesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslPoliciesScopedListWarning {}
impl client::Part for SslPoliciesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPoliciesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslPoliciesScopedListWarningData {}
impl client::Part for SslPoliciesScopedListWarningData {}


/// [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPolicyWarnings {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SslPolicyWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SslPolicyWarningsData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SslPolicyWarnings {}
impl client::Part for SslPolicyWarnings {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SslPolicyWarningsData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SslPolicyWarningsData {}
impl client::Part for SslPolicyWarningsData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SubnetworkAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SubnetworkAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SubnetworkAggregatedListWarning {}
impl client::Part for SubnetworkAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SubnetworkAggregatedListWarningData {}
impl client::Part for SubnetworkAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SubnetworkListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SubnetworkListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SubnetworkListWarning {}
impl client::Part for SubnetworkListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworkListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SubnetworkListWarningData {}
impl client::Part for SubnetworkListWarningData {}


/// An informational warning that appears when the list of addresses is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworksScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<SubnetworksScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<SubnetworksScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for SubnetworksScopedListWarning {}
impl client::Part for SubnetworksScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct SubnetworksScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for SubnetworksScopedListWarningData {}
impl client::Part for SubnetworksScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetGrpcProxyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetGrpcProxyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetGrpcProxyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetGrpcProxyListWarning {}
impl client::Part for TargetGrpcProxyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetGrpcProxyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetGrpcProxyListWarningData {}
impl client::Part for TargetGrpcProxyListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxiesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetHttpProxiesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetHttpProxiesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetHttpProxiesScopedListWarning {}
impl client::Part for TargetHttpProxiesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxiesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetHttpProxiesScopedListWarningData {}
impl client::Part for TargetHttpProxiesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetHttpProxyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetHttpProxyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetHttpProxyListWarning {}
impl client::Part for TargetHttpProxyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpProxyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetHttpProxyListWarningData {}
impl client::Part for TargetHttpProxyListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxiesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetHttpsProxiesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetHttpsProxiesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetHttpsProxiesScopedListWarning {}
impl client::Part for TargetHttpsProxiesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxiesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetHttpsProxiesScopedListWarningData {}
impl client::Part for TargetHttpsProxiesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxyAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetHttpsProxyAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetHttpsProxyAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetHttpsProxyAggregatedListWarning {}
impl client::Part for TargetHttpsProxyAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxyAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetHttpsProxyAggregatedListWarningData {}
impl client::Part for TargetHttpsProxyAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetHttpsProxyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetHttpsProxyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetHttpsProxyListWarning {}
impl client::Part for TargetHttpsProxyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetHttpsProxyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetHttpsProxyListWarningData {}
impl client::Part for TargetHttpsProxyListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstanceAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetInstanceAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetInstanceAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetInstanceAggregatedListWarning {}
impl client::Part for TargetInstanceAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstanceAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetInstanceAggregatedListWarningData {}
impl client::Part for TargetInstanceAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstanceListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetInstanceListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetInstanceListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetInstanceListWarning {}
impl client::Part for TargetInstanceListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstanceListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetInstanceListWarningData {}
impl client::Part for TargetInstanceListWarningData {}


/// Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstancesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetInstancesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetInstancesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetInstancesScopedListWarning {}
impl client::Part for TargetInstancesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetInstancesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetInstancesScopedListWarningData {}
impl client::Part for TargetInstancesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetPoolAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetPoolAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetPoolAggregatedListWarning {}
impl client::Part for TargetPoolAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetPoolAggregatedListWarningData {}
impl client::Part for TargetPoolAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetPoolListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetPoolListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetPoolListWarning {}
impl client::Part for TargetPoolListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetPoolListWarningData {}
impl client::Part for TargetPoolListWarningData {}


/// Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetPoolsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetPoolsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetPoolsScopedListWarning {}
impl client::Part for TargetPoolsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetPoolsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetPoolsScopedListWarningData {}
impl client::Part for TargetPoolsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetSslProxyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetSslProxyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetSslProxyListWarning {}
impl client::Part for TargetSslProxyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetSslProxyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetSslProxyListWarningData {}
impl client::Part for TargetSslProxyListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxiesScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetTcpProxiesScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetTcpProxiesScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetTcpProxiesScopedListWarning {}
impl client::Part for TargetTcpProxiesScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxiesScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetTcpProxiesScopedListWarningData {}
impl client::Part for TargetTcpProxiesScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxyAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetTcpProxyAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetTcpProxyAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetTcpProxyAggregatedListWarning {}
impl client::Part for TargetTcpProxyAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxyAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetTcpProxyAggregatedListWarningData {}
impl client::Part for TargetTcpProxyAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxyListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetTcpProxyListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetTcpProxyListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetTcpProxyListWarning {}
impl client::Part for TargetTcpProxyListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetTcpProxyListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetTcpProxyListWarningData {}
impl client::Part for TargetTcpProxyListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewayAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetVpnGatewayAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetVpnGatewayAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetVpnGatewayAggregatedListWarning {}
impl client::Part for TargetVpnGatewayAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewayAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetVpnGatewayAggregatedListWarningData {}
impl client::Part for TargetVpnGatewayAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewayListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetVpnGatewayListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetVpnGatewayListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetVpnGatewayListWarning {}
impl client::Part for TargetVpnGatewayListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewayListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetVpnGatewayListWarningData {}
impl client::Part for TargetVpnGatewayListWarningData {}


/// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewaysScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<TargetVpnGatewaysScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<TargetVpnGatewaysScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for TargetVpnGatewaysScopedListWarning {}
impl client::Part for TargetVpnGatewaysScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct TargetVpnGatewaysScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for TargetVpnGatewaysScopedListWarningData {}
impl client::Part for TargetVpnGatewaysScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<UrlMapListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<UrlMapListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for UrlMapListWarning {}
impl client::Part for UrlMapListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for UrlMapListWarningData {}
impl client::Part for UrlMapListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<UrlMapsAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<UrlMapsAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for UrlMapsAggregatedListWarning {}
impl client::Part for UrlMapsAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for UrlMapsAggregatedListWarningData {}
impl client::Part for UrlMapsAggregatedListWarningData {}


/// Informational warning which replaces the list of backend services when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<UrlMapsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<UrlMapsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for UrlMapsScopedListWarning {}
impl client::Part for UrlMapsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UrlMapsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for UrlMapsScopedListWarningData {}
impl client::Part for UrlMapsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UsableSubnetworksAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<UsableSubnetworksAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<UsableSubnetworksAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for UsableSubnetworksAggregatedListWarning {}
impl client::Part for UsableSubnetworksAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct UsableSubnetworksAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for UsableSubnetworksAggregatedListWarningData {}
impl client::Part for UsableSubnetworksAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VmEndpointNatMappingsListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VmEndpointNatMappingsListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VmEndpointNatMappingsListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VmEndpointNatMappingsListWarning {}
impl client::Part for VmEndpointNatMappingsListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VmEndpointNatMappingsListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VmEndpointNatMappingsListWarningData {}
impl client::Part for VmEndpointNatMappingsListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VpnGatewayAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VpnGatewayAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VpnGatewayAggregatedListWarning {}
impl client::Part for VpnGatewayAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VpnGatewayAggregatedListWarningData {}
impl client::Part for VpnGatewayAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VpnGatewayListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VpnGatewayListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VpnGatewayListWarning {}
impl client::Part for VpnGatewayListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewayListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VpnGatewayListWarningData {}
impl client::Part for VpnGatewayListWarningData {}


/// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewaysScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VpnGatewaysScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VpnGatewaysScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VpnGatewaysScopedListWarning {}
impl client::Part for VpnGatewaysScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnGatewaysScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VpnGatewaysScopedListWarningData {}
impl client::Part for VpnGatewaysScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelAggregatedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VpnTunnelAggregatedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VpnTunnelAggregatedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VpnTunnelAggregatedListWarning {}
impl client::Part for VpnTunnelAggregatedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelAggregatedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VpnTunnelAggregatedListWarningData {}
impl client::Part for VpnTunnelAggregatedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VpnTunnelListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VpnTunnelListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VpnTunnelListWarning {}
impl client::Part for VpnTunnelListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VpnTunnelListWarningData {}
impl client::Part for VpnTunnelListWarningData {}


/// Informational warning which replaces the list of addresses when the list is empty.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelsScopedListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<VpnTunnelsScopedListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<VpnTunnelsScopedListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for VpnTunnelsScopedListWarning {}
impl client::Part for VpnTunnelsScopedListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct VpnTunnelsScopedListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for VpnTunnelsScopedListWarningData {}
impl client::Part for VpnTunnelsScopedListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct XpnHostListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<XpnHostListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<XpnHostListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for XpnHostListWarning {}
impl client::Part for XpnHostListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct XpnHostListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for XpnHostListWarningData {}
impl client::Part for XpnHostListWarningData {}


/// [Output Only] Informational warning message.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ZoneListWarning {
    /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    
    pub code: Option<ZoneListWarningCodeEnum>,
    /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
    
    pub data: Option<Vec<ZoneListWarningData>>,
    /// [Output Only] A human-readable description of the warning code.
    
    pub message: Option<String>,
}

impl client::NestedType for ZoneListWarning {}
impl client::Part for ZoneListWarning {}


/// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct ZoneListWarningData {
    /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    
    pub key: Option<String>,
    /// [Output Only] A warning data value corresponding to the key.
    
    pub value: Option<String>,
}

impl client::NestedType for ZoneListWarningData {}
impl client::Part for ZoneListWarningData {}


