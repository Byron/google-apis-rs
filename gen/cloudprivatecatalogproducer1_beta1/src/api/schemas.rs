use super::*;
/// An association tuple that pairs a `Catalog` to a resource
/// that can use the `Catalog`. After association, a
/// google.cloud.privatecatalog.v1beta1.Catalog becomes available to
/// consumers under specified Association.resource and all of its child
/// nodes.
/// Users who have the `cloudprivatecatalog.targets.get` permission on any of
/// the resource nodes can access the catalog and child products under the node.
/// 
/// For example, suppose the cloud resource hierarchy is as follows:
/// 
/// * organizations/example.com
///   * folders/team
///     * projects/test
/// 
/// After creating an association with `organizations/example.com`, the catalog
/// `catalogs/1`  is accessible from the following paths:
/// 
/// * organizations/example.com
/// * folders/team
/// * projects/test
/// 
/// Users can access them by
/// google.cloud.v1beta1.PrivateCatalog.SearchCatalogs action.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [associations create catalogs](CatalogAssociationCreateCall) (response)
/// * [associations get catalogs](CatalogAssociationGetCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1Association {
    /// The creation time of the association.
    #[serde(rename="createTime")]
    
    pub create_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
    /// Output only. The resource name of the catalog association, in the format
    /// `catalogs/{catalog_id}/associations/{association_id}'.
    /// 
    /// A unique identifier for the catalog association, which is
    /// generated by catalog service.
    
    pub name: Option<String>,
    /// Required. The user-supplied fully qualified name of the `Resource`
    /// associated to the `Catalog`. It supports `Organization`, `Folder`,
    /// and `Project`. Values are of the form
    /// 
    /// * `//cloudresourcemanager.googleapis.com/projects/{product_number}`
    /// * `//cloudresourcemanager.googleapis.com/folders/{folder_id}`
    /// * `//cloudresourcemanager.googleapis.com/organizations/{organization_id}`
    
    pub resource: Option<String>,
}

impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1Association {}


/// The producer representation of a catalog which is a curated collection of
/// solutions that can be managed, controlled, and shared by cloud admins.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [create catalogs](CatalogCreateCall) (request)
/// * [delete catalogs](CatalogDeleteCall) (response)
/// * [get catalogs](CatalogGetCall) (response)
/// * [patch catalogs](CatalogPatchCall) (request|response)
/// * [undelete catalogs](CatalogUndeleteCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1Catalog {
    /// Output only. The time when the catalog was created.
    #[serde(rename="createTime")]
    
    pub create_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
    /// Required. The user-supplied description of the catalog. Maximum of 512
    /// characters.
    
    pub description: Option<String>,
    /// Required. The user-supplied descriptive name of the catalog as it appears
    /// in UIs. Maximum 256 characters in length.
    #[serde(rename="displayName")]
    
    pub display_name: Option<String>,
    /// Output only. The resource name of the catalog, in the format
    /// `catalogs/{catalog_id}'.
    /// 
    /// A unique identifier for the catalog, which is generated
    /// by catalog service.
    
    pub name: Option<String>,
    /// Required. The parent resource name of the catalog, which can't be changed
    /// after a catalog is created. It can only be an organization. Values are of
    /// the form `//cloudresourcemanager.googleapis.com/organizations/<id>`.
    /// Maximum 256 characters in length.
    
    pub parent: Option<String>,
    /// Output only. The time when the catalog was last updated.
    #[serde(rename="updateTime")]
    
    pub update_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
}

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1Catalog {}
impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1Catalog {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products copy catalogs](CatalogProductCopyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest {
    /// The resource name of the destination product that is copied to.
    #[serde(rename="destinationProductName")]
    
    pub destination_product_name: Option<String>,
}

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [associations create catalogs](CatalogAssociationCreateCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest {
    /// The user-supplied `Association` that is going to be created.
    /// 
    /// If the `resource` field is set, the
    /// `privatecatalogproducer.catalogTargets.associate` permission is checked on
    /// the target resource.
    
    pub association: Option<GoogleCloudPrivatecatalogproducerV1beta1Association>,
}

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [associations list catalogs](CatalogAssociationListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse {
    /// The returned `Association` resources from the list call.
    
    pub associations: Option<Vec<GoogleCloudPrivatecatalogproducerV1beta1Association>>,
    /// A pagination token returned from a previous call to
    /// `ListAssociations` that indicates where the listing should continue from.
    /// This field is optional.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
}

impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list catalogs](CatalogListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse {
    /// The `Catalogs` returned from the list call.
    
    pub catalogs: Option<Vec<GoogleCloudPrivatecatalogproducerV1beta1Catalog>>,
    /// A pagination token returned from a previous call to ListCatalogs
    /// that indicates where the listing should continue from.
    /// This field is optional.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
}

impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products list catalogs](CatalogProductListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse {
    /// A pagination token returned from a previous call to ListProducts
    /// that indicates where the listing should continue from.
    /// This field is optional.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// The `Product` returned from the list call.
    
    pub products: Option<Vec<GoogleCloudPrivatecatalogproducerV1beta1Product>>,
}

impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products versions list catalogs](CatalogProductVersionListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse {
    /// A pagination token returned from a previous call to ListProducts
    /// that indicates where the listing should continue from.
    /// This field is optional.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// The `VersiVersionon` returned from the list call.
    
    pub versions: Option<Vec<GoogleCloudPrivatecatalogproducerV1beta1Version>>,
}

impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse {}


/// The producer representation of a product which is a child resource of
/// `Catalog` with display metadata and a list of `Version` resources.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products create catalogs](CatalogProductCreateCall) (request|response)
/// * [products get catalogs](CatalogProductGetCall) (response)
/// * [products patch catalogs](CatalogProductPatchCall) (request|response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1Product {
    /// Required. The type of the product asset, which cannot be changed after the
    /// product is created. It supports the values
    /// `google.deploymentmanager.Template` and
    /// `google.cloudprivatecatalog.ListingOnly`. Other values will be
    /// rejected by the server. Read only after creation.
    /// 
    /// The following fields or resource types have different validation rules
    /// under each `asset_type` values:
    /// 
    /// * Product.display_metadata has different validation schema for each
    /// asset type value. See its comment for details.
    /// * Version resource isn't allowed to be added under the
    /// `google.cloudprivatecatalog.ListingOnly` type.
    #[serde(rename="assetType")]
    
    pub asset_type: Option<String>,
    /// Output only. The time when the product was created.
    #[serde(rename="createTime")]
    
    pub create_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
    /// The user-supplied display metadata to describe the product.
    /// The JSON schema of the metadata differs by Product.asset_type.
    /// When the type is `google.deploymentmanager.Template`, the schema is as
    /// follows:
    /// 
    /// ````
    /// "$schema": http://json-schema.org/draft-04/schema#
    /// type: object
    /// properties:
    ///   name:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 64
    ///   description:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 2048
    ///   tagline:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 100
    ///   support_info:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 2048
    ///   creator:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 100
    ///   documentation:
    ///     type: array
    ///     items:
    ///       type: object
    ///       properties:
    ///         url:
    ///           type: string
    ///           pattern:
    ///           "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
    ///         title:
    ///           type: string
    ///           minLength: 1
    ///           maxLength: 64
    ///         description:
    ///           type: string
    ///           minLength: 1
    ///           maxLength: 2048
    /// required:
    /// - name
    /// - description
    /// additionalProperties: false
    /// 
    /// ````
    /// 
    /// When the asset type is `google.cloudprivatecatalog.ListingOnly`, the schema
    /// is as follows:
    /// 
    /// ````
    /// "$schema": http://json-schema.org/draft-04/schema#
    /// type: object
    /// properties:
    ///   name:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 64
    ///   description:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 2048
    ///   tagline:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 100
    ///   support_info:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 2048
    ///   creator:
    ///     type: string
    ///     minLength: 1
    ///     maxLength: 100
    ///   documentation:
    ///     type: array
    ///     items:
    ///       type: object
    ///       properties:
    ///         url:
    ///           type: string
    ///           pattern:
    ///           "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
    ///         title:
    ///           type: string
    ///           minLength: 1
    ///           maxLength: 64
    ///         description:
    ///           type: string
    ///           minLength: 1
    ///           maxLength: 2048
    ///   signup_url:
    ///     type: string
    ///     pattern:
    ///     "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
    /// required:
    /// - name
    /// - description
    /// - signup_url
    /// additionalProperties: false
    /// ````
    #[serde(rename="displayMetadata")]
    
    pub display_metadata: Option<HashMap<String, json::Value>>,
    /// Output only. The public accessible URI of the icon uploaded by
    /// PrivateCatalogProducer.UploadIcon.
    /// 
    /// If no icon is uploaded, it will be the default icon's URI.
    #[serde(rename="iconUri")]
    
    pub icon_uri: Option<String>,
    /// Required. The resource name of the product in the format
    /// `catalogs/{catalog_id}/products/a-z*[a-z0-9]'.
    /// 
    /// A unique identifier for the product under a catalog, which cannot
    /// be changed after the product is created. The final
    /// segment of the name must between 1 and 256 characters in length.
    
    pub name: Option<String>,
    /// Output only. The time when the product was last updated.
    #[serde(rename="updateTime")]
    
    pub update_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
}

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1Product {}
impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1Product {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [undelete catalogs](CatalogUndeleteCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequest { _never_set: Option<bool> }

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1UndeleteCatalogRequest {}


/// There is no detailed description.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products icons upload catalogs](CatalogProductIconUploadCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest {
    /// The raw icon bytes user-supplied to be uploaded to the product. The format
    /// of the icon can only be PNG or JPEG. The minimum allowed dimensions are
    /// 130x130 pixels and the maximum dimensions are 10000x10000 pixels.
    /// Required.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub icon: Option<Vec<u8>>,
}

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest {}


/// The producer representation of a version, which is a child resource under a
/// `Product` with asset data.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products versions create catalogs](CatalogProductVersionCreateCall) (request)
/// * [products versions get catalogs](CatalogProductVersionGetCall) (response)
/// * [products versions patch catalogs](CatalogProductVersionPatchCall) (request|response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleCloudPrivatecatalogproducerV1beta1Version {
    /// Output only. The asset which has been validated and is ready to be
    /// provisioned. See Version.original_asset for the schema.
    
    pub asset: Option<HashMap<String, json::Value>>,
    /// Output only. The time when the version was created.
    #[serde(rename="createTime")]
    
    pub create_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
    /// The user-supplied description of the version. Maximum of 256 characters.
    
    pub description: Option<String>,
    /// Required. The resource name of the version, in the format
    /// `catalogs/{catalog_id}/products/{product_id}/versions/a-z*[a-z0-9]'.
    /// 
    /// A unique identifier for the version under a product, which can't
    /// be changed after the version is created. The final segment of the name must
    /// between 1 and 63 characters in length.
    
    pub name: Option<String>,
    /// The user-supplied asset payload. The maximum size of the payload is 2MB.
    /// The JSON schema of the payload is defined as:
    /// 
    /// ````
    /// type: object
    /// properties:
    ///   mainTemplate:
    ///     type: string
    ///     description: The file name of the main template and name prefix of
    ///     schema file. The content of the main template should be set in the
    ///     imports list. The schema file name is expected to be
    ///     <mainTemplate>.schema in the imports list. required: true
    ///   imports:
    ///     type: array
    ///     description: Import template and schema file contents. Required to have
    ///     both <mainTemplate> and <mainTemplate>.schema files. required: true
    ///     minItems: 2
    ///     items:
    ///       type: object
    ///       properties:
    ///         name:
    ///           type: string
    ///         content:
    ///           type: string
    /// ````
    #[serde(rename="originalAsset")]
    
    pub original_asset: Option<HashMap<String, json::Value>>,
    /// Output only. The time when the version was last updated.
    #[serde(rename="updateTime")]
    
    pub update_time: Option<client::chrono::DateTime<client::chrono::offset::Utc>>,
}

impl client::RequestValue for GoogleCloudPrivatecatalogproducerV1beta1Version {}
impl client::ResponseResult for GoogleCloudPrivatecatalogproducerV1beta1Version {}


/// Specifies the audit configuration for a service.
/// The configuration determines which permission types are logged, and what
/// identities, if any, are exempted from logging.
/// An AuditConfig must have one or more AuditLogConfigs.
/// 
/// If there are AuditConfigs for both `allServices` and a specific service,
/// the union of the two AuditConfigs is used for that service: the log_types
/// specified in each AuditConfig are enabled, and the exempted_members in each
/// AuditLogConfig are exempted.
/// 
/// Example Policy with multiple AuditConfigs:
/// 
/// ````text
/// {
///   "audit_configs": [
///     {
///       "service": "allServices"
///       "audit_log_configs": [
///         {
///           "log_type": "DATA_READ",
///           "exempted_members": [
///             "user:jose@example.com"
///           ]
///         },
///         {
///           "log_type": "DATA_WRITE",
///         },
///         {
///           "log_type": "ADMIN_READ",
///         }
///       ]
///     },
///     {
///       "service": "sampleservice.googleapis.com"
///       "audit_log_configs": [
///         {
///           "log_type": "DATA_READ",
///         },
///         {
///           "log_type": "DATA_WRITE",
///           "exempted_members": [
///             "user:aliya@example.com"
///           ]
///         }
///       ]
///     }
///   ]
/// }
/// ````
/// 
/// For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
/// logging. It also exempts jose@example.com from DATA_READ logging, and
/// aliya@example.com from DATA_WRITE logging.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1AuditConfig {
    /// The configuration for logging of each type of permission.
    #[serde(rename="auditLogConfigs")]
    
    pub audit_log_configs: Option<Vec<GoogleIamV1AuditLogConfig>>,
    /// Specifies a service that will be enabled for audit logging.
    /// For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
    /// `allServices` is a special value that covers all services.
    
    pub service: Option<String>,
}

impl client::Part for GoogleIamV1AuditConfig {}


/// Provides the configuration for logging a type of permissions.
/// Example:
/// 
/// ````text
/// {
///   "audit_log_configs": [
///     {
///       "log_type": "DATA_READ",
///       "exempted_members": [
///         "user:jose@example.com"
///       ]
///     },
///     {
///       "log_type": "DATA_WRITE",
///     }
///   ]
/// }
/// ````
/// 
/// This enables ‘DATA_READ’ and ‘DATA_WRITE’ logging, while exempting
/// jose@example.com from DATA_READ logging.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1AuditLogConfig {
    /// Specifies the identities that do not cause logging for this type of
    /// permission.
    /// Follows the same format of Binding.members.
    #[serde(rename="exemptedMembers")]
    
    pub exempted_members: Option<Vec<String>>,
    /// The log type that this config enables.
    #[serde(rename="logType")]
    
    pub log_type: Option<String>,
}

impl client::Part for GoogleIamV1AuditLogConfig {}


/// Associates `members` with a `role`.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1Binding {
    /// The condition that is associated with this binding.
    /// NOTE: An unsatisfied condition will not allow user access via current
    /// binding. Different bindings, including their conditions, are examined
    /// independently.
    
    pub condition: Option<GoogleTypeExpr>,
    /// Specifies the identities requesting access for a Cloud Platform resource.
    /// `members` can have the following values:
    /// 
    /// * `allUsers`: A special identifier that represents anyone who is
    ///    on the internet; with or without a Google account.
    /// 
    /// * `allAuthenticatedUsers`: A special identifier that represents anyone
    ///    who is authenticated with a Google account or a service account.
    /// 
    /// * `user:{emailid}`: An email address that represents a specific Google
    ///    account. For example, `alice@example.com` .
    /// 
    /// 
    /// * `serviceAccount:{emailid}`: An email address that represents a service
    ///    account. For example, `my-other-app@appspot.gserviceaccount.com`.
    /// 
    /// * `group:{emailid}`: An email address that represents a Google group.
    ///    For example, `admins@example.com`.
    /// 
    /// * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
    ///    identifier) representing a user that has been recently deleted. For
    ///    example, `alice@example.com?uid=123456789012345678901`. If the user is
    ///    recovered, this value reverts to `user:{emailid}` and the recovered user
    ///    retains the role in the binding.
    /// 
    /// * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
    ///    unique identifier) representing a service account that has been recently
    ///    deleted. For example,
    ///    `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
    ///    If the service account is undeleted, this value reverts to
    ///    `serviceAccount:{emailid}` and the undeleted service account retains the
    ///    role in the binding.
    /// 
    /// * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
    ///    identifier) representing a Google group that has been recently
    ///    deleted. For example, `admins@example.com?uid=123456789012345678901`. If
    ///    the group is recovered, this value reverts to `group:{emailid}` and the
    ///    recovered group retains the role in the binding.
    /// 
    /// 
    /// * `domain:{domain}`: The G Suite domain (primary) that represents all the
    ///    users of that domain. For example, `google.com` or `example.com`.
    /// 
    /// 
    
    pub members: Option<Vec<String>>,
    /// Role that is assigned to `members`.
    /// For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    
    pub role: Option<String>,
}

impl client::Part for GoogleIamV1Binding {}


/// An Identity and Access Management (IAM) policy, which specifies access
/// controls for Google Cloud resources.
/// 
/// A `Policy` is a collection of `bindings`. A `binding` binds one or more
/// `members` to a single `role`. Members can be user accounts, service accounts,
/// Google groups, and domains (such as G Suite). A `role` is a named list of
/// permissions; each `role` can be an IAM predefined role or a user-created
/// custom role.
/// 
/// Optionally, a `binding` can specify a `condition`, which is a logical
/// expression that allows access to a resource only if the expression evaluates
/// to `true`. A condition can add constraints based on attributes of the
/// request, the resource, or both.
/// 
/// **JSON example:**
/// 
/// ````text
/// {
///   "bindings": [
///     {
///       "role": "roles/resourcemanager.organizationAdmin",
///       "members": [
///         "user:mike@example.com",
///         "group:admins@example.com",
///         "domain:google.com",
///         "serviceAccount:my-project-id@appspot.gserviceaccount.com"
///       ]
///     },
///     {
///       "role": "roles/resourcemanager.organizationViewer",
///       "members": ["user:eve@example.com"],
///       "condition": {
///         "title": "expirable access",
///         "description": "Does not grant access after Sep 2020",
///         "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
///       }
///     }
///   ],
///   "etag": "BwWWja0YfJA=",
///   "version": 3
/// }
/// ````
/// 
/// **YAML example:**
/// 
/// ````text
/// bindings:
/// - members:
///   - user:mike@example.com
///   - group:admins@example.com
///   - domain:google.com
///   - serviceAccount:my-project-id@appspot.gserviceaccount.com
///   role: roles/resourcemanager.organizationAdmin
/// - members:
///   - user:eve@example.com
///   role: roles/resourcemanager.organizationViewer
///   condition:
///     title: expirable access
///     description: Does not grant access after Sep 2020
///     expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
/// - etag: BwWWja0YfJA=
/// - version: 3
/// ````
/// 
/// For a description of IAM and its features, see the
/// [IAM documentation](https://cloud.google.com/iam/docs/).
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [get iam policy catalogs](CatalogGetIamPolicyCall) (response)
/// * [set iam policy catalogs](CatalogSetIamPolicyCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1Policy {
    /// Specifies cloud audit logging configuration for this policy.
    #[serde(rename="auditConfigs")]
    
    pub audit_configs: Option<Vec<GoogleIamV1AuditConfig>>,
    /// Associates a list of `members` to a `role`. Optionally, may specify a
    /// `condition` that determines how and when the `bindings` are applied. Each
    /// of the `bindings` must contain at least one member.
    
    pub bindings: Option<Vec<GoogleIamV1Binding>>,
    /// `etag` is used for optimistic concurrency control as a way to help
    /// prevent simultaneous updates of a policy from overwriting each other.
    /// It is strongly suggested that systems make use of the `etag` in the
    /// read-modify-write cycle to perform policy updates in order to avoid race
    /// conditions: An `etag` is returned in the response to `getIamPolicy`, and
    /// systems are expected to put that etag in the request to `setIamPolicy` to
    /// ensure that their change will be applied to the same version of the policy.
    /// 
    /// **Important:** If you use IAM Conditions, you must include the `etag` field
    /// whenever you call `setIamPolicy`. If you omit this field, then IAM allows
    /// you to overwrite a version `3` policy with a version `1` policy, and all of
    /// the conditions in the version `3` policy are lost.
    
    #[serde_as(as = "Option<::client::serde::urlsafe_base64::Wrapper>")]
    pub etag: Option<Vec<u8>>,
    /// Specifies the format of the policy.
    /// 
    /// Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
    /// are rejected.
    /// 
    /// Any operation that affects conditional role bindings must specify version
    /// `3`. This requirement applies to the following operations:
    /// 
    /// * Getting a policy that includes a conditional role binding
    /// * Adding a conditional role binding to a policy
    /// * Changing a conditional role binding in a policy
    /// * Removing any role binding, with or without a condition, from a policy
    ///   that includes conditions
    /// 
    /// **Important:** If you use IAM Conditions, you must include the `etag` field
    /// whenever you call `setIamPolicy`. If you omit this field, then IAM allows
    /// you to overwrite a version `3` policy with a version `1` policy, and all of
    /// the conditions in the version `3` policy are lost.
    /// 
    /// If a policy does not include any conditions, operations on that policy may
    /// specify any valid version or leave the field unset.
    
    pub version: Option<i32>,
}

impl client::ResponseResult for GoogleIamV1Policy {}


/// Request message for `SetIamPolicy` method.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [set iam policy catalogs](CatalogSetIamPolicyCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1SetIamPolicyRequest {
    /// REQUIRED: The complete policy to be applied to the `resource`. The size of
    /// the policy is limited to a few 10s of KB. An empty policy is a
    /// valid policy but certain Cloud Platform services (such as Projects)
    /// might reject them.
    
    pub policy: Option<GoogleIamV1Policy>,
    /// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
    /// the fields in the mask will be modified. If no mask is provided, the
    /// following default mask is used:
    /// paths: "bindings, etag"
    /// This field is only used by Cloud IAM.
    #[serde(rename="updateMask")]
    
    pub update_mask: Option<client::FieldMask>,
}

impl client::RequestValue for GoogleIamV1SetIamPolicyRequest {}


/// Request message for `TestIamPermissions` method.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [test iam permissions catalogs](CatalogTestIamPermissionCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1TestIamPermissionsRequest {
    /// The set of permissions to check for the `resource`. Permissions with
    /// wildcards (such as '*' or 'storage.*') are not allowed. For more
    /// information see
    /// [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
    
    pub permissions: Option<Vec<String>>,
}

impl client::RequestValue for GoogleIamV1TestIamPermissionsRequest {}


/// Response message for `TestIamPermissions` method.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [test iam permissions catalogs](CatalogTestIamPermissionCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleIamV1TestIamPermissionsResponse {
    /// A subset of `TestPermissionsRequest.permissions` that the caller is
    /// allowed.
    
    pub permissions: Option<Vec<String>>,
}

impl client::ResponseResult for GoogleIamV1TestIamPermissionsResponse {}


/// The request message for Operations.CancelOperation.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [cancel operations](OperationCancelCall) (request)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleLongrunningCancelOperationRequest { _never_set: Option<bool> }

impl client::RequestValue for GoogleLongrunningCancelOperationRequest {}


/// The response message for Operations.ListOperations.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [list operations](OperationListCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleLongrunningListOperationsResponse {
    /// The standard List next-page token.
    #[serde(rename="nextPageToken")]
    
    pub next_page_token: Option<String>,
    /// A list of operations that matches the specified filter in the request.
    
    pub operations: Option<Vec<GoogleLongrunningOperation>>,
}

impl client::ResponseResult for GoogleLongrunningListOperationsResponse {}


/// This resource represents a long-running operation that is the result of a
/// network API call.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [products versions create catalogs](CatalogProductVersionCreateCall) (response)
/// * [products copy catalogs](CatalogProductCopyCall) (response)
/// * [create catalogs](CatalogCreateCall) (response)
/// * [get operations](OperationGetCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleLongrunningOperation {
    /// If the value is `false`, it means the operation is still in progress.
    /// If `true`, the operation is completed, and either `error` or `response` is
    /// available.
    
    pub done: Option<bool>,
    /// The error result of the operation in case of failure or cancellation.
    
    pub error: Option<GoogleRpcStatus>,
    /// Service-specific metadata associated with the operation.  It typically
    /// contains progress information and common metadata such as create time.
    /// Some services might not provide such metadata.  Any method that returns a
    /// long-running operation should document the metadata type, if any.
    
    pub metadata: Option<HashMap<String, json::Value>>,
    /// The server-assigned name, which is only unique within the same service that
    /// originally returns it. If you use the default HTTP mapping, the
    /// `name` should be a resource name ending with `operations/{unique_id}`.
    
    pub name: Option<String>,
    /// The normal response of the operation in case of success.  If the original
    /// method returns no data on success, such as `Delete`, the response is
    /// `google.protobuf.Empty`.  If the original method is standard
    /// `Get`/`Create`/`Update`, the response should be the resource.  For other
    /// methods, the response should have the type `XxxResponse`, where `Xxx`
    /// is the original method name.  For example, if the original method name
    /// is `TakeSnapshot()`, the inferred response type is
    /// `TakeSnapshotResponse`.
    
    pub response: Option<HashMap<String, json::Value>>,
}

impl client::ResponseResult for GoogleLongrunningOperation {}


/// A generic empty message that you can re-use to avoid defining duplicated
/// empty messages in your APIs. A typical example is to use it as the request
/// or the response type of an API method. For instance:
/// 
/// ````text
/// service Foo {
///   rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
/// }
/// ````
/// 
/// The JSON representation for `Empty` is empty JSON object `{}`.
/// 
/// # Activities
/// 
/// This type is used in activities, which are methods you may call on this type or where this type is involved in. 
/// The list links the activity name, along with information about where it is used (one of *request* and *response*).
/// 
/// * [associations delete catalogs](CatalogAssociationDeleteCall) (response)
/// * [products icons upload catalogs](CatalogProductIconUploadCall) (response)
/// * [products versions delete catalogs](CatalogProductVersionDeleteCall) (response)
/// * [products delete catalogs](CatalogProductDeleteCall) (response)
/// * [cancel operations](OperationCancelCall) (response)
/// * [delete operations](OperationDeleteCall) (response)
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleProtobufEmpty { _never_set: Option<bool> }

impl client::ResponseResult for GoogleProtobufEmpty {}


/// The `Status` type defines a logical error model that is suitable for
/// different programming environments, including REST APIs and RPC APIs. It is
/// used by [gRPC](https://github.com/grpc). Each `Status` message contains
/// three pieces of data: error code, error message, and error details.
/// 
/// You can find out more about this error model and how to work with it in the
/// [API Design Guide](https://cloud.google.com/apis/design/errors).
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
/// 
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleRpcStatus {
    /// The status code, which should be an enum value of google.rpc.Code.
    
    pub code: Option<i32>,
    /// A list of messages that carry the error details.  There is a common set of
    /// message types for APIs to use.
    
    pub details: Option<Vec<HashMap<String, json::Value>>>,
    /// A developer-facing error message, which should be in English. Any
    /// user-facing error message should be localized and sent in the
    /// google.rpc.Status.details field, or localized by the client.
    
    pub message: Option<String>,
}

impl client::Part for GoogleRpcStatus {}


/// Represents a textual expression in the Common Expression Language (CEL)
/// syntax. CEL is a C-like expression language. The syntax and semantics of CEL
/// are documented at https://github.com/google/cel-spec.
/// 
/// Example (Comparison):
/// 
/// ````text
/// title: "Summary size limit"
/// description: "Determines if a summary is less than 100 chars"
/// expression: "document.summary.size() < 100"
/// ````
/// 
/// Example (Equality):
/// 
/// ````text
/// title: "Requestor is owner"
/// description: "Determines if requestor is the document owner"
/// expression: "document.owner == request.auth.claims.email"
/// ````
/// 
/// Example (Logic):
/// 
/// ````text
/// title: "Public documents"
/// description: "Determine whether the document should be publicly visible"
/// expression: "document.type != 'private' && document.type != 'internal'"
/// ````
/// 
/// Example (Data Manipulation):
/// 
/// ````text
/// title: "Notification string"
/// description: "Create a notification string with a timestamp."
/// expression: "'New message received at ' + string(document.create_time)"
/// ````
/// 
/// The exact variables and functions that may be referenced within an expression
/// are determined by the service that evaluates it. See the service
/// documentation for additional information.
/// 
/// This type is not used in any activity, and only used as *part* of another schema.
#[serde_with::serde_as(crate = "::client::serde_with")]
#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct GoogleTypeExpr {
    /// Optional. Description of the expression. This is a longer text which
    /// describes the expression, e.g. when hovered over it in a UI.
    
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language
    /// syntax.
    
    pub expression: Option<String>,
    /// Optional. String indicating the location of the expression for error
    /// reporting, e.g. a file name and a position in the file.
    
    pub location: Option<String>,
    /// Optional. Title for the expression, i.e. a short string describing
    /// its purpose. This can be used e.g. in UIs which allow to enter the
    /// expression.
    
    pub title: Option<String>,
}

impl client::Part for GoogleTypeExpr {}


