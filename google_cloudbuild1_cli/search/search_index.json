{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The cloudbuild1 command-line interface (CLI) allows to use most features of the Google Cloud Build service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the Cloud Build API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-cloudbuild1-cli Find the source code on github . Usage This documentation was generated from the Cloud Build API at revision 20240223 . The CLI is at version 5.0.4 . cloudbuild1 [options] github-dot-com-webhook receive (-r <kv>)... [-p <v>]... [-o <out>] locations regional-webhook <location> (-r <kv>)... [-p <v>]... [-o <out>] methods webhook (-r <kv>)... [-p <v>]... [-o <out>] operations cancel <name> (-r <kv>)... [-p <v>]... [-o <out>] get <name> [-p <v>]... [-o <out>] projects builds-approve <name> (-r <kv>)... [-p <v>]... [-o <out>] builds-cancel <project-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] builds-create <project-id> (-r <kv>)... [-p <v>]... [-o <out>] builds-get <project-id> <id> [-p <v>]... [-o <out>] builds-list <project-id> [-p <v>]... [-o <out>] builds-retry <project-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] github-enterprise-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] github-enterprise-configs-delete <name> [-p <v>]... [-o <out>] github-enterprise-configs-get <name> [-p <v>]... [-o <out>] github-enterprise-configs-list <parent> [-p <v>]... [-o <out>] github-enterprise-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-connected-repositories-batch-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-delete <name> [-p <v>]... [-o <out>] locations-bitbucket-server-configs-get <name> [-p <v>]... [-o <out>] locations-bitbucket-server-configs-list <parent> [-p <v>]... [-o <out>] locations-bitbucket-server-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository <config> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-repos-list <parent> [-p <v>]... [-o <out>] locations-builds-approve <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-builds-cancel <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-builds-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-builds-get <name> [-p <v>]... [-o <out>] locations-builds-list <parent> [-p <v>]... [-o <out>] locations-builds-retry <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-get-default-service-account <name> [-p <v>]... [-o <out>] locations-git-lab-configs-connected-repositories-batch-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-delete <name> [-p <v>]... [-o <out>] locations-git-lab-configs-get <name> [-p <v>]... [-o <out>] locations-git-lab-configs-list <parent> [-p <v>]... [-o <out>] locations-git-lab-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-remove-git-lab-connected-repository <config> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-repos-list <parent> [-p <v>]... [-o <out>] locations-github-enterprise-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-github-enterprise-configs-delete <name> [-p <v>]... [-o <out>] locations-github-enterprise-configs-get <name> [-p <v>]... [-o <out>] locations-github-enterprise-configs-list <parent> [-p <v>]... [-o <out>] locations-github-enterprise-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-operations-cancel <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-operations-get <name> [-p <v>]... [-o <out>] locations-triggers-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-triggers-delete <name> [-p <v>]... [-o <out>] locations-triggers-get <name> [-p <v>]... [-o <out>] locations-triggers-list <parent> [-p <v>]... [-o <out>] locations-triggers-patch <resource-name> (-r <kv>)... [-p <v>]... [-o <out>] locations-triggers-run <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-triggers-webhook <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-worker-pools-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-worker-pools-delete <name> [-p <v>]... [-o <out>] locations-worker-pools-get <name> [-p <v>]... [-o <out>] locations-worker-pools-list <parent> [-p <v>]... [-o <out>] locations-worker-pools-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] triggers-create <project-id> (-r <kv>)... [-p <v>]... [-o <out>] triggers-delete <project-id> <trigger-id> [-p <v>]... [-o <out>] triggers-get <project-id> <trigger-id> [-p <v>]... [-o <out>] triggers-list <project-id> [-p <v>]... [-o <out>] triggers-patch <project-id> <trigger-id> (-r <kv>)... [-p <v>]... [-o <out>] triggers-run <project-id> <trigger-id> (-r <kv>)... [-p <v>]... [-o <out>] triggers-webhook <project-id> <trigger> (-r <kv>)... [-p <v>]... [-o <out>] cloudbuild1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with cloudbuild1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/cloudbuild1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/cloudbuild1-secret.json , assuming that the required cloudbuild API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. cloudbuild1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-cloudbuild1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the Cloud Build API at revision 20240223 . The CLI is at version 5.0.4 . cloudbuild1 [options] github-dot-com-webhook receive (-r <kv>)... [-p <v>]... [-o <out>] locations regional-webhook <location> (-r <kv>)... [-p <v>]... [-o <out>] methods webhook (-r <kv>)... [-p <v>]... [-o <out>] operations cancel <name> (-r <kv>)... [-p <v>]... [-o <out>] get <name> [-p <v>]... [-o <out>] projects builds-approve <name> (-r <kv>)... [-p <v>]... [-o <out>] builds-cancel <project-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] builds-create <project-id> (-r <kv>)... [-p <v>]... [-o <out>] builds-get <project-id> <id> [-p <v>]... [-o <out>] builds-list <project-id> [-p <v>]... [-o <out>] builds-retry <project-id> <id> (-r <kv>)... [-p <v>]... [-o <out>] github-enterprise-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] github-enterprise-configs-delete <name> [-p <v>]... [-o <out>] github-enterprise-configs-get <name> [-p <v>]... [-o <out>] github-enterprise-configs-list <parent> [-p <v>]... [-o <out>] github-enterprise-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-connected-repositories-batch-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-delete <name> [-p <v>]... [-o <out>] locations-bitbucket-server-configs-get <name> [-p <v>]... [-o <out>] locations-bitbucket-server-configs-list <parent> [-p <v>]... [-o <out>] locations-bitbucket-server-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository <config> (-r <kv>)... [-p <v>]... [-o <out>] locations-bitbucket-server-configs-repos-list <parent> [-p <v>]... [-o <out>] locations-builds-approve <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-builds-cancel <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-builds-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-builds-get <name> [-p <v>]... [-o <out>] locations-builds-list <parent> [-p <v>]... [-o <out>] locations-builds-retry <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-get-default-service-account <name> [-p <v>]... [-o <out>] locations-git-lab-configs-connected-repositories-batch-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-delete <name> [-p <v>]... [-o <out>] locations-git-lab-configs-get <name> [-p <v>]... [-o <out>] locations-git-lab-configs-list <parent> [-p <v>]... [-o <out>] locations-git-lab-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-remove-git-lab-connected-repository <config> (-r <kv>)... [-p <v>]... [-o <out>] locations-git-lab-configs-repos-list <parent> [-p <v>]... [-o <out>] locations-github-enterprise-configs-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-github-enterprise-configs-delete <name> [-p <v>]... [-o <out>] locations-github-enterprise-configs-get <name> [-p <v>]... [-o <out>] locations-github-enterprise-configs-list <parent> [-p <v>]... [-o <out>] locations-github-enterprise-configs-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-operations-cancel <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-operations-get <name> [-p <v>]... [-o <out>] locations-triggers-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-triggers-delete <name> [-p <v>]... [-o <out>] locations-triggers-get <name> [-p <v>]... [-o <out>] locations-triggers-list <parent> [-p <v>]... [-o <out>] locations-triggers-patch <resource-name> (-r <kv>)... [-p <v>]... [-o <out>] locations-triggers-run <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-triggers-webhook <name> (-r <kv>)... [-p <v>]... [-o <out>] locations-worker-pools-create <parent> (-r <kv>)... [-p <v>]... [-o <out>] locations-worker-pools-delete <name> [-p <v>]... [-o <out>] locations-worker-pools-get <name> [-p <v>]... [-o <out>] locations-worker-pools-list <parent> [-p <v>]... [-o <out>] locations-worker-pools-patch <name> (-r <kv>)... [-p <v>]... [-o <out>] triggers-create <project-id> (-r <kv>)... [-p <v>]... [-o <out>] triggers-delete <project-id> <trigger-id> [-p <v>]... [-o <out>] triggers-get <project-id> <trigger-id> [-p <v>]... [-o <out>] triggers-list <project-id> [-p <v>]... [-o <out>] triggers-patch <project-id> <trigger-id> (-r <kv>)... [-p <v>]... [-o <out>] triggers-run <project-id> <trigger-id> (-r <kv>)... [-p <v>]... [-o <out>] triggers-webhook <project-id> <trigger> (-r <kv>)... [-p <v>]... [-o <out>] cloudbuild1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with cloudbuild1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/cloudbuild1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/cloudbuild1-secret.json , assuming that the required cloudbuild API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. cloudbuild1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"github-dot-com-webhook_receive/","text":"ReceiveGitHubDotComWebhook is called when the API receives a github.com webhook. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=et The HTTP Content-Type header value specifying the content type of the body. data=magna The HTTP request/response body as raw binary. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p webhook-key=string For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Receive"},{"location":"github-dot-com-webhook_receive/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=et The HTTP Content-Type header value specifying the content type of the body. data=magna The HTTP request/response body as raw binary.","title":"Required Request Value"},{"location":"github-dot-com-webhook_receive/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"github-dot-com-webhook_receive/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"github-dot-com-webhook_receive/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p webhook-key=string For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.","title":"Optional Method Properties"},{"location":"github-dot-com-webhook_receive/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"locations_regional-webhook/","text":"ReceiveRegionalWebhook is called when the API receives a regional GitHub webhook. Required Scalar Argument <location> (string) Required. The location where the webhook should be sent. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=no The HTTP Content-Type header value specifying the content type of the body. data=ipsum The HTTP request/response body as raw binary. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p webhook-key=string For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Regional Webhook"},{"location":"locations_regional-webhook/#required-scalar-argument","text":"<location> (string) Required. The location where the webhook should be sent.","title":"Required Scalar Argument"},{"location":"locations_regional-webhook/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=no The HTTP Content-Type header value specifying the content type of the body. data=ipsum The HTTP request/response body as raw binary.","title":"Required Request Value"},{"location":"locations_regional-webhook/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"locations_regional-webhook/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"locations_regional-webhook/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p webhook-key=string For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.","title":"Optional Method Properties"},{"location":"locations_regional-webhook/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"methods_webhook/","text":"ReceiveWebhook is called when the API receives a GitHub webhook. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=voluptua. The HTTP Content-Type header value specifying the content type of the body. data=at The HTTP request/response body as raw binary. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p webhook-key=string For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Webhook"},{"location":"methods_webhook/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=voluptua. The HTTP Content-Type header value specifying the content type of the body. data=at The HTTP request/response body as raw binary.","title":"Required Request Value"},{"location":"methods_webhook/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"methods_webhook/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"methods_webhook/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p webhook-key=string For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.","title":"Optional Method Properties"},{"location":"methods_webhook/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"operations_cancel/","text":"Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED . Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> operations cancel ... Required Scalar Argument <name> (string) The name of the operation resource to be cancelled. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelOperationRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Cancel"},{"location":"operations_cancel/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> operations cancel ...","title":"Scopes"},{"location":"operations_cancel/#required-scalar-argument","text":"<name> (string) The name of the operation resource to be cancelled.","title":"Required Scalar Argument"},{"location":"operations_cancel/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelOperationRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"operations_cancel/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"operations_cancel/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"operations_cancel/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"operations_get/","text":"Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> operations get ... Required Scalar Argument <name> (string) The name of the operation resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"operations_get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> operations get ...","title":"Scopes"},{"location":"operations_get/#required-scalar-argument","text":"<name> (string) The name of the operation resource.","title":"Required Scalar Argument"},{"location":"operations_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"operations_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_builds-approve/","text":"Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-approve ... Required Scalar Argument <name> (string) Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\" Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ApproveBuildRequest: approval-result: approval-time: string approver-account: string comment: string decision: string url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-result approval-time=sanctus Output only. The time when the approval decision was made. approver-account=sed Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=amet. Optional. An optional comment for this manual approval result. decision=takimata Required. The decision of this manual approval. url=amet. Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Builds Approve"},{"location":"projects_builds-approve/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-approve ...","title":"Scopes"},{"location":"projects_builds-approve/#required-scalar-argument","text":"<name> (string) Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"","title":"Required Scalar Argument"},{"location":"projects_builds-approve/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ApproveBuildRequest: approval-result: approval-time: string approver-account: string comment: string decision: string url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-result approval-time=sanctus Output only. The time when the approval decision was made. approver-account=sed Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=amet. Optional. An optional comment for this manual approval result. decision=takimata Required. The decision of this manual approval. url=amet. Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.","title":"Required Request Value"},{"location":"projects_builds-approve/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_builds-approve/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_builds-approve/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_builds-cancel/","text":"Cancels a build in progress. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-cancel ... Required Scalar Arguments <project-id> (string) Required. ID of the project. <id> (string) Required. ID of the build. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=duo Required. ID of the build. name=ipsum The name of the Build to cancel. Format: projects/{project}/locations/{location}/builds/{build} project-id=gubergren Required. ID of the project. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Builds Cancel"},{"location":"projects_builds-cancel/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-cancel ...","title":"Scopes"},{"location":"projects_builds-cancel/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project. <id> (string) Required. ID of the build.","title":"Required Scalar Arguments"},{"location":"projects_builds-cancel/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=duo Required. ID of the build. name=ipsum The name of the Build to cancel. Format: projects/{project}/locations/{location}/builds/{build} project-id=gubergren Required. ID of the project.","title":"Required Request Value"},{"location":"projects_builds-cancel/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_builds-cancel/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_builds-cancel/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_builds-create/","text":"Starts a build with the specified configuration. This method returns a long-running Operation , which includes the build ID. Pass the build ID to GetBuild to determine the build status (such as SUCCESS or FAILURE ). Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-create ... Required Scalar Argument <project-id> (string) Required. ID of the project. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval.config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=gubergren Output only. The time when the approval decision was made. approver-account=eos Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=dolor Optional. An optional comment for this manual approval result. decision=ea Required. The decision of this manual approval. url=ipsum Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=invidunt Output only. The state of this build's approval. ..artifacts images=amet A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=duo Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=ipsum Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=sed End of time span. start-time=ut Start of time span. .... build-trigger-id=gubergren Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=rebum. Output only. Time at which the request to create the build was received. failure-info detail=est Explains the failure issue in more detail using hard-coded text. type=ipsum The name of the failure. .. finish-time=ipsum Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=est Output only. Unique identifier of the build. images=gubergren A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=ea Output only. URL to logs for this build in Google Cloud Console. logs-bucket=dolor Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=lorem Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=false Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=sed Optional. Option to specify how default logs buckets are setup. disk-size-gb=duo Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=false Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=no A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=stet Option to define build log streaming behavior to Cloud Storage. logging=kasd Option to specify the logging mode, which determines if and where build logs are stored. machine-type=et Compute Engine machine type on which to run the build. pool name=sed The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=et Requested verifiability options. secret-env=et A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=vero Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=erat Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=sed This field deprecated; please use pool.name instead. .. project-id=duo Output only. ID of the project. queue-ttl=dolore TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=et Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=voluptua. End of time span. start-time=amet. Start of time span. .. build-step-images=consetetur List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=diam List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=dolor Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=et IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=et Directory, relative to the source root, in which to run the build. repository=sadipscing Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=stet The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=dolor Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=duo The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=vero Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=vero Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=invidunt Explicit commit SHA to build. dir=stet Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=elitr ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=lorem Name of the Cloud Source Repository. substitutions=key=diam Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=no Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=ipsum Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=accusam Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=takimata Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=consetetur Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=voluptua. Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=et Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=erat Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=consetetur Directory, relative to the source root, in which to run the build. repository=amet. Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=sed The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=takimata Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=dolores The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=gubergren Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=et Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=accusam Explicit commit SHA to build. dir=voluptua. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=amet. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=ea Name of the Cloud Source Repository. substitutions=key=sadipscing Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=lorem Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=invidunt Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=no Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=est Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=at Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=sed Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=sit Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=tempor Output only. Time at which execution of the build was started. status=aliquyam Output only. Status of the build. status-detail=ipsum Output only. Customer-readable message about the current status. substitutions=key=et Substitutions data for Build resource. the value will be associated with the given key tags=sanctus Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=lorem Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p parent=string The parent resource where this build will be created. Format: projects/{project}/locations/{location} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Builds Create"},{"location":"projects_builds-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-create ...","title":"Scopes"},{"location":"projects_builds-create/#required-scalar-argument","text":"<project-id> (string) Required. ID of the project.","title":"Required Scalar Argument"},{"location":"projects_builds-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval.config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=gubergren Output only. The time when the approval decision was made. approver-account=eos Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=dolor Optional. An optional comment for this manual approval result. decision=ea Required. The decision of this manual approval. url=ipsum Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=invidunt Output only. The state of this build's approval. ..artifacts images=amet A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=duo Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=ipsum Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=sed End of time span. start-time=ut Start of time span. .... build-trigger-id=gubergren Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=rebum. Output only. Time at which the request to create the build was received. failure-info detail=est Explains the failure issue in more detail using hard-coded text. type=ipsum The name of the failure. .. finish-time=ipsum Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=est Output only. Unique identifier of the build. images=gubergren A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=ea Output only. URL to logs for this build in Google Cloud Console. logs-bucket=dolor Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=lorem Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=false Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=sed Optional. Option to specify how default logs buckets are setup. disk-size-gb=duo Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=false Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=no A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=stet Option to define build log streaming behavior to Cloud Storage. logging=kasd Option to specify the logging mode, which determines if and where build logs are stored. machine-type=et Compute Engine machine type on which to run the build. pool name=sed The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=et Requested verifiability options. secret-env=et A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=vero Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=erat Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=sed This field deprecated; please use pool.name instead. .. project-id=duo Output only. ID of the project. queue-ttl=dolore TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=et Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=voluptua. End of time span. start-time=amet. Start of time span. .. build-step-images=consetetur List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=diam List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=dolor Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=et IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=et Directory, relative to the source root, in which to run the build. repository=sadipscing Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=stet The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=dolor Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=duo The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=vero Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=vero Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=invidunt Explicit commit SHA to build. dir=stet Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=elitr ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=lorem Name of the Cloud Source Repository. substitutions=key=diam Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=no Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=ipsum Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=accusam Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=takimata Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=consetetur Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=voluptua. Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=et Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=erat Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=consetetur Directory, relative to the source root, in which to run the build. repository=amet. Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=sed The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=takimata Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=dolores The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=gubergren Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=et Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=accusam Explicit commit SHA to build. dir=voluptua. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=amet. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=ea Name of the Cloud Source Repository. substitutions=key=sadipscing Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=lorem Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=invidunt Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=no Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=est Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=at Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=sed Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=sit Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=tempor Output only. Time at which execution of the build was started. status=aliquyam Output only. Status of the build. status-detail=ipsum Output only. Customer-readable message about the current status. substitutions=key=et Substitutions data for Build resource. the value will be associated with the given key tags=sanctus Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=lorem Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes.","title":"Required Request Value"},{"location":"projects_builds-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_builds-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_builds-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p parent=string The parent resource where this build will be created. Format: projects/{project}/locations/{location}","title":"Optional Method Properties"},{"location":"projects_builds-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_builds-get/","text":"Returns information about a previously requested build. The Build that is returned includes its status (such as SUCCESS , FAILURE , or WORKING ), and timing information. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-get ... Required Scalar Arguments <project-id> (string) Required. ID of the project. <id> (string) Required. ID of the build. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Build to retrieve. Format: projects/{project}/locations/{location}/builds/{build} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Builds Get"},{"location":"projects_builds-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-get ...","title":"Scopes"},{"location":"projects_builds-get/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project. <id> (string) Required. ID of the build.","title":"Required Scalar Arguments"},{"location":"projects_builds-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_builds-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Build to retrieve. Format: projects/{project}/locations/{location}/builds/{build}","title":"Optional Method Properties"},{"location":"projects_builds-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_builds-list/","text":"Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-list ... Required Scalar Argument <project-id> (string) Required. ID of the project. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string The raw filter text to constrain the results. -p page-size=integer Number of results to return in the list. -p page-token=string The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more. -p parent=string The parent of the collection of Builds . Format: projects/{project}/locations/{location} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Builds List"},{"location":"projects_builds-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-list ...","title":"Scopes"},{"location":"projects_builds-list/#required-scalar-argument","text":"<project-id> (string) Required. ID of the project.","title":"Required Scalar Argument"},{"location":"projects_builds-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_builds-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string The raw filter text to constrain the results. -p page-size=integer Number of results to return in the list. -p page-token=string The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more. -p parent=string The parent of the collection of Builds . Format: projects/{project}/locations/{location}","title":"Optional Method Properties"},{"location":"projects_builds-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_builds-retry/","text":"Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify RepoSource : * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify StorageSource : * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-retry ... Required Scalar Arguments <project-id> (string) Required. ID of the project. <id> (string) Required. Build ID of the original build. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RetryBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=est Required. Build ID of the original build. name=sed The name of the Build to retry. Format: projects/{project}/locations/{location}/builds/{build} project-id=diam Required. ID of the project. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Builds Retry"},{"location":"projects_builds-retry/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects builds-retry ...","title":"Scopes"},{"location":"projects_builds-retry/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project. <id> (string) Required. Build ID of the original build.","title":"Required Scalar Arguments"},{"location":"projects_builds-retry/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RetryBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=est Required. Build ID of the original build. name=sed The name of the Build to retry. Format: projects/{project}/locations/{location}/builds/{build} project-id=diam Required. ID of the project.","title":"Required Request Value"},{"location":"projects_builds-retry/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_builds-retry/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_builds-retry/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_github-enterprise-configs-create/","text":"Create an association between a GCP project and a GitHub Enterprise server. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-create ... Required Scalar Argument <parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=dolores Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=dolores Output only. Time when the installation was associated with the project. display-name=et Name to display for this config. host-url=sed The URL of the github enterprise host the configuration is for. name=no Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=et Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=elitr The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=sed The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=no The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=nonumy The resource name for the OAuth secret secret version in Secret Manager. private-key-name=at The resource name for the private key secret. private-key-version-name=sadipscing The resource name for the private key secret version. webhook-secret-name=aliquyam The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=dolores The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=sadipscing Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=erat The key that should be attached to webhook calls to the ReceiveWebhook endpoint. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p ghe-config-id=string Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character -p project-id=string ID of the project. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Github Enterprise Configs Create"},{"location":"projects_github-enterprise-configs-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-create ...","title":"Scopes"},{"location":"projects_github-enterprise-configs-create/#required-scalar-argument","text":"<parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}","title":"Required Scalar Argument"},{"location":"projects_github-enterprise-configs-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=dolores Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=dolores Output only. Time when the installation was associated with the project. display-name=et Name to display for this config. host-url=sed The URL of the github enterprise host the configuration is for. name=no Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=et Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=elitr The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=sed The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=no The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=nonumy The resource name for the OAuth secret secret version in Secret Manager. private-key-name=at The resource name for the private key secret. private-key-version-name=sadipscing The resource name for the private key secret version. webhook-secret-name=aliquyam The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=dolores The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=sadipscing Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=erat The key that should be attached to webhook calls to the ReceiveWebhook endpoint.","title":"Required Request Value"},{"location":"projects_github-enterprise-configs-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_github-enterprise-configs-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_github-enterprise-configs-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p ghe-config-id=string Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character -p project-id=string ID of the project.","title":"Optional Method Properties"},{"location":"projects_github-enterprise-configs-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_github-enterprise-configs-delete/","text":"Delete an association between a GCP project and a GitHub Enterprise server. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-delete ... Required Scalar Argument <name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Github Enterprise Configs Delete"},{"location":"projects_github-enterprise-configs-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-delete ...","title":"Scopes"},{"location":"projects_github-enterprise-configs-delete/#required-scalar-argument","text":"<name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"","title":"Required Scalar Argument"},{"location":"projects_github-enterprise-configs-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_github-enterprise-configs-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project","title":"Optional Method Properties"},{"location":"projects_github-enterprise-configs-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_github-enterprise-configs-get/","text":"Retrieve a GitHubEnterpriseConfig. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-get ... Required Scalar Argument <name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Github Enterprise Configs Get"},{"location":"projects_github-enterprise-configs-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-get ...","title":"Scopes"},{"location":"projects_github-enterprise-configs-get/#required-scalar-argument","text":"<name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"","title":"Required Scalar Argument"},{"location":"projects_github-enterprise-configs-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_github-enterprise-configs-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project","title":"Optional Method Properties"},{"location":"projects_github-enterprise-configs-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_github-enterprise-configs-list/","text":"List all GitHubEnterpriseConfigs for a given project. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-list ... Required Scalar Argument <parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string ID of the project Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Github Enterprise Configs List"},{"location":"projects_github-enterprise-configs-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-list ...","title":"Scopes"},{"location":"projects_github-enterprise-configs-list/#required-scalar-argument","text":"<parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}","title":"Required Scalar Argument"},{"location":"projects_github-enterprise-configs-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_github-enterprise-configs-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string ID of the project","title":"Optional Method Properties"},{"location":"projects_github-enterprise-configs-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_github-enterprise-configs-patch/","text":"Update an association between a GCP project and a GitHub Enterprise server. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-patch ... Required Scalar Argument <name> (string) Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=aliquyam Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=amet Output only. Time when the installation was associated with the project. display-name=est Name to display for this config. host-url=et The URL of the github enterprise host the configuration is for. name=sea Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=consetetur Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=consetetur The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=stet The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=est The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=aliquyam The resource name for the OAuth secret secret version in Secret Manager. private-key-name=elitr The resource name for the private key secret. private-key-version-name=duo The resource name for the private key secret version. webhook-secret-name=diam The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=est The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=sit Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=sed The key that should be attached to webhook calls to the ReceiveWebhook endpoint. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Github Enterprise Configs Patch"},{"location":"projects_github-enterprise-configs-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects github-enterprise-configs-patch ...","title":"Scopes"},{"location":"projects_github-enterprise-configs-patch/#required-scalar-argument","text":"<name> (string) Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"","title":"Required Scalar Argument"},{"location":"projects_github-enterprise-configs-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=aliquyam Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=amet Output only. Time when the installation was associated with the project. display-name=est Name to display for this config. host-url=et The URL of the github enterprise host the configuration is for. name=sea Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=consetetur Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=consetetur The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=stet The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=est The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=aliquyam The resource name for the OAuth secret secret version in Secret Manager. private-key-name=elitr The resource name for the private key secret. private-key-version-name=duo The resource name for the private key secret version. webhook-secret-name=diam The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=est The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=sit Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=sed The key that should be attached to webhook calls to the ReceiveWebhook endpoint.","title":"Required Request Value"},{"location":"projects_github-enterprise-configs-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_github-enterprise-configs-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_github-enterprise-configs-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.","title":"Optional Method Properties"},{"location":"projects_github-enterprise-configs-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/","text":"Batch connecting Bitbucket Server repositories to Cloud Build. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-connected-repositories-batch-create ... Required Scalar Argument <parent> (string) The name of the BitbucketServerConfig that added connected repository. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{config} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchCreateBitbucketServerConnectedRepositoriesRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Connected Repositories Batch Create"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-connected-repositories-batch-create ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/#required-scalar-argument","text":"<parent> (string) The name of the BitbucketServerConfig that added connected repository. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{config}","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchCreateBitbucketServerConnectedRepositoriesRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-connected-repositories-batch-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-create/","text":"Creates a new BitbucketServerConfig . This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-create ... Required Scalar Argument <parent> (string) Required. Name of the parent resource. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BitbucketServerConfig: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . api-key=eos Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=lorem Time when the config was created. host-uri=ea Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=stet The resource name for the config. peered-network=dolores Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=eos Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=et Required. The resource name for the admin access token's secret version. read-access-token-version-name=sea Required. The resource name for the read access token's secret version. webhook-secret-version-name=et Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=at Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=dolore Username of the account Cloud Build will use on Bitbucket Server. webhook-key=eirmod Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p bitbucket-server-config-id=string Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Create"},{"location":"projects_locations-bitbucket-server-configs-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-create ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-create/#required-scalar-argument","text":"<parent> (string) Required. Name of the parent resource.","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BitbucketServerConfig: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . api-key=eos Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=lorem Time when the config was created. host-uri=ea Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=stet The resource name for the config. peered-network=dolores Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=eos Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=et Required. The resource name for the admin access token's secret version. read-access-token-version-name=sea Required. The resource name for the read access token's secret version. webhook-secret-version-name=et Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=at Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=dolore Username of the account Cloud Build will use on Bitbucket Server. webhook-key=eirmod Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.","title":"Required Request Value"},{"location":"projects_locations-bitbucket-server-configs-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-bitbucket-server-configs-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p bitbucket-server-config-id=string Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.","title":"Optional Method Properties"},{"location":"projects_locations-bitbucket-server-configs-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-delete/","text":"Delete a BitbucketServerConfig . This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-delete ... Required Scalar Argument <name> (string) Required. The config resource name. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Delete"},{"location":"projects_locations-bitbucket-server-configs-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-delete ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-delete/#required-scalar-argument","text":"<name> (string) Required. The config resource name.","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-get/","text":"Retrieve a BitbucketServerConfig . This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-get ... Required Scalar Argument <name> (string) Required. The config resource name. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Get"},{"location":"projects_locations-bitbucket-server-configs-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-get ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-get/#required-scalar-argument","text":"<name> (string) Required. The config resource name.","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-list/","text":"List all BitbucketServerConfigs for a given project. This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-list ... Required Scalar Argument <parent> (string) Required. Name of the parent resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. -p page-token=string A page token, received from a previous ListBitbucketServerConfigsRequest call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListBitbucketServerConfigsRequest must match the call that provided the page token. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs List"},{"location":"projects_locations-bitbucket-server-configs-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-list ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-list/#required-scalar-argument","text":"<parent> (string) Required. Name of the parent resource.","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. -p page-token=string A page token, received from a previous ListBitbucketServerConfigsRequest call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListBitbucketServerConfigsRequest must match the call that provided the page token.","title":"Optional Method Properties"},{"location":"projects_locations-bitbucket-server-configs-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-patch/","text":"Updates an existing BitbucketServerConfig . This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-patch ... Required Scalar Argument <name> (string) The resource name for the config. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BitbucketServerConfig: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . api-key=lorem Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=accusam Time when the config was created. host-uri=amet Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=erat The resource name for the config. peered-network=dolores Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=erat Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=accusam Required. The resource name for the admin access token's secret version. read-access-token-version-name=sea Required. The resource name for the read access token's secret version. webhook-secret-version-name=takimata Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=lorem Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=et Username of the account Cloud Build will use on Bitbucket Server. webhook-key=at Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Patch"},{"location":"projects_locations-bitbucket-server-configs-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-patch ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-patch/#required-scalar-argument","text":"<name> (string) The resource name for the config.","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BitbucketServerConfig: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . api-key=lorem Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=accusam Time when the config was created. host-uri=amet Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=erat The resource name for the config. peered-network=dolores Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=erat Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=accusam Required. The resource name for the admin access token's secret version. read-access-token-version-name=sea Required. The resource name for the read access token's secret version. webhook-secret-version-name=takimata Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=lorem Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=et Username of the account Cloud Build will use on Bitbucket Server. webhook-key=at Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.","title":"Required Request Value"},{"location":"projects_locations-bitbucket-server-configs-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-bitbucket-server-configs-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.","title":"Optional Method Properties"},{"location":"projects_locations-bitbucket-server-configs-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/","text":"Remove a Bitbucket Server repository from a given BitbucketServerConfig's connected repositories. This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository ... Required Scalar Argument <config> (string) Required. The name of the BitbucketServerConfig to remove a connected repository. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{config} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RemoveBitbucketServerConnectedRepositoryRequest: connected-repository: project-key: string repo-slug: string webhook-id: integer can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .connected-repository project-key=dolor Required. Identifier for the project storing the repository. repo-slug=et Required. Identifier for the repository. webhook-id=53 Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Remove Bitbucket Server Connected Repository"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/#required-scalar-argument","text":"<config> (string) Required. The name of the BitbucketServerConfig to remove a connected repository. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{config}","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RemoveBitbucketServerConnectedRepositoryRequest: connected-repository: project-key: string repo-slug: string webhook-id: integer can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .connected-repository project-key=dolor Required. Identifier for the project storing the repository. repo-slug=et Required. Identifier for the repository. webhook-id=53 Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.","title":"Required Request Value"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-remove-bitbucket-server-connected-repository/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-bitbucket-server-configs-repos-list/","text":"List all repositories for a given BitbucketServerConfig . This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-repos-list ... Required Scalar Argument <parent> (string) Required. Name of the parent resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of configs to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000. -p page-token=string A page token, received from a previous ListBitbucketServerRepositoriesRequest call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListBitbucketServerConfigsRequest must match the call that provided the page token. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Bitbucket Server Configs Repos List"},{"location":"projects_locations-bitbucket-server-configs-repos-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-bitbucket-server-configs-repos-list ...","title":"Scopes"},{"location":"projects_locations-bitbucket-server-configs-repos-list/#required-scalar-argument","text":"<parent> (string) Required. Name of the parent resource.","title":"Required Scalar Argument"},{"location":"projects_locations-bitbucket-server-configs-repos-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-bitbucket-server-configs-repos-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of configs to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000. -p page-token=string A page token, received from a previous ListBitbucketServerRepositoriesRequest call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListBitbucketServerConfigsRequest must match the call that provided the page token.","title":"Optional Method Properties"},{"location":"projects_locations-bitbucket-server-configs-repos-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-builds-approve/","text":"Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-approve ... Required Scalar Argument <name> (string) Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\" Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ApproveBuildRequest: approval-result: approval-time: string approver-account: string comment: string decision: string url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-result approval-time=erat Output only. The time when the approval decision was made. approver-account=sea Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=nonumy Optional. An optional comment for this manual approval result. decision=et Required. The decision of this manual approval. url=gubergren Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Builds Approve"},{"location":"projects_locations-builds-approve/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-approve ...","title":"Scopes"},{"location":"projects_locations-builds-approve/#required-scalar-argument","text":"<name> (string) Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"","title":"Required Scalar Argument"},{"location":"projects_locations-builds-approve/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ApproveBuildRequest: approval-result: approval-time: string approver-account: string comment: string decision: string url: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-result approval-time=erat Output only. The time when the approval decision was made. approver-account=sea Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=nonumy Optional. An optional comment for this manual approval result. decision=et Required. The decision of this manual approval. url=gubergren Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.","title":"Required Request Value"},{"location":"projects_locations-builds-approve/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-builds-approve/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-builds-approve/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-builds-cancel/","text":"Cancels a build in progress. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-cancel ... Required Scalar Argument <name> (string) The name of the Build to cancel. Format: projects/{project}/locations/{location}/builds/{build} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=justo Required. ID of the build. name=sea The name of the Build to cancel. Format: projects/{project}/locations/{location}/builds/{build} project-id=consetetur Required. ID of the project. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Builds Cancel"},{"location":"projects_locations-builds-cancel/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-cancel ...","title":"Scopes"},{"location":"projects_locations-builds-cancel/#required-scalar-argument","text":"<name> (string) The name of the Build to cancel. Format: projects/{project}/locations/{location}/builds/{build}","title":"Required Scalar Argument"},{"location":"projects_locations-builds-cancel/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=justo Required. ID of the build. name=sea The name of the Build to cancel. Format: projects/{project}/locations/{location}/builds/{build} project-id=consetetur Required. ID of the project.","title":"Required Request Value"},{"location":"projects_locations-builds-cancel/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-builds-cancel/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-builds-cancel/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-builds-create/","text":"Starts a build with the specified configuration. This method returns a long-running Operation , which includes the build ID. Pass the build ID to GetBuild to determine the build status (such as SUCCESS or FAILURE ). Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-create ... Required Scalar Argument <parent> (string) The parent resource where this build will be created. Format: projects/{project}/locations/{location} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval.config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=aliquyam Output only. The time when the approval decision was made. approver-account=eos Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=at Optional. An optional comment for this manual approval result. decision=dolores Required. The decision of this manual approval. url=consetetur Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=gubergren Output only. The state of this build's approval. ..artifacts images=dolor A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=aliquyam Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=no Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=amet. End of time span. start-time=ipsum Start of time span. .... build-trigger-id=lorem Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=accusam Output only. Time at which the request to create the build was received. failure-info detail=gubergren Explains the failure issue in more detail using hard-coded text. type=sadipscing The name of the failure. .. finish-time=at Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=sit Output only. Unique identifier of the build. images=duo A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=sit Output only. URL to logs for this build in Google Cloud Console. logs-bucket=magna Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=et Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=dolor Optional. Option to specify how default logs buckets are setup. disk-size-gb=lorem Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=false Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=amet. A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=no Option to define build log streaming behavior to Cloud Storage. logging=nonumy Option to specify the logging mode, which determines if and where build logs are stored. machine-type=sed Compute Engine machine type on which to run the build. pool name=kasd The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=lorem Requested verifiability options. secret-env=sanctus A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=nonumy Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=rebum. Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=tempor This field deprecated; please use pool.name instead. .. project-id=dolore Output only. ID of the project. queue-ttl=eos TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=amet. Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=dolore End of time span. start-time=amet Start of time span. .. build-step-images=ut List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=at List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=sit Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=vero IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=duo Directory, relative to the source root, in which to run the build. repository=sadipscing Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=ut The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=rebum. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=duo The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=kasd Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=sadipscing Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=tempor Explicit commit SHA to build. dir=sea Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=lorem ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=magna Name of the Cloud Source Repository. substitutions=key=takimata Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=rebum. Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=at Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=invidunt Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=clita Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=stet Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=aliquyam Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=ut Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sit Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=vero Directory, relative to the source root, in which to run the build. repository=rebum. Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=dolores The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=consetetur Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=dolores The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=sed Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=invidunt Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=clita Explicit commit SHA to build. dir=dolor Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=magna ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=diam Name of the Cloud Source Repository. substitutions=key=nonumy Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=et Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=sanctus Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=accusam Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=tempor Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=sed Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=est Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=takimata Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=dolor Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=diam Output only. Time at which execution of the build was started. status=at Output only. Status of the build. status-detail=erat Output only. Customer-readable message about the current status. substitutions=key=justo Substitutions data for Build resource. the value will be associated with the given key tags=ipsum Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=accusam Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Builds Create"},{"location":"projects_locations-builds-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-create ...","title":"Scopes"},{"location":"projects_locations-builds-create/#required-scalar-argument","text":"<parent> (string) The parent resource where this build will be created. Format: projects/{project}/locations/{location}","title":"Required Scalar Argument"},{"location":"projects_locations-builds-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval.config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=aliquyam Output only. The time when the approval decision was made. approver-account=eos Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=at Optional. An optional comment for this manual approval result. decision=dolores Required. The decision of this manual approval. url=consetetur Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=gubergren Output only. The state of this build's approval. ..artifacts images=dolor A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=aliquyam Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=no Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=amet. End of time span. start-time=ipsum Start of time span. .... build-trigger-id=lorem Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=accusam Output only. Time at which the request to create the build was received. failure-info detail=gubergren Explains the failure issue in more detail using hard-coded text. type=sadipscing The name of the failure. .. finish-time=at Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=sit Output only. Unique identifier of the build. images=duo A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=sit Output only. URL to logs for this build in Google Cloud Console. logs-bucket=magna Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=et Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=dolor Optional. Option to specify how default logs buckets are setup. disk-size-gb=lorem Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=false Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=amet. A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=no Option to define build log streaming behavior to Cloud Storage. logging=nonumy Option to specify the logging mode, which determines if and where build logs are stored. machine-type=sed Compute Engine machine type on which to run the build. pool name=kasd The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=lorem Requested verifiability options. secret-env=sanctus A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=nonumy Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=rebum. Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=tempor This field deprecated; please use pool.name instead. .. project-id=dolore Output only. ID of the project. queue-ttl=eos TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=amet. Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=dolore End of time span. start-time=amet Start of time span. .. build-step-images=ut List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=at List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=sit Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=vero IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=duo Directory, relative to the source root, in which to run the build. repository=sadipscing Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=ut The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=rebum. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=duo The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=kasd Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=sadipscing Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=tempor Explicit commit SHA to build. dir=sea Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=lorem ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=magna Name of the Cloud Source Repository. substitutions=key=takimata Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=rebum. Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=at Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=invidunt Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=clita Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=stet Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=aliquyam Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=ut Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sit Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=vero Directory, relative to the source root, in which to run the build. repository=rebum. Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=dolores The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=consetetur Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=dolores The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=sed Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=invidunt Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=clita Explicit commit SHA to build. dir=dolor Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=magna ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=diam Name of the Cloud Source Repository. substitutions=key=nonumy Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=et Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=sanctus Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=accusam Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=tempor Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=sed Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=est Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=takimata Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=dolor Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=diam Output only. Time at which execution of the build was started. status=at Output only. Status of the build. status-detail=erat Output only. Customer-readable message about the current status. substitutions=key=justo Substitutions data for Build resource. the value will be associated with the given key tags=ipsum Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=accusam Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes.","title":"Required Request Value"},{"location":"projects_locations-builds-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-builds-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-builds-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project.","title":"Optional Method Properties"},{"location":"projects_locations-builds-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-builds-get/","text":"Returns information about a previously requested build. The Build that is returned includes its status (such as SUCCESS , FAILURE , or WORKING ), and timing information. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-get ... Required Scalar Argument <name> (string) The name of the Build to retrieve. Format: projects/{project}/locations/{location}/builds/{build} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p id=string Required. ID of the build. -p project-id=string Required. ID of the project. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Builds Get"},{"location":"projects_locations-builds-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-get ...","title":"Scopes"},{"location":"projects_locations-builds-get/#required-scalar-argument","text":"<name> (string) The name of the Build to retrieve. Format: projects/{project}/locations/{location}/builds/{build}","title":"Required Scalar Argument"},{"location":"projects_locations-builds-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-builds-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p id=string Required. ID of the build. -p project-id=string Required. ID of the project.","title":"Optional Method Properties"},{"location":"projects_locations-builds-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-builds-list/","text":"Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-list ... Required Scalar Argument <parent> (string) The parent of the collection of Builds . Format: projects/{project}/locations/{location} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string The raw filter text to constrain the results. -p page-size=integer Number of results to return in the list. -p page-token=string The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more. -p project-id=string Required. ID of the project. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Builds List"},{"location":"projects_locations-builds-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-list ...","title":"Scopes"},{"location":"projects_locations-builds-list/#required-scalar-argument","text":"<parent> (string) The parent of the collection of Builds . Format: projects/{project}/locations/{location}","title":"Required Scalar Argument"},{"location":"projects_locations-builds-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-builds-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string The raw filter text to constrain the results. -p page-size=integer Number of results to return in the list. -p page-token=string The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more. -p project-id=string Required. ID of the project.","title":"Optional Method Properties"},{"location":"projects_locations-builds-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-builds-retry/","text":"Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify RepoSource : * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify StorageSource : * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-retry ... Required Scalar Argument <name> (string) The name of the Build to retry. Format: projects/{project}/locations/{location}/builds/{build} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RetryBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=dolores Required. Build ID of the original build. name=consetetur The name of the Build to retry. Format: projects/{project}/locations/{location}/builds/{build} project-id=no Required. ID of the project. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Builds Retry"},{"location":"projects_locations-builds-retry/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-builds-retry ...","title":"Scopes"},{"location":"projects_locations-builds-retry/#required-scalar-argument","text":"<name> (string) The name of the Build to retry. Format: projects/{project}/locations/{location}/builds/{build}","title":"Required Scalar Argument"},{"location":"projects_locations-builds-retry/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RetryBuildRequest: id: string name: string project-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . id=dolores Required. Build ID of the original build. name=consetetur The name of the Build to retry. Format: projects/{project}/locations/{location}/builds/{build} project-id=no Required. ID of the project.","title":"Required Request Value"},{"location":"projects_locations-builds-retry/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-builds-retry/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-builds-retry/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-get-default-service-account/","text":"Returns the DefaultServiceAccount used by the project. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-get-default-service-account ... Required Scalar Argument <name> (string) Required. The name of the DefaultServiceAccount to retrieve. Format: projects/{project}/locations/{location}/defaultServiceAccount Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Get Default Service Account"},{"location":"projects_locations-get-default-service-account/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-get-default-service-account ...","title":"Scopes"},{"location":"projects_locations-get-default-service-account/#required-scalar-argument","text":"<name> (string) Required. The name of the DefaultServiceAccount to retrieve. Format: projects/{project}/locations/{location}/defaultServiceAccount","title":"Required Scalar Argument"},{"location":"projects_locations-get-default-service-account/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-get-default-service-account/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/","text":"Batch connecting GitLab repositories to Cloud Build. This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-connected-repositories-batch-create ... Required Scalar Argument <parent> (string) The name of the GitLabConfig that adds connected repositories. Format: projects/{project}/locations/{location}/gitLabConfigs/{config} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchCreateGitLabConnectedRepositoriesRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Connected Repositories Batch Create"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-connected-repositories-batch-create ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/#required-scalar-argument","text":"<parent> (string) The name of the GitLabConfig that adds connected repositories. Format: projects/{project}/locations/{location}/gitLabConfigs/{config}","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BatchCreateGitLabConnectedRepositoriesRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-connected-repositories-batch-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-create/","text":"Creates a new GitLabConfig . This API is experimental Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-create ... Required Scalar Argument <parent> (string) Required. Name of the parent resource. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitLabConfig: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . create-time=justo Output only. Time when the config was created. enterprise-config host-uri=sadipscing Immutable. The URI of the GitlabEnterprise host. service-directory-config service=diam The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=sea The SSL certificate to use in requests to GitLab Enterprise instances. .. name=ipsum The resource name for the config. secrets api-access-token-version=stet Required. The resource name for the api access token\u2019s secret version api-key-version=gubergren Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=ipsum Required. The resource name for the read access token\u2019s secret version webhook-secret-version=no Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=sit Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=kasd Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p gitlab-config-id=string Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig\u2019s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Create"},{"location":"projects_locations-git-lab-configs-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-create ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-create/#required-scalar-argument","text":"<parent> (string) Required. Name of the parent resource.","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitLabConfig: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . create-time=justo Output only. Time when the config was created. enterprise-config host-uri=sadipscing Immutable. The URI of the GitlabEnterprise host. service-directory-config service=diam The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=sea The SSL certificate to use in requests to GitLab Enterprise instances. .. name=ipsum The resource name for the config. secrets api-access-token-version=stet Required. The resource name for the api access token\u2019s secret version api-key-version=gubergren Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=ipsum Required. The resource name for the read access token\u2019s secret version webhook-secret-version=no Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=sit Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=kasd Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.","title":"Required Request Value"},{"location":"projects_locations-git-lab-configs-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-git-lab-configs-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p gitlab-config-id=string Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig\u2019s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character","title":"Optional Method Properties"},{"location":"projects_locations-git-lab-configs-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-delete/","text":"Delete a GitLabConfig . This API is experimental Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-delete ... Required Scalar Argument <name> (string) Required. The config resource name. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Delete"},{"location":"projects_locations-git-lab-configs-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-delete ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-delete/#required-scalar-argument","text":"<name> (string) Required. The config resource name.","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-get/","text":"Retrieves a GitLabConfig . This API is experimental Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-get ... Required Scalar Argument <name> (string) Required. The config resource name. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Get"},{"location":"projects_locations-git-lab-configs-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-get ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-get/#required-scalar-argument","text":"<name> (string) Required. The config resource name.","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-list/","text":"List all GitLabConfigs for a given project. This API is experimental Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-list ... Required Scalar Argument <parent> (string) Required. Name of the parent resource Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000;, values above 1000 will be coerced to 1000. -p page-token=string A page token, received from a previous \u2018ListGitlabConfigsRequest\u2019 call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to \u2018ListGitlabConfigsRequest\u2019 must match the call that provided the page token. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs List"},{"location":"projects_locations-git-lab-configs-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-list ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-list/#required-scalar-argument","text":"<parent> (string) Required. Name of the parent resource","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000;, values above 1000 will be coerced to 1000. -p page-token=string A page token, received from a previous \u2018ListGitlabConfigsRequest\u2019 call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to \u2018ListGitlabConfigsRequest\u2019 must match the call that provided the page token.","title":"Optional Method Properties"},{"location":"projects_locations-git-lab-configs-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-patch/","text":"Updates an existing GitLabConfig . This API is experimental Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-patch ... Required Scalar Argument <name> (string) The resource name for the config. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitLabConfig: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . create-time=amet Output only. Time when the config was created. enterprise-config host-uri=lorem Immutable. The URI of the GitlabEnterprise host. service-directory-config service=justo The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=invidunt The SSL certificate to use in requests to GitLab Enterprise instances. .. name=sed The resource name for the config. secrets api-access-token-version=nonumy Required. The resource name for the api access token\u2019s secret version api-key-version=sea Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=ipsum Required. The resource name for the read access token\u2019s secret version webhook-secret-version=kasd Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=justo Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=ea Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Patch"},{"location":"projects_locations-git-lab-configs-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-patch ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-patch/#required-scalar-argument","text":"<name> (string) The resource name for the config.","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitLabConfig: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . create-time=amet Output only. Time when the config was created. enterprise-config host-uri=lorem Immutable. The URI of the GitlabEnterprise host. service-directory-config service=justo The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=invidunt The SSL certificate to use in requests to GitLab Enterprise instances. .. name=sed The resource name for the config. secrets api-access-token-version=nonumy Required. The resource name for the api access token\u2019s secret version api-key-version=sea Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=ipsum Required. The resource name for the read access token\u2019s secret version webhook-secret-version=kasd Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=justo Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=ea Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.","title":"Required Request Value"},{"location":"projects_locations-git-lab-configs-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-git-lab-configs-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.","title":"Optional Method Properties"},{"location":"projects_locations-git-lab-configs-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/","text":"Remove a GitLab repository from a given GitLabConfig's connected repositories. This API is experimental. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-remove-git-lab-connected-repository ... Required Scalar Argument <config> (string) Required. The name of the GitLabConfig to remove a connected repository. Format: projects/{project}/locations/{location}/gitLabConfigs/{config} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RemoveGitLabConnectedRepositoryRequest: connected-repository: id: string webhook-id: integer can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .connected-repository id=at Required. Identifier for the repository. example: \"namespace/project-slug\", namespace is usually the username or group ID webhook-id=20 Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Remove Git Lab Connected Repository"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-remove-git-lab-connected-repository ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/#required-scalar-argument","text":"<config> (string) Required. The name of the GitLabConfig to remove a connected repository. Format: projects/{project}/locations/{location}/gitLabConfigs/{config}","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RemoveGitLabConnectedRepositoryRequest: connected-repository: id: string webhook-id: integer can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .connected-repository id=at Required. Identifier for the repository. example: \"namespace/project-slug\", namespace is usually the username or group ID webhook-id=20 Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.","title":"Required Request Value"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-remove-git-lab-connected-repository/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-git-lab-configs-repos-list/","text":"List all repositories for a given GitLabConfig . This API is experimental Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-repos-list ... Required Scalar Argument <parent> (string) Required. Name of the parent resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of repositories to return. The service may return fewer than this value. -p page-token=string A page token, received from a previous ListGitLabRepositoriesRequest call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListGitLabRepositoriesRequest` must match the call that provided the page token. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Git Lab Configs Repos List"},{"location":"projects_locations-git-lab-configs-repos-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-git-lab-configs-repos-list ...","title":"Scopes"},{"location":"projects_locations-git-lab-configs-repos-list/#required-scalar-argument","text":"<parent> (string) Required. Name of the parent resource.","title":"Required Scalar Argument"},{"location":"projects_locations-git-lab-configs-repos-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-git-lab-configs-repos-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of repositories to return. The service may return fewer than this value. -p page-token=string A page token, received from a previous ListGitLabRepositoriesRequest call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListGitLabRepositoriesRequest` must match the call that provided the page token.","title":"Optional Method Properties"},{"location":"projects_locations-git-lab-configs-repos-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-github-enterprise-configs-create/","text":"Create an association between a GCP project and a GitHub Enterprise server. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-create ... Required Scalar Argument <parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=clita Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=vero Output only. Time when the installation was associated with the project. display-name=invidunt Name to display for this config. host-url=nonumy The URL of the github enterprise host the configuration is for. name=erat Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=erat Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=dolores The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=ipsum The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=voluptua. The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=eos The resource name for the OAuth secret secret version in Secret Manager. private-key-name=duo The resource name for the private key secret. private-key-version-name=elitr The resource name for the private key secret version. webhook-secret-name=consetetur The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=et The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=clita Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=sit The key that should be attached to webhook calls to the ReceiveWebhook endpoint. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p ghe-config-id=string Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character -p project-id=string ID of the project. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Github Enterprise Configs Create"},{"location":"projects_locations-github-enterprise-configs-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-create ...","title":"Scopes"},{"location":"projects_locations-github-enterprise-configs-create/#required-scalar-argument","text":"<parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}","title":"Required Scalar Argument"},{"location":"projects_locations-github-enterprise-configs-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=clita Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=vero Output only. Time when the installation was associated with the project. display-name=invidunt Name to display for this config. host-url=nonumy The URL of the github enterprise host the configuration is for. name=erat Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=erat Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=dolores The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=ipsum The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=voluptua. The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=eos The resource name for the OAuth secret secret version in Secret Manager. private-key-name=duo The resource name for the private key secret. private-key-version-name=elitr The resource name for the private key secret version. webhook-secret-name=consetetur The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=et The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=clita Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=sit The key that should be attached to webhook calls to the ReceiveWebhook endpoint.","title":"Required Request Value"},{"location":"projects_locations-github-enterprise-configs-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-github-enterprise-configs-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-github-enterprise-configs-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p ghe-config-id=string Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character -p project-id=string ID of the project.","title":"Optional Method Properties"},{"location":"projects_locations-github-enterprise-configs-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-github-enterprise-configs-delete/","text":"Delete an association between a GCP project and a GitHub Enterprise server. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-delete ... Required Scalar Argument <name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Github Enterprise Configs Delete"},{"location":"projects_locations-github-enterprise-configs-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-delete ...","title":"Scopes"},{"location":"projects_locations-github-enterprise-configs-delete/#required-scalar-argument","text":"<name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"","title":"Required Scalar Argument"},{"location":"projects_locations-github-enterprise-configs-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-github-enterprise-configs-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project","title":"Optional Method Properties"},{"location":"projects_locations-github-enterprise-configs-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-github-enterprise-configs-get/","text":"Retrieve a GitHubEnterpriseConfig. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-get ... Required Scalar Argument <name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Github Enterprise Configs Get"},{"location":"projects_locations-github-enterprise-configs-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-get ...","title":"Scopes"},{"location":"projects_locations-github-enterprise-configs-get/#required-scalar-argument","text":"<name> (string) This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"","title":"Required Scalar Argument"},{"location":"projects_locations-github-enterprise-configs-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-github-enterprise-configs-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p config-id=string Unique identifier of the GitHubEnterpriseConfig -p project-id=string ID of the project","title":"Optional Method Properties"},{"location":"projects_locations-github-enterprise-configs-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-github-enterprise-configs-list/","text":"List all GitHubEnterpriseConfigs for a given project. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-list ... Required Scalar Argument <parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string ID of the project Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Github Enterprise Configs List"},{"location":"projects_locations-github-enterprise-configs-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-list ...","title":"Scopes"},{"location":"projects_locations-github-enterprise-configs-list/#required-scalar-argument","text":"<parent> (string) Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}","title":"Required Scalar Argument"},{"location":"projects_locations-github-enterprise-configs-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-github-enterprise-configs-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string ID of the project","title":"Optional Method Properties"},{"location":"projects_locations-github-enterprise-configs-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-github-enterprise-configs-patch/","text":"Update an association between a GCP project and a GitHub Enterprise server. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-patch ... Required Scalar Argument <name> (string) Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=takimata Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=erat Output only. Time when the installation was associated with the project. display-name=diam Name to display for this config. host-url=nonumy The URL of the github enterprise host the configuration is for. name=lorem Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=at Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=diam The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=diam The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=sed The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=et The resource name for the OAuth secret secret version in Secret Manager. private-key-name=ea The resource name for the private key secret. private-key-version-name=dolore The resource name for the private key secret version. webhook-secret-name=ipsum The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=ea The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=at Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=sit The key that should be attached to webhook calls to the ReceiveWebhook endpoint. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Github Enterprise Configs Patch"},{"location":"projects_locations-github-enterprise-configs-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-github-enterprise-configs-patch ...","title":"Scopes"},{"location":"projects_locations-github-enterprise-configs-patch/#required-scalar-argument","text":"<name> (string) Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"","title":"Required Scalar Argument"},{"location":"projects_locations-github-enterprise-configs-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GitHubEnterpriseConfig: app-id: string create-time: string display-name: string host-url: string name: string peered-network: string secrets: oauth-client-id-name: string oauth-client-id-version-name: string oauth-secret-name: string oauth-secret-version-name: string private-key-name: string private-key-version-name: string webhook-secret-name: string webhook-secret-version-name: string ssl-ca: string webhook-key: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . app-id=takimata Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server. create-time=erat Output only. Time when the installation was associated with the project. display-name=diam Name to display for this config. host-url=nonumy The URL of the github enterprise host the configuration is for. name=lorem Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" peered-network=at Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. secrets oauth-client-id-name=diam The resource name for the OAuth client ID secret in Secret Manager. oauth-client-id-version-name=diam The resource name for the OAuth client ID secret version in Secret Manager. oauth-secret-name=sed The resource name for the OAuth secret in Secret Manager. oauth-secret-version-name=et The resource name for the OAuth secret secret version in Secret Manager. private-key-name=ea The resource name for the private key secret. private-key-version-name=dolore The resource name for the private key secret version. webhook-secret-name=ipsum The resource name for the webhook secret in Secret Manager. webhook-secret-version-name=ea The resource name for the webhook secret secret version in Secret Manager. .. ssl-ca=at Optional. SSL certificate to use for requests to GitHub Enterprise. webhook-key=sit The key that should be attached to webhook calls to the ReceiveWebhook endpoint.","title":"Required Request Value"},{"location":"projects_locations-github-enterprise-configs-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-github-enterprise-configs-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-github-enterprise-configs-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.","title":"Optional Method Properties"},{"location":"projects_locations-github-enterprise-configs-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-operations-cancel/","text":"Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED . Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-operations-cancel ... Required Scalar Argument <name> (string) The name of the operation resource to be cancelled. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelOperationRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Operations Cancel"},{"location":"projects_locations-operations-cancel/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-operations-cancel ...","title":"Scopes"},{"location":"projects_locations-operations-cancel/#required-scalar-argument","text":"<name> (string) The name of the operation resource to be cancelled.","title":"Required Scalar Argument"},{"location":"projects_locations-operations-cancel/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CancelOperationRequest: can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.","title":"Required Request Value"},{"location":"projects_locations-operations-cancel/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-operations-cancel/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-operations-cancel/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-operations-get/","text":"Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-operations-get ... Required Scalar Argument <name> (string) The name of the operation resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Operations Get"},{"location":"projects_locations-operations-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-operations-get ...","title":"Scopes"},{"location":"projects_locations-operations-get/#required-scalar-argument","text":"<name> (string) The name of the operation resource.","title":"Required Scalar Argument"},{"location":"projects_locations-operations-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-operations-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-create/","text":"Creates a new BuildTrigger . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-create ... Required Scalar Argument <parent> (string) The parent resource where this trigger will be created. Format: projects/{project}/locations/{location} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=false Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=stet Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=duo Time when the config was created. host-uri=elitr Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=aliquyam The resource name for the config. peered-network=erat Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=ut Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=et Required. The resource name for the admin access token's secret version. read-access-token-version-name=lorem Required. The resource name for the read access token's secret version. webhook-secret-version-name=rebum. Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=et Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=sed Username of the account Cloud Build will use on Bitbucket Server. webhook-key=stet Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=aliquyam Required. The Bitbucket server config resource that this trigger config maps to. project-key=kasd Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=lorem Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=sit If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=tempor Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=amet Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=sit Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=ipsum Output only. The time when the approval decision was made. approver-account=ipsum Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=et Optional. An optional comment for this manual approval result. decision=elitr Required. The decision of this manual approval. url=eirmod Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=dolor Output only. The state of this build's approval. ..artifacts images=sadipscing A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=dolor Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=dolor Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=consetetur End of time span. start-time=et Start of time span. .... build-trigger-id=sit Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=lorem Output only. Time at which the request to create the build was received. failure-info detail=nonumy Explains the failure issue in more detail using hard-coded text. type=diam The name of the failure. .. finish-time=ipsum Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=invidunt Output only. Unique identifier of the build. images=stet A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=voluptua. Output only. URL to logs for this build in Google Cloud Console. logs-bucket=at Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=diam Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=at Optional. Option to specify how default logs buckets are setup. disk-size-gb=eirmod Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=false Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=sit A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=accusam Option to define build log streaming behavior to Cloud Storage. logging=et Option to specify the logging mode, which determines if and where build logs are stored. machine-type=nonumy Compute Engine machine type on which to run the build. pool name=accusam The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=ut Requested verifiability options. secret-env=voluptua. A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=consetetur Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=dolor Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=amet This field deprecated; please use pool.name instead. .. project-id=et Output only. ID of the project. queue-ttl=aliquyam TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=ipsum Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=gubergren End of time span. start-time=invidunt Start of time span. .. build-step-images=sea List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=duo List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=sea Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=stet IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=sadipscing Directory, relative to the source root, in which to run the build. repository=no Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=tempor The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=ipsum Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=sea The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=sit Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=amet. Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=ipsum Explicit commit SHA to build. dir=at Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=gubergren ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=et Name of the Cloud Source Repository. substitutions=key=invidunt Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=magna Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=gubergren Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=elitr Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=ipsum Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=kasd Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=dolore Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=lorem Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=amet Directory, relative to the source root, in which to run the build. repository=ipsum Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=lorem The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=dolores Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=consetetur The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=stet Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=accusam Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=consetetur Explicit commit SHA to build. dir=takimata Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=nonumy ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=sea Name of the Cloud Source Repository. substitutions=key=eos Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=dolore Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=accusam Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=elitr Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sed Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=labore Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=et Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=eirmod Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sed Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=at Output only. Time at which execution of the build was started. status=stet Output only. Status of the build. status-detail=sit Output only. Customer-readable message about the current status. substitutions=key=ipsum Substitutions data for Build resource. the value will be associated with the given key tags=lorem Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=dolor Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=amet Output only. Time when the trigger was created. description=magna Human-readable description of this trigger. disabled=false If true, the trigger will never automatically execute a build. event-type=invidunt EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=et Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=et A Common Expression Language string. git-file-source bitbucket-server-config=dolor The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=erat The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=dolore The path of the file, with the repo root as the root of the path. repo-type=vero See RepoType above. repository=ea The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=et The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=amet. The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=eirmod Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=sanctus The installationID that emits the GitHub event. name=sed Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=dolor Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=et Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=et If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=eos Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=ea Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=aliquyam Output only. Time when the config was created. enterprise-config host-uri=nonumy Immutable. The URI of the GitlabEnterprise host. service-directory-config service=stet The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=rebum. The SSL certificate to use in requests to GitLab Enterprise instances. .. name=eirmod The resource name for the config. secrets api-access-token-version=dolores Required. The resource name for the api access token\u2019s secret version api-key-version=aliquyam Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=sanctus Required. The resource name for the read access token\u2019s secret version webhook-secret-version=invidunt Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=dolor Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=eos Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=magna The GitLab config resource that this trigger config maps to. project-namespace=no Namespace of the GitLab project. pull-request branch=gubergren Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=erat If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=consetetur Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=elitr Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=justo Output only. Unique identifier of the trigger. ignored-files=lorem ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=labore If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=gubergren If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=vero User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=ea Service account that will make the push request. state=sed Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=sanctus Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=labore The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=amet Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=et If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=sanctus Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=eirmod Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=vero The resource name of the Repo API resource. repository-type=voluptua. Output only. The type of the SCM vendor the repository points to. .. resource-name=sea The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=ipsum The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=sea The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=et The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=gubergren The branch or tag to use. Must start with \"refs/\" (required). repo-type=dolore See RepoType below. repository=ea The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=elitr The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=takimata Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=duo Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=tempor Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=clita Explicit commit SHA to build. dir=sed Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=stet ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=sea Name of the Cloud Source Repository. substitutions=key=clita Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=consetetur Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=dolores Required. Resource name for the secret required as a URL parameter. state=sit Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project for which to configure automatic builds. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers Create"},{"location":"projects_locations-triggers-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-create ...","title":"Scopes"},{"location":"projects_locations-triggers-create/#required-scalar-argument","text":"<parent> (string) The parent resource where this trigger will be created. Format: projects/{project}/locations/{location}","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=false Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=stet Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=duo Time when the config was created. host-uri=elitr Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=aliquyam The resource name for the config. peered-network=erat Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=ut Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=et Required. The resource name for the admin access token's secret version. read-access-token-version-name=lorem Required. The resource name for the read access token's secret version. webhook-secret-version-name=rebum. Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=et Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=sed Username of the account Cloud Build will use on Bitbucket Server. webhook-key=stet Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=aliquyam Required. The Bitbucket server config resource that this trigger config maps to. project-key=kasd Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=lorem Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=sit If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=tempor Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=amet Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=sit Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=ipsum Output only. The time when the approval decision was made. approver-account=ipsum Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=et Optional. An optional comment for this manual approval result. decision=elitr Required. The decision of this manual approval. url=eirmod Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=dolor Output only. The state of this build's approval. ..artifacts images=sadipscing A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=dolor Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=dolor Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=consetetur End of time span. start-time=et Start of time span. .... build-trigger-id=sit Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=lorem Output only. Time at which the request to create the build was received. failure-info detail=nonumy Explains the failure issue in more detail using hard-coded text. type=diam The name of the failure. .. finish-time=ipsum Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=invidunt Output only. Unique identifier of the build. images=stet A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=voluptua. Output only. URL to logs for this build in Google Cloud Console. logs-bucket=at Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=diam Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=at Optional. Option to specify how default logs buckets are setup. disk-size-gb=eirmod Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=false Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=sit A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=accusam Option to define build log streaming behavior to Cloud Storage. logging=et Option to specify the logging mode, which determines if and where build logs are stored. machine-type=nonumy Compute Engine machine type on which to run the build. pool name=accusam The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=ut Requested verifiability options. secret-env=voluptua. A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=consetetur Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=dolor Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=amet This field deprecated; please use pool.name instead. .. project-id=et Output only. ID of the project. queue-ttl=aliquyam TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=ipsum Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=gubergren End of time span. start-time=invidunt Start of time span. .. build-step-images=sea List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=duo List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=sea Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=stet IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=sadipscing Directory, relative to the source root, in which to run the build. repository=no Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=tempor The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=ipsum Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=sea The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=sit Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=amet. Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=ipsum Explicit commit SHA to build. dir=at Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=gubergren ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=et Name of the Cloud Source Repository. substitutions=key=invidunt Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=magna Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=gubergren Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=elitr Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=ipsum Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=kasd Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=dolore Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=lorem Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=amet Directory, relative to the source root, in which to run the build. repository=ipsum Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=lorem The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=dolores Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=consetetur The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=stet Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=accusam Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=consetetur Explicit commit SHA to build. dir=takimata Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=nonumy ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=sea Name of the Cloud Source Repository. substitutions=key=eos Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=dolore Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=accusam Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=elitr Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sed Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=labore Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=et Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=eirmod Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sed Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=at Output only. Time at which execution of the build was started. status=stet Output only. Status of the build. status-detail=sit Output only. Customer-readable message about the current status. substitutions=key=ipsum Substitutions data for Build resource. the value will be associated with the given key tags=lorem Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=dolor Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=amet Output only. Time when the trigger was created. description=magna Human-readable description of this trigger. disabled=false If true, the trigger will never automatically execute a build. event-type=invidunt EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=et Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=et A Common Expression Language string. git-file-source bitbucket-server-config=dolor The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=erat The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=dolore The path of the file, with the repo root as the root of the path. repo-type=vero See RepoType above. repository=ea The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=et The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=amet. The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=eirmod Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=sanctus The installationID that emits the GitHub event. name=sed Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=dolor Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=et Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=et If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=eos Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=ea Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=aliquyam Output only. Time when the config was created. enterprise-config host-uri=nonumy Immutable. The URI of the GitlabEnterprise host. service-directory-config service=stet The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=rebum. The SSL certificate to use in requests to GitLab Enterprise instances. .. name=eirmod The resource name for the config. secrets api-access-token-version=dolores Required. The resource name for the api access token\u2019s secret version api-key-version=aliquyam Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=sanctus Required. The resource name for the read access token\u2019s secret version webhook-secret-version=invidunt Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=dolor Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=eos Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=magna The GitLab config resource that this trigger config maps to. project-namespace=no Namespace of the GitLab project. pull-request branch=gubergren Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=erat If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=consetetur Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=elitr Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=justo Output only. Unique identifier of the trigger. ignored-files=lorem ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=labore If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=gubergren If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=vero User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=ea Service account that will make the push request. state=sed Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=sanctus Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=labore The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=amet Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=et If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=sanctus Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=eirmod Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=vero The resource name of the Repo API resource. repository-type=voluptua. Output only. The type of the SCM vendor the repository points to. .. resource-name=sea The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=ipsum The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=sea The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=et The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=gubergren The branch or tag to use. Must start with \"refs/\" (required). repo-type=dolore See RepoType below. repository=ea The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=elitr The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=takimata Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=duo Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=tempor Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=clita Explicit commit SHA to build. dir=sed Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=stet ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=sea Name of the Cloud Source Repository. substitutions=key=clita Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=consetetur Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=dolores Required. Resource name for the secret required as a URL parameter. state=sit Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.","title":"Required Request Value"},{"location":"projects_locations-triggers-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-triggers-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project for which to configure automatic builds.","title":"Optional Method Properties"},{"location":"projects_locations-triggers-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-delete/","text":"Deletes a BuildTrigger by its project ID and trigger ID. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-delete ... Required Scalar Argument <name> (string) The name of the Trigger to delete. Format: projects/{project}/locations/{location}/triggers/{trigger} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project that owns the trigger. -p trigger-id=string Required. ID of the BuildTrigger to delete. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers Delete"},{"location":"projects_locations-triggers-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-delete ...","title":"Scopes"},{"location":"projects_locations-triggers-delete/#required-scalar-argument","text":"<name> (string) The name of the Trigger to delete. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project that owns the trigger. -p trigger-id=string Required. ID of the BuildTrigger to delete.","title":"Optional Method Properties"},{"location":"projects_locations-triggers-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-get/","text":"Returns information about a BuildTrigger . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-get ... Required Scalar Argument <name> (string) The name of the Trigger to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project that owns the trigger. -p trigger-id=string Required. Identifier ( id or name ) of the BuildTrigger to get. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers Get"},{"location":"projects_locations-triggers-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-get ...","title":"Scopes"},{"location":"projects_locations-triggers-get/#required-scalar-argument","text":"<name> (string) The name of the Trigger to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project that owns the trigger. -p trigger-id=string Required. Identifier ( id or name ) of the BuildTrigger to get.","title":"Optional Method Properties"},{"location":"projects_locations-triggers-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-list/","text":"Lists existing BuildTrigger s. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-list ... Required Scalar Argument <parent> (string) The parent of the collection of Triggers . Format: projects/{project}/locations/{location} Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer Number of results to return in the list. -p page-token=string Token to provide to skip to a particular spot in the list. -p project-id=string Required. ID of the project for which to list BuildTriggers. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers List"},{"location":"projects_locations-triggers-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-list ...","title":"Scopes"},{"location":"projects_locations-triggers-list/#required-scalar-argument","text":"<parent> (string) The parent of the collection of Triggers . Format: projects/{project}/locations/{location}","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer Number of results to return in the list. -p page-token=string Token to provide to skip to a particular spot in the list. -p project-id=string Required. ID of the project for which to list BuildTriggers.","title":"Optional Method Properties"},{"location":"projects_locations-triggers-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-patch/","text":"Updates a BuildTrigger by its project ID and trigger ID. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-patch ... Required Scalar Argument <resource-name> (string) The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=true Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=kasd Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=eirmod Time when the config was created. host-uri=dolores Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=aliquyam The resource name for the config. peered-network=dolor Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=vero Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=ea Required. The resource name for the admin access token's secret version. read-access-token-version-name=magna Required. The resource name for the read access token's secret version. webhook-secret-version-name=rebum. Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=amet Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=sea Username of the account Cloud Build will use on Bitbucket Server. webhook-key=sadipscing Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=dolore Required. The Bitbucket server config resource that this trigger config maps to. project-key=amet Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=invidunt Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=invidunt If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=sed Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=et Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=ea Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=sadipscing Output only. The time when the approval decision was made. approver-account=diam Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=at Optional. An optional comment for this manual approval result. decision=at Required. The decision of this manual approval. url=kasd Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=magna Output only. The state of this build's approval. ..artifacts images=amet. A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=est Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=gubergren Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=eos End of time span. start-time=dolore Start of time span. .... build-trigger-id=tempor Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=stet Output only. Time at which the request to create the build was received. failure-info detail=accusam Explains the failure issue in more detail using hard-coded text. type=et The name of the failure. .. finish-time=dolor Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=diam Output only. Unique identifier of the build. images=elitr A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=sea Output only. URL to logs for this build in Google Cloud Console. logs-bucket=vero Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=et Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=sit Optional. Option to specify how default logs buckets are setup. disk-size-gb=lorem Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=true Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=diam A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=diam Option to define build log streaming behavior to Cloud Storage. logging=et Option to specify the logging mode, which determines if and where build logs are stored. machine-type=takimata Compute Engine machine type on which to run the build. pool name=et The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=dolores Requested verifiability options. secret-env=dolores A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=diam Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=ea Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=sea This field deprecated; please use pool.name instead. .. project-id=dolore Output only. ID of the project. queue-ttl=dolores TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=invidunt Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=tempor End of time span. start-time=et Start of time span. .. build-step-images=voluptua. List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=et List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=est Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=stet IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=dolor Directory, relative to the source root, in which to run the build. repository=et Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=labore The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=labore Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=et The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=aliquyam Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=ut Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=amet. Explicit commit SHA to build. dir=gubergren Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=rebum. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=consetetur Name of the Cloud Source Repository. substitutions=key=erat Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=dolor Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=amet. Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=kasd Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=eirmod Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=amet. Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=takimata Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=amet. Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=labore Directory, relative to the source root, in which to run the build. repository=sed Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=sit The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=sit Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=invidunt The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=elitr Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=voluptua. Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=justo Explicit commit SHA to build. dir=amet. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=et ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=gubergren Name of the Cloud Source Repository. substitutions=key=sed Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=no Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=est Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=elitr Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=et Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=consetetur Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=at Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=accusam Output only. Time at which execution of the build was started. status=sit Output only. Status of the build. status-detail=voluptua. Output only. Customer-readable message about the current status. substitutions=key=kasd Substitutions data for Build resource. the value will be associated with the given key tags=no Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=amet. Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=aliquyam Output only. Time when the trigger was created. description=accusam Human-readable description of this trigger. disabled=true If true, the trigger will never automatically execute a build. event-type=duo EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=kasd Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=eos A Common Expression Language string. git-file-source bitbucket-server-config=no The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=kasd The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=sanctus The path of the file, with the repo root as the root of the path. repo-type=gubergren See RepoType above. repository=accusam The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=lorem The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=dolor The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=sanctus Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=sea The installationID that emits the GitHub event. name=diam Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=amet Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=magna Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=accusam If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=tempor Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=amet Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=ipsum Output only. Time when the config was created. enterprise-config host-uri=et Immutable. The URI of the GitlabEnterprise host. service-directory-config service=elitr The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=dolor The SSL certificate to use in requests to GitLab Enterprise instances. .. name=duo The resource name for the config. secrets api-access-token-version=diam Required. The resource name for the api access token\u2019s secret version api-key-version=et Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=lorem Required. The resource name for the read access token\u2019s secret version webhook-secret-version=no Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=sea Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=et Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=voluptua. The GitLab config resource that this trigger config maps to. project-namespace=ipsum Namespace of the GitLab project. pull-request branch=ea Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=ipsum If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=dolores Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=diam Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=sed Output only. Unique identifier of the trigger. ignored-files=lorem ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=magna If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=duo If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=et User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=no Service account that will make the push request. state=sadipscing Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=sit Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=duo The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=stet Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=diam If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=dolore Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=lorem Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=ut The resource name of the Repo API resource. repository-type=est Output only. The type of the SCM vendor the repository points to. .. resource-name=sadipscing The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=sit The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=ipsum The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=amet. The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=et The branch or tag to use. Must start with \"refs/\" (required). repo-type=ut See RepoType below. repository=et The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=et The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=at Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=sed Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=stet Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=sadipscing Explicit commit SHA to build. dir=voluptua. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=rebum. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=sanctus Name of the Cloud Source Repository. substitutions=key=no Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=stet Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=diam Required. Resource name for the secret required as a URL parameter. state=ipsum Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project that owns the trigger. -p trigger-id=string Required. ID of the BuildTrigger to update. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers Patch"},{"location":"projects_locations-triggers-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-patch ...","title":"Scopes"},{"location":"projects_locations-triggers-patch/#required-scalar-argument","text":"<resource-name> (string) The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service.","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=true Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=kasd Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=eirmod Time when the config was created. host-uri=dolores Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=aliquyam The resource name for the config. peered-network=dolor Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=vero Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=ea Required. The resource name for the admin access token's secret version. read-access-token-version-name=magna Required. The resource name for the read access token's secret version. webhook-secret-version-name=rebum. Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=amet Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=sea Username of the account Cloud Build will use on Bitbucket Server. webhook-key=sadipscing Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=dolore Required. The Bitbucket server config resource that this trigger config maps to. project-key=amet Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=invidunt Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=invidunt If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=sed Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=et Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=ea Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=sadipscing Output only. The time when the approval decision was made. approver-account=diam Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=at Optional. An optional comment for this manual approval result. decision=at Required. The decision of this manual approval. url=kasd Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=magna Output only. The state of this build's approval. ..artifacts images=amet. A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=est Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=gubergren Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=eos End of time span. start-time=dolore Start of time span. .... build-trigger-id=tempor Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=stet Output only. Time at which the request to create the build was received. failure-info detail=accusam Explains the failure issue in more detail using hard-coded text. type=et The name of the failure. .. finish-time=dolor Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=diam Output only. Unique identifier of the build. images=elitr A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=sea Output only. URL to logs for this build in Google Cloud Console. logs-bucket=vero Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=et Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=sit Optional. Option to specify how default logs buckets are setup. disk-size-gb=lorem Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=true Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=diam A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=diam Option to define build log streaming behavior to Cloud Storage. logging=et Option to specify the logging mode, which determines if and where build logs are stored. machine-type=takimata Compute Engine machine type on which to run the build. pool name=et The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=dolores Requested verifiability options. secret-env=dolores A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=diam Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=ea Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=sea This field deprecated; please use pool.name instead. .. project-id=dolore Output only. ID of the project. queue-ttl=dolores TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=invidunt Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=tempor End of time span. start-time=et Start of time span. .. build-step-images=voluptua. List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=et List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=est Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=stet IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=dolor Directory, relative to the source root, in which to run the build. repository=et Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=labore The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=labore Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=et The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=aliquyam Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=ut Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=amet. Explicit commit SHA to build. dir=gubergren Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=rebum. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=consetetur Name of the Cloud Source Repository. substitutions=key=erat Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=dolor Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=amet. Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=kasd Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=eirmod Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=amet. Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=takimata Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=amet. Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=labore Directory, relative to the source root, in which to run the build. repository=sed Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=sit The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=sit Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=invidunt The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=elitr Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=voluptua. Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=justo Explicit commit SHA to build. dir=amet. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=et ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=gubergren Name of the Cloud Source Repository. substitutions=key=sed Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=no Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=est Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=elitr Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=et Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=consetetur Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=at Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=accusam Output only. Time at which execution of the build was started. status=sit Output only. Status of the build. status-detail=voluptua. Output only. Customer-readable message about the current status. substitutions=key=kasd Substitutions data for Build resource. the value will be associated with the given key tags=no Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=amet. Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=aliquyam Output only. Time when the trigger was created. description=accusam Human-readable description of this trigger. disabled=true If true, the trigger will never automatically execute a build. event-type=duo EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=kasd Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=eos A Common Expression Language string. git-file-source bitbucket-server-config=no The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=kasd The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=sanctus The path of the file, with the repo root as the root of the path. repo-type=gubergren See RepoType above. repository=accusam The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=lorem The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=dolor The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=sanctus Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=sea The installationID that emits the GitHub event. name=diam Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=amet Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=magna Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=accusam If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=tempor Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=amet Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=ipsum Output only. Time when the config was created. enterprise-config host-uri=et Immutable. The URI of the GitlabEnterprise host. service-directory-config service=elitr The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=dolor The SSL certificate to use in requests to GitLab Enterprise instances. .. name=duo The resource name for the config. secrets api-access-token-version=diam Required. The resource name for the api access token\u2019s secret version api-key-version=et Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=lorem Required. The resource name for the read access token\u2019s secret version webhook-secret-version=no Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=sea Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=et Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=voluptua. The GitLab config resource that this trigger config maps to. project-namespace=ipsum Namespace of the GitLab project. pull-request branch=ea Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=ipsum If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=dolores Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=diam Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=sed Output only. Unique identifier of the trigger. ignored-files=lorem ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=magna If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=duo If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=et User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=no Service account that will make the push request. state=sadipscing Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=sit Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=duo The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=stet Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=diam If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=dolore Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=lorem Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=ut The resource name of the Repo API resource. repository-type=est Output only. The type of the SCM vendor the repository points to. .. resource-name=sadipscing The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=sit The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=ipsum The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=amet. The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=et The branch or tag to use. Must start with \"refs/\" (required). repo-type=ut See RepoType below. repository=et The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=et The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=at Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=sed Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=stet Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=sadipscing Explicit commit SHA to build. dir=voluptua. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=rebum. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=sanctus Name of the Cloud Source Repository. substitutions=key=no Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=stet Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=diam Required. Resource name for the secret required as a URL parameter. state=ipsum Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.","title":"Required Request Value"},{"location":"projects_locations-triggers-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-triggers-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Required. ID of the project that owns the trigger. -p trigger-id=string Required. ID of the BuildTrigger to update. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.","title":"Optional Method Properties"},{"location":"projects_locations-triggers-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-run/","text":"Runs a BuildTrigger at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-run ... Required Scalar Argument <name> (string) The name of the Trigger to run. Format: projects/{project}/locations/{location}/triggers/{trigger} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RunBuildTriggerRequest: project-id: string source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string trigger-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . project-id=eos Required. ID of the project. source branch-name=erat Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=at Explicit commit SHA to build. dir=amet Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=justo ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=eirmod Name of the Cloud Source Repository. substitutions=key=duo Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=sanctus Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. trigger-id=aliquyam Required. ID of the trigger. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers Run"},{"location":"projects_locations-triggers-run/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-triggers-run ...","title":"Scopes"},{"location":"projects_locations-triggers-run/#required-scalar-argument","text":"<name> (string) The name of the Trigger to run. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-run/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RunBuildTriggerRequest: project-id: string source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string trigger-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . project-id=eos Required. ID of the project. source branch-name=erat Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=at Explicit commit SHA to build. dir=amet Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=justo ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=eirmod Name of the Cloud Source Repository. substitutions=key=duo Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=sanctus Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. trigger-id=aliquyam Required. ID of the trigger.","title":"Required Request Value"},{"location":"projects_locations-triggers-run/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-triggers-run/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-run/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-triggers-webhook/","text":"ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger. Required Scalar Argument <name> (string) The name of the ReceiveTriggerWebhook to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger} Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=voluptua. The HTTP Content-Type header value specifying the content type of the body. data=eirmod The HTTP request/response body as raw binary. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Project in which the specified trigger lives -p secret=string Secret token used for authorization if an OAuth token isn't provided. -p trigger=string Name of the trigger to run the payload against Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Triggers Webhook"},{"location":"projects_locations-triggers-webhook/#required-scalar-argument","text":"<name> (string) The name of the ReceiveTriggerWebhook to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Required Scalar Argument"},{"location":"projects_locations-triggers-webhook/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=voluptua. The HTTP Content-Type header value specifying the content type of the body. data=eirmod The HTTP request/response body as raw binary.","title":"Required Request Value"},{"location":"projects_locations-triggers-webhook/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-triggers-webhook/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-triggers-webhook/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string Project in which the specified trigger lives -p secret=string Secret token used for authorization if an OAuth token isn't provided. -p trigger=string Name of the trigger to run the payload against","title":"Optional Method Properties"},{"location":"projects_locations-triggers-webhook/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-worker-pools-create/","text":"Creates a WorkerPool . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-create ... Required Scalar Argument <parent> (string) Required. The parent resource where this worker pool will be created. Format: projects/{project}/locations/{location} . Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: WorkerPool: annotations: { string: string } create-time: string delete-time: string display-name: string etag: string name: string private-pool-v1-config: network-config: egress-option: string peered-network: string peered-network-ip-range: string private-service-connect: network-attachment: string public-ip-address-disabled: boolean route-all-traffic: boolean worker-config: disk-size-gb: string machine-type: string state: string uid: string update-time: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . annotations=key=sanctus User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations. the value will be associated with the given key create-time=rebum. Output only. Time at which the request to create the WorkerPool was received. delete-time=kasd Output only. Time at which the request to delete the WorkerPool was received. display-name=voluptua. A user-specified, human-readable name for the WorkerPool . If provided, this value must be 1-63 characters. etag=erat Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding. name=nonumy Output only. The resource name of the WorkerPool , with format projects/{project}/locations/{location}/workerPools/{worker_pool} . The value of {worker_pool} is provided by worker_pool_id in CreateWorkerPool request and the value of {location} is determined by the endpoint accessed. private-pool-v1-config.network-config egress-option=magna Option to configure network egress for the workers. peered-network=gubergren Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the service producer network. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number, such as 12345 , and {network} is the name of a VPC network in the project. See Understanding network configuration options peered-network-ip-range=lorem Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. ..private-service-connect network-attachment=aliquyam Required. Immutable. The network attachment that the worker network interface is peered to. Must be in the format projects/{project}/regions/{region}/networkAttachments/{networkAttachment} . The region of network attachment must be the same as the worker pool. See Network Attachments public-ip-address-disabled=true Required. Immutable. Disable public IP on the primary network interface. If true, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured. If false, workers are created with a public address which allows for public internet egress. The public address only applies to traffic through the primary network interface. If route_all_traffic is set to true, all traffic will go through the non-primary network interface, this boolean has no effect. route-all-traffic=true Immutable. Route all traffic through PSC interface. Enable this if you want full control of traffic in the private pool. Configure Cloud NAT for the subnet of network attachment if you need to access public Internet. If false, Only route private IPs, e.g. 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 through PSC interface. ..worker-config disk-size-gb=consetetur Size of the disk attached to the worker, in GB. See Worker pool config file . Specify a value of up to 2000. If 0 is specified, Cloud Build will use a standard disk size. machine-type=amet Machine type of a worker, such as e2-medium . See Worker pool config file . If left blank, Cloud Build will use a sensible default. ... state=magna Output only. WorkerPool state. uid=sanctus Output only. A unique identifier for the WorkerPool . update-time=clita Output only. Time at which the request to update the WorkerPool was received. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p validate-only=boolean If set, validate the request and preview the response, but do not actually post it. -p worker-pool-id=string Required. Immutable. The ID to use for the WorkerPool , which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Worker Pools Create"},{"location":"projects_locations-worker-pools-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-create ...","title":"Scopes"},{"location":"projects_locations-worker-pools-create/#required-scalar-argument","text":"<parent> (string) Required. The parent resource where this worker pool will be created. Format: projects/{project}/locations/{location} .","title":"Required Scalar Argument"},{"location":"projects_locations-worker-pools-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: WorkerPool: annotations: { string: string } create-time: string delete-time: string display-name: string etag: string name: string private-pool-v1-config: network-config: egress-option: string peered-network: string peered-network-ip-range: string private-service-connect: network-attachment: string public-ip-address-disabled: boolean route-all-traffic: boolean worker-config: disk-size-gb: string machine-type: string state: string uid: string update-time: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . annotations=key=sanctus User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations. the value will be associated with the given key create-time=rebum. Output only. Time at which the request to create the WorkerPool was received. delete-time=kasd Output only. Time at which the request to delete the WorkerPool was received. display-name=voluptua. A user-specified, human-readable name for the WorkerPool . If provided, this value must be 1-63 characters. etag=erat Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding. name=nonumy Output only. The resource name of the WorkerPool , with format projects/{project}/locations/{location}/workerPools/{worker_pool} . The value of {worker_pool} is provided by worker_pool_id in CreateWorkerPool request and the value of {location} is determined by the endpoint accessed. private-pool-v1-config.network-config egress-option=magna Option to configure network egress for the workers. peered-network=gubergren Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the service producer network. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number, such as 12345 , and {network} is the name of a VPC network in the project. See Understanding network configuration options peered-network-ip-range=lorem Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. ..private-service-connect network-attachment=aliquyam Required. Immutable. The network attachment that the worker network interface is peered to. Must be in the format projects/{project}/regions/{region}/networkAttachments/{networkAttachment} . The region of network attachment must be the same as the worker pool. See Network Attachments public-ip-address-disabled=true Required. Immutable. Disable public IP on the primary network interface. If true, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured. If false, workers are created with a public address which allows for public internet egress. The public address only applies to traffic through the primary network interface. If route_all_traffic is set to true, all traffic will go through the non-primary network interface, this boolean has no effect. route-all-traffic=true Immutable. Route all traffic through PSC interface. Enable this if you want full control of traffic in the private pool. Configure Cloud NAT for the subnet of network attachment if you need to access public Internet. If false, Only route private IPs, e.g. 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 through PSC interface. ..worker-config disk-size-gb=consetetur Size of the disk attached to the worker, in GB. See Worker pool config file . Specify a value of up to 2000. If 0 is specified, Cloud Build will use a standard disk size. machine-type=amet Machine type of a worker, such as e2-medium . See Worker pool config file . If left blank, Cloud Build will use a sensible default. ... state=magna Output only. WorkerPool state. uid=sanctus Output only. A unique identifier for the WorkerPool . update-time=clita Output only. Time at which the request to update the WorkerPool was received.","title":"Required Request Value"},{"location":"projects_locations-worker-pools-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-worker-pools-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-worker-pools-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p validate-only=boolean If set, validate the request and preview the response, but do not actually post it. -p worker-pool-id=string Required. Immutable. The ID to use for the WorkerPool , which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.","title":"Optional Method Properties"},{"location":"projects_locations-worker-pools-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-worker-pools-delete/","text":"Deletes a WorkerPool . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-delete ... Required Scalar Argument <name> (string) Required. The name of the WorkerPool to delete. Format: projects/{project}/locations/{location}/workerPools/{workerPool} . Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p allow-missing=boolean If set to true, and the WorkerPool is not found, the request will succeed but no action will be taken on the server. -p etag=string Optional. If provided, it must match the server's etag on the workerpool for the request to be processed. -p validate-only=boolean If set, validate the request and preview the response, but do not actually post it. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Worker Pools Delete"},{"location":"projects_locations-worker-pools-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-delete ...","title":"Scopes"},{"location":"projects_locations-worker-pools-delete/#required-scalar-argument","text":"<name> (string) Required. The name of the WorkerPool to delete. Format: projects/{project}/locations/{location}/workerPools/{workerPool} .","title":"Required Scalar Argument"},{"location":"projects_locations-worker-pools-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-worker-pools-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p allow-missing=boolean If set to true, and the WorkerPool is not found, the request will succeed but no action will be taken on the server. -p etag=string Optional. If provided, it must match the server's etag on the workerpool for the request to be processed. -p validate-only=boolean If set, validate the request and preview the response, but do not actually post it.","title":"Optional Method Properties"},{"location":"projects_locations-worker-pools-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-worker-pools-get/","text":"Returns details of a WorkerPool . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-get ... Required Scalar Argument <name> (string) Required. The name of the WorkerPool to retrieve. Format: projects/{project}/locations/{location}/workerPools/{workerPool} . Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Worker Pools Get"},{"location":"projects_locations-worker-pools-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-get ...","title":"Scopes"},{"location":"projects_locations-worker-pools-get/#required-scalar-argument","text":"<name> (string) Required. The name of the WorkerPool to retrieve. Format: projects/{project}/locations/{location}/workerPools/{workerPool} .","title":"Required Scalar Argument"},{"location":"projects_locations-worker-pools-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-worker-pools-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-worker-pools-list/","text":"Lists WorkerPool s. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-list ... Required Scalar Argument <parent> (string) Required. The parent of the collection of WorkerPools . Format: projects/{project}/locations/{location} . Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of WorkerPool s to return. The service may return fewer than this value. If omitted, the server will use a sensible default. -p page-token=string A page token, received from a previous ListWorkerPools call. Provide this to retrieve the subsequent page. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Worker Pools List"},{"location":"projects_locations-worker-pools-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-list ...","title":"Scopes"},{"location":"projects_locations-worker-pools-list/#required-scalar-argument","text":"<parent> (string) Required. The parent of the collection of WorkerPools . Format: projects/{project}/locations/{location} .","title":"Required Scalar Argument"},{"location":"projects_locations-worker-pools-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-worker-pools-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of WorkerPool s to return. The service may return fewer than this value. If omitted, the server will use a sensible default. -p page-token=string A page token, received from a previous ListWorkerPools call. Provide this to retrieve the subsequent page.","title":"Optional Method Properties"},{"location":"projects_locations-worker-pools-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_locations-worker-pools-patch/","text":"Updates a WorkerPool . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-patch ... Required Scalar Argument <name> (string) Output only. The resource name of the WorkerPool , with format projects/{project}/locations/{location}/workerPools/{worker_pool} . The value of {worker_pool} is provided by worker_pool_id in CreateWorkerPool request and the value of {location} is determined by the endpoint accessed. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: WorkerPool: annotations: { string: string } create-time: string delete-time: string display-name: string etag: string name: string private-pool-v1-config: network-config: egress-option: string peered-network: string peered-network-ip-range: string private-service-connect: network-attachment: string public-ip-address-disabled: boolean route-all-traffic: boolean worker-config: disk-size-gb: string machine-type: string state: string uid: string update-time: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . annotations=key=invidunt User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations. the value will be associated with the given key create-time=accusam Output only. Time at which the request to create the WorkerPool was received. delete-time=amet. Output only. Time at which the request to delete the WorkerPool was received. display-name=sanctus A user-specified, human-readable name for the WorkerPool . If provided, this value must be 1-63 characters. etag=invidunt Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding. name=sit Output only. The resource name of the WorkerPool , with format projects/{project}/locations/{location}/workerPools/{worker_pool} . The value of {worker_pool} is provided by worker_pool_id in CreateWorkerPool request and the value of {location} is determined by the endpoint accessed. private-pool-v1-config.network-config egress-option=sed Option to configure network egress for the workers. peered-network=duo Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the service producer network. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number, such as 12345 , and {network} is the name of a VPC network in the project. See Understanding network configuration options peered-network-ip-range=et Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. ..private-service-connect network-attachment=dolor Required. Immutable. The network attachment that the worker network interface is peered to. Must be in the format projects/{project}/regions/{region}/networkAttachments/{networkAttachment} . The region of network attachment must be the same as the worker pool. See Network Attachments public-ip-address-disabled=true Required. Immutable. Disable public IP on the primary network interface. If true, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured. If false, workers are created with a public address which allows for public internet egress. The public address only applies to traffic through the primary network interface. If route_all_traffic is set to true, all traffic will go through the non-primary network interface, this boolean has no effect. route-all-traffic=false Immutable. Route all traffic through PSC interface. Enable this if you want full control of traffic in the private pool. Configure Cloud NAT for the subnet of network attachment if you need to access public Internet. If false, Only route private IPs, e.g. 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 through PSC interface. ..worker-config disk-size-gb=justo Size of the disk attached to the worker, in GB. See Worker pool config file . Specify a value of up to 2000. If 0 is specified, Cloud Build will use a standard disk size. machine-type=sadipscing Machine type of a worker, such as e2-medium . See Worker pool config file . If left blank, Cloud Build will use a sensible default. ... state=accusam Output only. WorkerPool state. uid=takimata Output only. A unique identifier for the WorkerPool . update-time=invidunt Output only. Time at which the request to update the WorkerPool was received. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string A mask specifying which fields in worker_pool to update. -p validate-only=boolean If set, validate the request and preview the response, but do not actually post it. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Locations Worker Pools Patch"},{"location":"projects_locations-worker-pools-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects locations-worker-pools-patch ...","title":"Scopes"},{"location":"projects_locations-worker-pools-patch/#required-scalar-argument","text":"<name> (string) Output only. The resource name of the WorkerPool , with format projects/{project}/locations/{location}/workerPools/{worker_pool} . The value of {worker_pool} is provided by worker_pool_id in CreateWorkerPool request and the value of {location} is determined by the endpoint accessed.","title":"Required Scalar Argument"},{"location":"projects_locations-worker-pools-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: WorkerPool: annotations: { string: string } create-time: string delete-time: string display-name: string etag: string name: string private-pool-v1-config: network-config: egress-option: string peered-network: string peered-network-ip-range: string private-service-connect: network-attachment: string public-ip-address-disabled: boolean route-all-traffic: boolean worker-config: disk-size-gb: string machine-type: string state: string uid: string update-time: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . annotations=key=invidunt User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations. the value will be associated with the given key create-time=accusam Output only. Time at which the request to create the WorkerPool was received. delete-time=amet. Output only. Time at which the request to delete the WorkerPool was received. display-name=sanctus A user-specified, human-readable name for the WorkerPool . If provided, this value must be 1-63 characters. etag=invidunt Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding. name=sit Output only. The resource name of the WorkerPool , with format projects/{project}/locations/{location}/workerPools/{worker_pool} . The value of {worker_pool} is provided by worker_pool_id in CreateWorkerPool request and the value of {location} is determined by the endpoint accessed. private-pool-v1-config.network-config egress-option=sed Option to configure network egress for the workers. peered-network=duo Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the service producer network. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number, such as 12345 , and {network} is the name of a VPC network in the project. See Understanding network configuration options peered-network-ip-range=et Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. ..private-service-connect network-attachment=dolor Required. Immutable. The network attachment that the worker network interface is peered to. Must be in the format projects/{project}/regions/{region}/networkAttachments/{networkAttachment} . The region of network attachment must be the same as the worker pool. See Network Attachments public-ip-address-disabled=true Required. Immutable. Disable public IP on the primary network interface. If true, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured. If false, workers are created with a public address which allows for public internet egress. The public address only applies to traffic through the primary network interface. If route_all_traffic is set to true, all traffic will go through the non-primary network interface, this boolean has no effect. route-all-traffic=false Immutable. Route all traffic through PSC interface. Enable this if you want full control of traffic in the private pool. Configure Cloud NAT for the subnet of network attachment if you need to access public Internet. If false, Only route private IPs, e.g. 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 through PSC interface. ..worker-config disk-size-gb=justo Size of the disk attached to the worker, in GB. See Worker pool config file . Specify a value of up to 2000. If 0 is specified, Cloud Build will use a standard disk size. machine-type=sadipscing Machine type of a worker, such as e2-medium . See Worker pool config file . If left blank, Cloud Build will use a sensible default. ... state=accusam Output only. WorkerPool state. uid=takimata Output only. A unique identifier for the WorkerPool . update-time=invidunt Output only. Time at which the request to update the WorkerPool was received.","title":"Required Request Value"},{"location":"projects_locations-worker-pools-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_locations-worker-pools-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_locations-worker-pools-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string A mask specifying which fields in worker_pool to update. -p validate-only=boolean If set, validate the request and preview the response, but do not actually post it.","title":"Optional Method Properties"},{"location":"projects_locations-worker-pools-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-create/","text":"Creates a new BuildTrigger . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-create ... Required Scalar Argument <project-id> (string) Required. ID of the project for which to configure automatic builds. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=true Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=sed Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=justo Time when the config was created. host-uri=amet Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=sed The resource name for the config. peered-network=ut Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=et Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=kasd Required. The resource name for the admin access token's secret version. read-access-token-version-name=gubergren Required. The resource name for the read access token's secret version. webhook-secret-version-name=et Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=at Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=ut Username of the account Cloud Build will use on Bitbucket Server. webhook-key=consetetur Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=at Required. The Bitbucket server config resource that this trigger config maps to. project-key=et Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=dolor Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=clita If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=amet Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=dolore Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=clita Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=diam Output only. The time when the approval decision was made. approver-account=sanctus Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=ipsum Optional. An optional comment for this manual approval result. decision=lorem Required. The decision of this manual approval. url=sed Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=tempor Output only. The state of this build's approval. ..artifacts images=et A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=et Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=sadipscing Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=vero End of time span. start-time=sed Start of time span. .... build-trigger-id=et Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=sea Output only. Time at which the request to create the build was received. failure-info detail=ut Explains the failure issue in more detail using hard-coded text. type=et The name of the failure. .. finish-time=sanctus Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=magna Output only. Unique identifier of the build. images=magna A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=ea Output only. URL to logs for this build in Google Cloud Console. logs-bucket=no Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=aliquyam Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=dolores Optional. Option to specify how default logs buckets are setup. disk-size-gb=invidunt Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=true Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=stet A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=ut Option to define build log streaming behavior to Cloud Storage. logging=consetetur Option to specify the logging mode, which determines if and where build logs are stored. machine-type=amet Compute Engine machine type on which to run the build. pool name=vero The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=ipsum Requested verifiability options. secret-env=no A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=rebum. Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=est Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=rebum. This field deprecated; please use pool.name instead. .. project-id=nonumy Output only. ID of the project. queue-ttl=rebum. TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=et Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=et End of time span. start-time=aliquyam Start of time span. .. build-step-images=sanctus List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=sed List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=tempor Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=dolore IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=dolore Directory, relative to the source root, in which to run the build. repository=ipsum Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=takimata The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=justo Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=ea The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=ipsum Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=diam Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=sed Explicit commit SHA to build. dir=justo Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=et ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=dolor Name of the Cloud Source Repository. substitutions=key=dolores Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=amet Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=consetetur Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=kasd Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=at Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=rebum. Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=invidunt Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=gubergren Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=kasd Directory, relative to the source root, in which to run the build. repository=et Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=kasd The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=sit Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=labore The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=et Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=sed Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=dolore Explicit commit SHA to build. dir=dolores Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=no ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=ut Name of the Cloud Source Repository. substitutions=key=dolore Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=takimata Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=invidunt Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=sed Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=consetetur Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=lorem Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=rebum. Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sadipscing Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=stet Output only. Time at which execution of the build was started. status=et Output only. Status of the build. status-detail=diam Output only. Customer-readable message about the current status. substitutions=key=et Substitutions data for Build resource. the value will be associated with the given key tags=labore Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=stet Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=dolor Output only. Time when the trigger was created. description=sadipscing Human-readable description of this trigger. disabled=true If true, the trigger will never automatically execute a build. event-type=tempor EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=ipsum Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=diam A Common Expression Language string. git-file-source bitbucket-server-config=ea The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=erat The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=accusam The path of the file, with the repo root as the root of the path. repo-type=magna See RepoType above. repository=ipsum The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=gubergren The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=kasd The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=sit Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=sed The installationID that emits the GitHub event. name=ea Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=sit Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=lorem Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=sed If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=justo Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=justo Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=est Output only. Time when the config was created. enterprise-config host-uri=sea Immutable. The URI of the GitlabEnterprise host. service-directory-config service=magna The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=et The SSL certificate to use in requests to GitLab Enterprise instances. .. name=ipsum The resource name for the config. secrets api-access-token-version=ipsum Required. The resource name for the api access token\u2019s secret version api-key-version=dolor Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=elitr Required. The resource name for the read access token\u2019s secret version webhook-secret-version=et Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=amet. Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=duo Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=dolore The GitLab config resource that this trigger config maps to. project-namespace=takimata Namespace of the GitLab project. pull-request branch=justo Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=eirmod If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=et Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=lorem Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=et Output only. Unique identifier of the trigger. ignored-files=lorem ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=dolores If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=eos If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=magna User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=stet Service account that will make the push request. state=kasd Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=stet Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=sed The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=eirmod Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=ea If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=ea Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=dolores Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=justo The resource name of the Repo API resource. repository-type=clita Output only. The type of the SCM vendor the repository points to. .. resource-name=stet The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=sea The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=sit The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=sed The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=et The branch or tag to use. Must start with \"refs/\" (required). repo-type=no See RepoType below. repository=sit The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=labore The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=sea Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=sea Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=sadipscing Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=justo Explicit commit SHA to build. dir=aliquyam Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=duo ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=labore Name of the Cloud Source Repository. substitutions=key=eos Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=invidunt Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=at Required. Resource name for the secret required as a URL parameter. state=sea Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p parent=string The parent resource where this trigger will be created. Format: projects/{project}/locations/{location} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers Create"},{"location":"projects_triggers-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-create ...","title":"Scopes"},{"location":"projects_triggers-create/#required-scalar-argument","text":"<project-id> (string) Required. ID of the project for which to configure automatic builds.","title":"Required Scalar Argument"},{"location":"projects_triggers-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=true Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=sed Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=justo Time when the config was created. host-uri=amet Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=sed The resource name for the config. peered-network=ut Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=et Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=kasd Required. The resource name for the admin access token's secret version. read-access-token-version-name=gubergren Required. The resource name for the read access token's secret version. webhook-secret-version-name=et Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=at Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=ut Username of the account Cloud Build will use on Bitbucket Server. webhook-key=consetetur Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=at Required. The Bitbucket server config resource that this trigger config maps to. project-key=et Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=dolor Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=clita If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=amet Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=dolore Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=clita Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=false Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=diam Output only. The time when the approval decision was made. approver-account=sanctus Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=ipsum Optional. An optional comment for this manual approval result. decision=lorem Required. The decision of this manual approval. url=sed Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=tempor Output only. The state of this build's approval. ..artifacts images=et A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=et Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=sadipscing Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=vero End of time span. start-time=sed Start of time span. .... build-trigger-id=et Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=sea Output only. Time at which the request to create the build was received. failure-info detail=ut Explains the failure issue in more detail using hard-coded text. type=et The name of the failure. .. finish-time=sanctus Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=magna Output only. Unique identifier of the build. images=magna A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=ea Output only. URL to logs for this build in Google Cloud Console. logs-bucket=no Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=aliquyam Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=true Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=dolores Optional. Option to specify how default logs buckets are setup. disk-size-gb=invidunt Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=true Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=stet A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=ut Option to define build log streaming behavior to Cloud Storage. logging=consetetur Option to specify the logging mode, which determines if and where build logs are stored. machine-type=amet Compute Engine machine type on which to run the build. pool name=vero The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=ipsum Requested verifiability options. secret-env=no A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=rebum. Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=est Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=rebum. This field deprecated; please use pool.name instead. .. project-id=nonumy Output only. ID of the project. queue-ttl=rebum. TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=et Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=et End of time span. start-time=aliquyam Start of time span. .. build-step-images=sanctus List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=sed List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=tempor Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=dolore IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=dolore Directory, relative to the source root, in which to run the build. repository=ipsum Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=takimata The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=justo Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=ea The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=ipsum Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=diam Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=sed Explicit commit SHA to build. dir=justo Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=true Only trigger a build if the revision regex does NOT match the revision regex. project-id=et ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=dolor Name of the Cloud Source Repository. substitutions=key=dolores Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=amet Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=consetetur Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=kasd Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=at Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=rebum. Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=invidunt Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=gubergren Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=kasd Directory, relative to the source root, in which to run the build. repository=et Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=kasd The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=sit Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=labore The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=et Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=sed Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=dolore Explicit commit SHA to build. dir=dolores Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=no ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=ut Name of the Cloud Source Repository. substitutions=key=dolore Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=takimata Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=invidunt Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=sed Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=consetetur Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=lorem Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=rebum. Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=sadipscing Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=stet Output only. Time at which execution of the build was started. status=et Output only. Status of the build. status-detail=diam Output only. Customer-readable message about the current status. substitutions=key=et Substitutions data for Build resource. the value will be associated with the given key tags=labore Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=stet Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=dolor Output only. Time when the trigger was created. description=sadipscing Human-readable description of this trigger. disabled=true If true, the trigger will never automatically execute a build. event-type=tempor EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=ipsum Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=diam A Common Expression Language string. git-file-source bitbucket-server-config=ea The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=erat The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=accusam The path of the file, with the repo root as the root of the path. repo-type=magna See RepoType above. repository=ipsum The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=gubergren The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=kasd The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=sit Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=sed The installationID that emits the GitHub event. name=ea Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=sit Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=lorem Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=sed If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=justo Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=justo Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=est Output only. Time when the config was created. enterprise-config host-uri=sea Immutable. The URI of the GitlabEnterprise host. service-directory-config service=magna The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=et The SSL certificate to use in requests to GitLab Enterprise instances. .. name=ipsum The resource name for the config. secrets api-access-token-version=ipsum Required. The resource name for the api access token\u2019s secret version api-key-version=dolor Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=elitr Required. The resource name for the read access token\u2019s secret version webhook-secret-version=et Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=amet. Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=duo Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=dolore The GitLab config resource that this trigger config maps to. project-namespace=takimata Namespace of the GitLab project. pull-request branch=justo Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=eirmod If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=et Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=lorem Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=et Output only. Unique identifier of the trigger. ignored-files=lorem ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=dolores If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=eos If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=magna User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=stet Service account that will make the push request. state=kasd Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=stet Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=sed The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=eirmod Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=ea If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=ea Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=dolores Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=justo The resource name of the Repo API resource. repository-type=clita Output only. The type of the SCM vendor the repository points to. .. resource-name=stet The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=sea The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=sit The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=sed The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=et The branch or tag to use. Must start with \"refs/\" (required). repo-type=no See RepoType below. repository=sit The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=labore The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=sea Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=sea Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=sadipscing Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=justo Explicit commit SHA to build. dir=aliquyam Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=duo ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=labore Name of the Cloud Source Repository. substitutions=key=eos Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=invidunt Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=at Required. Resource name for the secret required as a URL parameter. state=sea Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.","title":"Required Request Value"},{"location":"projects_triggers-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_triggers-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p parent=string The parent resource where this trigger will be created. Format: projects/{project}/locations/{location}","title":"Optional Method Properties"},{"location":"projects_triggers-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-delete/","text":"Deletes a BuildTrigger by its project ID and trigger ID. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-delete ... Required Scalar Arguments <project-id> (string) Required. ID of the project that owns the trigger. <trigger-id> (string) Required. ID of the BuildTrigger to delete. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Trigger to delete. Format: projects/{project}/locations/{location}/triggers/{trigger} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers Delete"},{"location":"projects_triggers-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-delete ...","title":"Scopes"},{"location":"projects_triggers-delete/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project that owns the trigger. <trigger-id> (string) Required. ID of the BuildTrigger to delete.","title":"Required Scalar Arguments"},{"location":"projects_triggers-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Trigger to delete. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Optional Method Properties"},{"location":"projects_triggers-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-get/","text":"Returns information about a BuildTrigger . Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-get ... Required Scalar Arguments <project-id> (string) Required. ID of the project that owns the trigger. <trigger-id> (string) Required. Identifier ( id or name ) of the BuildTrigger to get. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Trigger to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers Get"},{"location":"projects_triggers-get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-get ...","title":"Scopes"},{"location":"projects_triggers-get/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project that owns the trigger. <trigger-id> (string) Required. Identifier ( id or name ) of the BuildTrigger to get.","title":"Required Scalar Arguments"},{"location":"projects_triggers-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Trigger to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Optional Method Properties"},{"location":"projects_triggers-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-list/","text":"Lists existing BuildTrigger s. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-list ... Required Scalar Argument <project-id> (string) Required. ID of the project for which to list BuildTriggers. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer Number of results to return in the list. -p page-token=string Token to provide to skip to a particular spot in the list. -p parent=string The parent of the collection of Triggers . Format: projects/{project}/locations/{location} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers List"},{"location":"projects_triggers-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-list ...","title":"Scopes"},{"location":"projects_triggers-list/#required-scalar-argument","text":"<project-id> (string) Required. ID of the project for which to list BuildTriggers.","title":"Required Scalar Argument"},{"location":"projects_triggers-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer Number of results to return in the list. -p page-token=string Token to provide to skip to a particular spot in the list. -p parent=string The parent of the collection of Triggers . Format: projects/{project}/locations/{location}","title":"Optional Method Properties"},{"location":"projects_triggers-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-patch/","text":"Updates a BuildTrigger by its project ID and trigger ID. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-patch ... Required Scalar Arguments <project-id> (string) Required. ID of the project that owns the trigger. <trigger-id> (string) Required. ID of the BuildTrigger to update. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=true Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=sed Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=et Time when the config was created. host-uri=et Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=duo The resource name for the config. peered-network=dolor Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=voluptua. Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=magna Required. The resource name for the admin access token's secret version. read-access-token-version-name=est Required. The resource name for the read access token's secret version. webhook-secret-version-name=voluptua. Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=voluptua. Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=tempor Username of the account Cloud Build will use on Bitbucket Server. webhook-key=takimata Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=ut Required. The Bitbucket server config resource that this trigger config maps to. project-key=no Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=gubergren Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=ut If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=lorem Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=sed Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=rebum. Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=sit Output only. The time when the approval decision was made. approver-account=no Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=kasd Optional. An optional comment for this manual approval result. decision=stet Required. The decision of this manual approval. url=accusam Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=lorem Output only. The state of this build's approval. ..artifacts images=et A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=nonumy Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=kasd Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=et End of time span. start-time=amet Start of time span. .... build-trigger-id=et Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=dolor Output only. Time at which the request to create the build was received. failure-info detail=elitr Explains the failure issue in more detail using hard-coded text. type=sanctus The name of the failure. .. finish-time=dolor Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=sea Output only. Unique identifier of the build. images=sanctus A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=sit Output only. URL to logs for this build in Google Cloud Console. logs-bucket=est Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=nonumy Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=false Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=invidunt Optional. Option to specify how default logs buckets are setup. disk-size-gb=takimata Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=true Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=tempor A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=nonumy Option to define build log streaming behavior to Cloud Storage. logging=sanctus Option to specify the logging mode, which determines if and where build logs are stored. machine-type=labore Compute Engine machine type on which to run the build. pool name=est The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=sadipscing Requested verifiability options. secret-env=accusam A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=elitr Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=sit Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=invidunt This field deprecated; please use pool.name instead. .. project-id=dolore Output only. ID of the project. queue-ttl=et TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=tempor Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=nonumy End of time span. start-time=labore Start of time span. .. build-step-images=et List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=et List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=nonumy Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=sit IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=lorem Directory, relative to the source root, in which to run the build. repository=amet. Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=kasd The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=elitr Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=sea The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=duo Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=sea Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=stet Explicit commit SHA to build. dir=erat Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=no ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=eirmod Name of the Cloud Source Repository. substitutions=key=accusam Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=et Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=lorem Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=tempor Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=lorem Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=vero Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=at Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=duo Directory, relative to the source root, in which to run the build. repository=ea Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=et The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=lorem Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=justo The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=et Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=labore Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=ipsum Explicit commit SHA to build. dir=aliquyam Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=erat ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=diam Name of the Cloud Source Repository. substitutions=key=et Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=ipsum Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=et Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=dolor Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=amet Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=magna Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=gubergren Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=dolor Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=est Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=eirmod Output only. Time at which execution of the build was started. status=invidunt Output only. Status of the build. status-detail=consetetur Output only. Customer-readable message about the current status. substitutions=key=duo Substitutions data for Build resource. the value will be associated with the given key tags=est Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=erat Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=duo Output only. Time when the trigger was created. description=sed Human-readable description of this trigger. disabled=true If true, the trigger will never automatically execute a build. event-type=gubergren EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=takimata Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=et A Common Expression Language string. git-file-source bitbucket-server-config=erat The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=sea The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=vero The path of the file, with the repo root as the root of the path. repo-type=diam See RepoType above. repository=takimata The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=voluptua. The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=et The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=sea Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=aliquyam The installationID that emits the GitHub event. name=ut Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=magna Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=tempor Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=dolor If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=et Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=no Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=amet Output only. Time when the config was created. enterprise-config host-uri=vero Immutable. The URI of the GitlabEnterprise host. service-directory-config service=duo The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=dolor The SSL certificate to use in requests to GitLab Enterprise instances. .. name=est The resource name for the config. secrets api-access-token-version=et Required. The resource name for the api access token\u2019s secret version api-key-version=ipsum Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=stet Required. The resource name for the read access token\u2019s secret version webhook-secret-version=stet Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=amet. Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=ut Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=duo The GitLab config resource that this trigger config maps to. project-namespace=sed Namespace of the GitLab project. pull-request branch=accusam Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=accusam If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=lorem Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=kasd Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=justo Output only. Unique identifier of the trigger. ignored-files=duo ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=nonumy If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=sea If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=eirmod User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=amet Service account that will make the push request. state=sed Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=dolor Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=sea The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=sadipscing Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=nonumy If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=labore Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=justo Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=sed The resource name of the Repo API resource. repository-type=sit Output only. The type of the SCM vendor the repository points to. .. resource-name=ipsum The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=sanctus The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=sed The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=justo The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=elitr The branch or tag to use. Must start with \"refs/\" (required). repo-type=sed See RepoType below. repository=sed The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=dolor The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=no Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=rebum. Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=ipsum Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=rebum. Explicit commit SHA to build. dir=lorem Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=no ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=et Name of the Cloud Source Repository. substitutions=key=sanctus Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=no Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=et Required. Resource name for the secret required as a URL parameter. state=dolor Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers Patch"},{"location":"projects_triggers-patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-patch ...","title":"Scopes"},{"location":"projects_triggers-patch/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project that owns the trigger. <trigger-id> (string) Required. ID of the BuildTrigger to update.","title":"Required Scalar Arguments"},{"location":"projects_triggers-patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BuildTrigger: approval-config: approval-required: boolean autodetect: boolean bitbucket-server-trigger-config: bitbucket-server-config: api-key: string create-time: string host-uri: string name: string peered-network: string peered-network-ip-range: string secrets: admin-access-token-version-name: string read-access-token-version-name: string webhook-secret-version-name: string ssl-ca: string username: string webhook-key: string bitbucket-server-config-resource: string project-key: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repo-slug: string build: approval: config: approval-required: boolean result: approval-time: string approver-account: string comment: string decision: string url: string state: string artifacts: images: [string] objects: location: string paths: [string] timing: end-time: string start-time: string build-trigger-id: string create-time: string failure-info: detail: string type: string finish-time: string id: string images: [string] log-url: string logs-bucket: string name: string options: automap-substitutions: boolean default-logs-bucket-behavior: string disk-size-gb: string dynamic-substitutions: boolean env: [string] log-streaming-option: string logging: string machine-type: string pool: name: string requested-verify-option: string secret-env: [string] source-provenance-hash: [string] substitution-option: string worker-pool: string project-id: string queue-ttl: string results: artifact-manifest: string artifact-timing: end-time: string start-time: string build-step-images: [string] build-step-outputs: [string] num-artifacts: string service-account: string source: connected-repository: dir: string repository: string revision: string git-source: dir: string revision: string url: string repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string storage-source: bucket: string generation: string object: string source-fetcher: string storage-source-manifest: bucket: string generation: string object: string source-provenance: resolved-connected-repository: dir: string repository: string revision: string resolved-git-source: dir: string revision: string url: string resolved-repo-source: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string resolved-storage-source: bucket: string generation: string object: string source-fetcher: string resolved-storage-source-manifest: bucket: string generation: string object: string start-time: string status: string status-detail: string substitutions: { string: string } tags: [string] timeout: string create-time: string description: string disabled: boolean event-type: string filename: string filter: string git-file-source: bitbucket-server-config: string github-enterprise-config: string path: string repo-type: string repository: string revision: string uri: string github: enterprise-config-resource-name: string installation-id: string name: string owner: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string gitlab-enterprise-events-config: gitlab-config: create-time: string enterprise-config: host-uri: string service-directory-config: service: string ssl-ca: string name: string secrets: api-access-token-version: string api-key-version: string read-access-token-version: string webhook-secret-version: string username: string webhook-key: string gitlab-config-resource: string project-namespace: string pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string id: string ignored-files: [string] include-build-logs: string included-files: [string] name: string pubsub-config: service-account-email: string state: string subscription: string topic: string repository-event-config: pull-request: branch: string comment-control: string invert-regex: boolean push: branch: string invert-regex: boolean tag: string repository: string repository-type: string resource-name: string service-account: string source-to-build: bitbucket-server-config: string github-enterprise-config: string ref: string repo-type: string repository: string uri: string substitutions: { string: string } tags: [string] trigger-template: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string webhook-config: secret: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .approval-config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. .. autodetect=true Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers. bitbucket-server-trigger-config.bitbucket-server-config api-key=sed Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. create-time=et Time when the config was created. host-uri=et Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. name=duo The resource name for the config. peered-network=dolor Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format projects/{project}/global/networks/{network} , where {project} is a project number or id and {network} is the name of a VPC network in the project. peered-network-ip-range=voluptua. Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. 192.168.0.0/29 would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. /16 would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of /24 will be used. The field only has an effect if peered_network is set. secrets admin-access-token-version-name=magna Required. The resource name for the admin access token's secret version. read-access-token-version-name=est Required. The resource name for the read access token's secret version. webhook-secret-version-name=voluptua. Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig. .. ssl-ca=voluptua. Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt. username=tempor Username of the account Cloud Build will use on Bitbucket Server. webhook-key=takimata Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. bitbucket-server-config-resource=ut Required. The Bitbucket server config resource that this trigger config maps to. project-key=no Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\". pull-request branch=gubergren Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=ut If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=lorem Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=sed Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repo-slug=rebum. Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. ..build.approval.config approval-required=true Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. ..result approval-time=sit Output only. The time when the approval decision was made. approver-account=no Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. comment=kasd Optional. An optional comment for this manual approval result. decision=stet Required. The decision of this manual approval. url=accusam Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. .. state=lorem Output only. The state of this build's approval. ..artifacts images=et A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. Each invocation of this argument appends the given value to the array. objects location=nonumy Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see Bucket Name Requirements ). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. paths=kasd Path globs used to match files in the build's workspace. Each invocation of this argument appends the given value to the array. timing end-time=et End of time span. start-time=amet Start of time span. .... build-trigger-id=et Output only. The ID of the BuildTrigger that triggered this build, if it was triggered automatically. create-time=dolor Output only. Time at which the request to create the build was received. failure-info detail=elitr Explains the failure issue in more detail using hard-coded text. type=sanctus The name of the failure. .. finish-time=dolor Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. id=sea Output only. Unique identifier of the build. images=sanctus A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build status is marked FAILURE . Each invocation of this argument appends the given value to the array. log-url=sit Output only. URL to logs for this build in Google Cloud Console. logs-bucket=est Cloud Storage bucket where logs should be written (see Bucket Name Requirements ). Logs file names will be of the format ${logs_bucket}/log-${build_id}.txt . name=nonumy Output only. The 'Build' name with format: projects/{project}/locations/{location}/builds/{build} , where {build} is a unique identifier generated by the service. options automap-substitutions=false Option to include built-in and custom substitutions as env variables for all build steps. default-logs-bucket-behavior=invidunt Optional. Option to specify how default logs buckets are setup. disk-size-gb=takimata Requested disk size for the VM that runs the build. Note that this is NOT \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error. dynamic-substitutions=true Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. env=tempor A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\". Each invocation of this argument appends the given value to the array. log-streaming-option=nonumy Option to define build log streaming behavior to Cloud Storage. logging=sanctus Option to specify the logging mode, which determines if and where build logs are stored. machine-type=labore Compute Engine machine type on which to run the build. pool name=est The WorkerPool resource to execute the build on. You must have cloudbuild.workerpools.use on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} .. requested-verify-option=sadipscing Requested verifiability options. secret-env=accusam A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's Secret . These variables will be available to all build steps in this build. Each invocation of this argument appends the given value to the array. source-provenance-hash=elitr Requested hash for SourceProvenance. Each invocation of this argument appends the given value to the array. substitution-option=sit Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. worker-pool=invidunt This field deprecated; please use pool.name instead. .. project-id=dolore Output only. ID of the project. queue-ttl=et TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be EXPIRED . The TTL starts ticking from create_time. results artifact-manifest=tempor Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. artifact-timing end-time=nonumy End of time span. start-time=labore Start of time span. .. build-step-images=et List of build step digests, in the order corresponding to build step indices. Each invocation of this argument appends the given value to the array. build-step-outputs=et List of build step outputs, produced by builder images, in the order corresponding to build step indices. Cloud Builders can produce this output by writing to $BUILDER_OUTPUT/output . Only the first 50KB of data is stored. Each invocation of this argument appends the given value to the array. num-artifacts=nonumy Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. .. service-account=sit IAM service account whose credentials will be used at build runtime. Must be of the format projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT} . ACCOUNT can be email address or uniqueId of the service account. source.connected-repository dir=lorem Directory, relative to the source root, in which to run the build. repository=amet. Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=kasd The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..git-source dir=elitr Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=sea The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=duo Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..repo-source branch-name=sea Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=stet Explicit commit SHA to build. dir=erat Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=no ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=eirmod Name of the Cloud Source Repository. substitutions=key=accusam Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=et Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..storage-source bucket=sit Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=lorem Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=et Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=tempor Optional. Option to specify the tool to fetch the source file for the build. ..storage-source-manifest bucket=lorem Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=vero Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=at Cloud Storage object containing the source manifest. This object must be a JSON file. ...source-provenance.resolved-connected-repository dir=duo Directory, relative to the source root, in which to run the build. repository=ea Required. Name of the Google Cloud Build repository, formatted as projects/*/locations/*/connections/*/repositories/* . revision=et The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. ..resolved-git-source dir=lorem Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. revision=justo The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses git fetch to fetch the revision from the Git repository; therefore make sure that the string you provide for revision is parsable by the command. For information on string values accepted by git fetch , see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on git fetch , see https://git-scm.com/docs/git-fetch. url=et Location of the Git repo to build. This will be used as a git remote , see https://git-scm.com/docs/git-remote. ..resolved-repo-source branch-name=labore Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=ipsum Explicit commit SHA to build. dir=aliquyam Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=erat ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=diam Name of the Cloud Source Repository. substitutions=key=et Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=ipsum Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..resolved-storage-source bucket=et Cloud Storage bucket containing the source (see Bucket Name Requirements ). generation=dolor Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=amet Cloud Storage object containing the source. This object must be a zipped ( .zip ) or gzipped archive file ( .tar.gz ) containing source to build. source-fetcher=magna Optional. Option to specify the tool to fetch the source file for the build. ..resolved-storage-source-manifest bucket=gubergren Cloud Storage bucket containing the source manifest (see Bucket Name Requirements ). generation=dolor Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. object=est Cloud Storage object containing the source manifest. This object must be a JSON file. ... start-time=eirmod Output only. Time at which execution of the build was started. status=invidunt Output only. Status of the build. status-detail=consetetur Output only. Customer-readable message about the current status. substitutions=key=duo Substitutions data for Build resource. the value will be associated with the given key tags=est Tags for annotation of a Build . These are not docker tags. Each invocation of this argument appends the given value to the array. timeout=erat Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT . timeout starts ticking from startTime . Default time is 60 minutes. .. create-time=duo Output only. Time when the trigger was created. description=sed Human-readable description of this trigger. disabled=true If true, the trigger will never automatically execute a build. event-type=gubergren EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set. filename=takimata Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml). filter=et A Common Expression Language string. git-file-source bitbucket-server-config=erat The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=sea The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . path=vero The path of the file, with the repo root as the root of the path. repo-type=diam See RepoType above. repository=takimata The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. revision=voluptua. The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. uri=et The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. ..github enterprise-config-resource-name=sea Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\" installation-id=aliquyam The installationID that emits the GitHub event. name=ut Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\". owner=magna Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\". pull-request branch=tempor Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=dolor If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=et Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=no Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ...gitlab-enterprise-events-config.gitlab-config create-time=amet Output only. Time when the config was created. enterprise-config host-uri=vero Immutable. The URI of the GitlabEnterprise host. service-directory-config service=duo The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}. .. ssl-ca=dolor The SSL certificate to use in requests to GitLab Enterprise instances. .. name=est The resource name for the config. secrets api-access-token-version=et Required. The resource name for the api access token\u2019s secret version api-key-version=ipsum Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build. read-access-token-version=stet Required. The resource name for the read access token\u2019s secret version webhook-secret-version=stet Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig. .. username=amet. Username of the GitLab.com or GitLab Enterprise account Cloud Build will use. webhook-key=ut Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config. .. gitlab-config-resource=duo The GitLab config resource that this trigger config maps to. project-namespace=sed Namespace of the GitLab project. pull-request branch=accusam Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=accusam If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=true If true, branches that do NOT match the git_ref will trigger a build. ..push branch=lorem Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=true When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=kasd Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ... id=justo Output only. Unique identifier of the trigger. ignored-files=duo ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build. Each invocation of this argument appends the given value to the array. include-build-logs=nonumy If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error. included-files=sea If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build. Each invocation of this argument appends the given value to the array. name=eirmod User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character. pubsub-config service-account-email=amet Service account that will make the push request. state=sed Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests. subscription=dolor Output only. Name of the subscription. Format is projects/{project}/subscriptions/{subscription} . topic=sea The name of the topic from which this subscription is receiving messages. Format is projects/{project}/topics/{topic} . ..repository-event-config.pull-request branch=sadipscing Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax comment-control=nonumy If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments /gcbrun on a pull request or /gcbrun is in the pull request description. Only PR comments that contain /gcbrun will trigger builds. If CommentControl is set to disabled, comments with /gcbrun from a user with repository write permission or above will still trigger builds to run. invert-regex=false If true, branches that do NOT match the git_ref will trigger a build. ..push branch=labore Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax invert-regex=false When true, only trigger a build if the revision regex does NOT match the git_ref regex. tag=justo Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax .. repository=sed The resource name of the Repo API resource. repository-type=sit Output only. The type of the SCM vendor the repository points to. .. resource-name=ipsum The Trigger name with format: projects/{project}/locations/{location}/triggers/{trigger} , where {trigger} is a unique identifier generated by the service. service-account=sanctus The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} source-to-build bitbucket-server-config=sed The full resource name of the bitbucket server config. Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id} . github-enterprise-config=justo The full resource name of the github enterprise config. Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id} . projects/{project}/githubEnterpriseConfigs/{id} . ref=elitr The branch or tag to use. Must start with \"refs/\" (required). repo-type=sed See RepoType below. repository=sed The connected repository resource name, in the format projects/*/locations/*/connections/*/repositories/* . Either uri or repository can be specified and is required. uri=dolor The URI of the repo (e.g. https://github.com/user/repo.git). Either uri or repository can be specified and is required. .. substitutions=key=no Substitutions for Build resource. The keys must match the following regular expression: ^_[A-Z0-9_]+$ . the value will be associated with the given key tags=rebum. Tags for annotation of a BuildTrigger Each invocation of this argument appends the given value to the array. trigger-template branch-name=ipsum Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=rebum. Explicit commit SHA to build. dir=lorem Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=no ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=et Name of the Cloud Source Repository. substitutions=key=sanctus Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=no Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax ..webhook-config secret=et Required. Resource name for the secret required as a URL parameter. state=dolor Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.","title":"Required Request Value"},{"location":"projects_triggers-patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_triggers-patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-patch/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p update-mask=string Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.","title":"Optional Method Properties"},{"location":"projects_triggers-patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-run/","text":"Runs a BuildTrigger at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers. Scopes You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-run ... Required Scalar Arguments <project-id> (string) Required. ID of the project. <trigger-id> (string) Required. ID of the trigger. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RepoSource: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . branch-name=sit Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=eirmod Explicit commit SHA to build. dir=dolore Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=ipsum ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=dolores Name of the Cloud Source Repository. substitutions=key=nonumy Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=magna Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Trigger to run. Format: projects/{project}/locations/{location}/triggers/{trigger} Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers Run"},{"location":"projects_triggers-run/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/cloud-platform scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: cloudbuild1 --scope <scope> projects triggers-run ...","title":"Scopes"},{"location":"projects_triggers-run/#required-scalar-arguments","text":"<project-id> (string) Required. ID of the project. <trigger-id> (string) Required. ID of the trigger.","title":"Required Scalar Arguments"},{"location":"projects_triggers-run/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RepoSource: branch-name: string commit-sha: string dir: string invert-regex: boolean project-id: string repo-name: string substitutions: { string: string } tag-name: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . branch-name=sit Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax commit-sha=eirmod Explicit commit SHA to build. dir=dolore Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's dir is specified and is an absolute path, this value is ignored for that step's execution. invert-regex=false Only trigger a build if the revision regex does NOT match the revision regex. project-id=ipsum ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. repo-name=dolores Name of the Cloud Source Repository. substitutions=key=nonumy Substitutions to use in a triggered build. Should only be used with RunBuildTrigger the value will be associated with the given key tag-name=magna Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax","title":"Required Request Value"},{"location":"projects_triggers-run/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_triggers-run/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-run/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the Trigger to run. Format: projects/{project}/locations/{location}/triggers/{trigger}","title":"Optional Method Properties"},{"location":"projects_triggers-run/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_triggers-webhook/","text":"ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger. Required Scalar Arguments <project-id> (string) Project in which the specified trigger lives <trigger> (string) Name of the trigger to run the payload against Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=kasd The HTTP Content-Type header value specifying the content type of the body. data=magna The HTTP request/response body as raw binary. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the ReceiveTriggerWebhook to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger} -p secret=string Secret token used for authorization if an OAuth token isn't provided. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Triggers Webhook"},{"location":"projects_triggers-webhook/#required-scalar-arguments","text":"<project-id> (string) Project in which the specified trigger lives <trigger> (string) Name of the trigger to run the payload against","title":"Required Scalar Arguments"},{"location":"projects_triggers-webhook/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: HttpBody: content-type: string data: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . content-type=kasd The HTTP Content-Type header value specifying the content type of the body. data=magna The HTTP request/response body as raw binary.","title":"Required Request Value"},{"location":"projects_triggers-webhook/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_triggers-webhook/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_triggers-webhook/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p name=string The name of the ReceiveTriggerWebhook to retrieve. Format: projects/{project}/locations/{location}/triggers/{trigger} -p secret=string Secret token used for authorization if an OAuth token isn't provided.","title":"Optional Method Properties"},{"location":"projects_triggers-webhook/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}