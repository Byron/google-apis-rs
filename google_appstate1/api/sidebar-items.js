initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["AppState","Central instance to access all AppState related resource activities"],["GetResponse","This is a JSON template for an app state resource."],["ListResponse","This is a JSON template to convert a list-response for app state."],["StateClearCall","Clears (sets to empty) the data for the passed key if and only if the passed version matches the currently stored version. This method results in a conflict error on version mismatch."],["StateDeleteCall","Deletes a key and the data associated with it. The key is removed and no longer counts against the key quota. Note that since this method is not safe in the face of concurrent modifications, it should only be used for development and testing purposes. Invoking this method in shipping code can result in data loss and data corruption."],["StateGetCall","Retrieves the data corresponding to the passed key. If the key does not exist on the server, an HTTP 404 will be returned."],["StateListCall","Lists all the states keys, and optionally the state data."],["StateMethods","A builder providing access to all methods supported on state resources. It is not used directly, but through the `AppState` hub."],["StateUpdateCall","Update the data associated with the input key if and only if the passed version matches the currently stored version. This method is safe in the face of concurrent writes. Maximum per-key size is 128KB."],["UpdateRequest","This is a JSON template for a requests which update app state"],["WriteResult","This is a JSON template for an app state write result."]]});