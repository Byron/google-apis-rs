initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["Binding","Associates `members` with a `role`."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["Endpoint","An individual endpoint that provides a service. The service must already exist to create an endpoint."],["Expr","Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."],["GetIamPolicyRequest","Request message for `GetIamPolicy` method."],["GetPolicyOptions","Encapsulates settings provided to GetIamPolicy."],["ListEndpointsResponse","The response message for RegistrationService.ListEndpoints."],["ListLocationsResponse","The response message for Locations.ListLocations."],["ListNamespacesResponse","The response message for RegistrationService.ListNamespaces."],["ListServicesResponse","The response message for RegistrationService.ListServices."],["Location","A resource that represents Google Cloud Platform location."],["Namespace","A container for services. Namespaces allow administrators to group services together and define permissions for a collection of services."],["Policy","An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation. JSON example: { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the IAM documentation."],["ProjectLocationGetCall","Gets information about a location."],["ProjectLocationListCall","Lists information about the supported locations for this service."],["ProjectLocationNamespaceCreateCall","Creates a namespace, and returns the new namespace."],["ProjectLocationNamespaceDeleteCall","Deletes a namespace. This also deletes all services and endpoints in the namespace."],["ProjectLocationNamespaceGetCall","Gets a namespace."],["ProjectLocationNamespaceGetIamPolicyCall","Gets the IAM Policy for a resource (namespace or service only)."],["ProjectLocationNamespaceListCall","Lists all namespaces."],["ProjectLocationNamespacePatchCall","Updates a namespace."],["ProjectLocationNamespaceServiceCreateCall","Creates a service, and returns the new service."],["ProjectLocationNamespaceServiceDeleteCall","Deletes a service. This also deletes all endpoints associated with the service."],["ProjectLocationNamespaceServiceEndpointCreateCall","Creates an endpoint, and returns the new endpoint."],["ProjectLocationNamespaceServiceEndpointDeleteCall","Deletes an endpoint."],["ProjectLocationNamespaceServiceEndpointGetCall","Gets an endpoint."],["ProjectLocationNamespaceServiceEndpointListCall","Lists all endpoints."],["ProjectLocationNamespaceServiceEndpointPatchCall","Updates an endpoint."],["ProjectLocationNamespaceServiceGetCall","Gets a service."],["ProjectLocationNamespaceServiceGetIamPolicyCall","Gets the IAM Policy for a resource (namespace or service only)."],["ProjectLocationNamespaceServiceListCall","Lists all services belonging to a namespace."],["ProjectLocationNamespaceServicePatchCall","Updates a service."],["ProjectLocationNamespaceServiceResolveCall","Returns a service and its associated endpoints. Resolving a service is not considered an active developer method."],["ProjectLocationNamespaceServiceSetIamPolicyCall","Sets the IAM Policy for a resource (namespace or service only)."],["ProjectLocationNamespaceServiceTestIamPermissionCall","Tests IAM permissions for a resource (namespace or service only)."],["ProjectLocationNamespaceSetIamPolicyCall","Sets the IAM Policy for a resource (namespace or service only)."],["ProjectLocationNamespaceTestIamPermissionCall","Tests IAM permissions for a resource (namespace or service only)."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `ServiceDirectory` hub."],["ResolveServiceRequest","The request message for LookupService.ResolveService. Looks up a service by its name, returns the service and its endpoints."],["ResolveServiceResponse","The response message for LookupService.ResolveService."],["Service","An individual service. A service contains a name and optional metadata. A service must exist before endpoints can be added to it."],["ServiceDirectory","Central instance to access all ServiceDirectory related resource activities"],["SetIamPolicyRequest","Request message for `SetIamPolicy` method."],["TestIamPermissionsRequest","Request message for `TestIamPermissions` method."],["TestIamPermissionsResponse","Response message for `TestIamPermissions` method."]]});