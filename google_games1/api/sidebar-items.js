initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["AchievementDefinition","An achievement definition object."],["AchievementDefinitionListCall","Lists all the achievement definitions for your application."],["AchievementDefinitionMethods","A builder providing access to all methods supported on achievementDefinition resources. It is not used directly, but through the `Games` hub."],["AchievementDefinitionsListResponse","A list of achievement definition objects."],["AchievementIncrementCall","Increments the steps of the achievement with the given ID for the currently authenticated player."],["AchievementIncrementResponse","An achievement increment response"],["AchievementListCall","Lists the progress for all your application's achievements for the currently authenticated player."],["AchievementMethods","A builder providing access to all methods supported on achievement resources. It is not used directly, but through the `Games` hub."],["AchievementRevealCall","Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player."],["AchievementRevealResponse","An achievement reveal response"],["AchievementSetStepsAtLeastCall","Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified."],["AchievementSetStepsAtLeastResponse","An achievement set steps at least response."],["AchievementUnlockCall","Unlocks this achievement for the currently authenticated player."],["AchievementUnlockResponse","An achievement unlock response"],["AchievementUpdateMultipleCall","Updates multiple achievements for the currently authenticated player."],["AchievementUpdateMultipleRequest","A list of achievement update requests."],["AchievementUpdateMultipleResponse","Response message for UpdateMultipleAchievements rpc."],["AchievementUpdateRequest","A request to update an achievement."],["AchievementUpdateResponse","An updated achievement."],["Application","The Application resource."],["ApplicationCategory","An application category object."],["ApplicationGetCall","Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data."],["ApplicationGetEndPointCall","Returns a URL for the requested end point type."],["ApplicationMethods","A builder providing access to all methods supported on application resources. It is not used directly, but through the `Games` hub."],["ApplicationPlayedCall","Indicate that the currently authenticated user is playing your application."],["ApplicationVerifyCall","Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for."],["ApplicationVerifyResponse","A third party application verification response resource."],["Category","Data related to individual game categories."],["CategoryListResponse","A third party list metagame categories response."],["EndPoint","Container for a URL end point of the requested type."],["EventBatchRecordFailure","A batch update failure resource."],["EventChild","An event child relationship resource."],["EventDefinition","An event definition resource."],["EventDefinitionListResponse","A ListDefinitions response."],["EventListByPlayerCall","Returns a list showing the current progress on events in this application for the currently authenticated user."],["EventListDefinitionCall","Returns a list of the event definitions in this application."],["EventMethods","A builder providing access to all methods supported on event resources. It is not used directly, but through the `Games` hub."],["EventPeriodRange","An event period time range."],["EventPeriodUpdate","An event period update resource."],["EventRecordCall","Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application."],["EventRecordFailure","An event update failure resource."],["EventRecordRequest","An event period update resource."],["EventUpdateRequest","An event period update resource."],["EventUpdateResponse","An event period update resource."],["Games","Central instance to access all Games related resource activities"],["GamesAchievementIncrement","The payload to request to increment an achievement."],["GamesAchievementSetStepsAtLeast","The payload to request to increment an achievement."],["ImageAsset","An image asset object."],["Instance","The Instance resource."],["InstanceAndroidDetails","The Android instance details resource."],["InstanceIosDetails","The iOS details resource."],["InstanceWebDetails","The Web details resource."],["Leaderboard","The Leaderboard resource."],["LeaderboardEntry","The Leaderboard Entry resource."],["LeaderboardGetCall","Retrieves the metadata of the leaderboard with the given ID."],["LeaderboardListCall","Lists all the leaderboard metadata for your application."],["LeaderboardListResponse","A list of leaderboard objects."],["LeaderboardMethods","A builder providing access to all methods supported on leaderboard resources. It is not used directly, but through the `Games` hub."],["LeaderboardScoreRank","A score rank in a leaderboard."],["LeaderboardScores","A ListScores response."],["MetagameConfig","The metagame config resource"],["MetagameGetMetagameConfigCall","Return the metagame configuration data for the calling application."],["MetagameListCategoriesByPlayerCall","List play data aggregated per category for the player corresponding to `playerId`."],["MetagameMethods","A builder providing access to all methods supported on metagame resources. It is not used directly, but through the `Games` hub."],["Player","A Player resource."],["PlayerAchievement","An achievement object."],["PlayerAchievementListResponse","A list of achievement objects."],["PlayerEvent","An event status resource."],["PlayerEventListResponse","A ListByPlayer response."],["PlayerExperienceInfo","1P/3P metadata about the player's experience."],["PlayerGetCall","Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`."],["PlayerLeaderboardScore","A player leaderboard score object."],["PlayerLeaderboardScoreListResponse","A list of player leaderboard scores."],["PlayerLevel","1P/3P metadata about a user's level."],["PlayerListCall","Get the collection of players for the currently authenticated user."],["PlayerListResponse","A third party player list response."],["PlayerMethods","A builder providing access to all methods supported on player resources. It is not used directly, but through the `Games` hub."],["PlayerName","A representation of the individual components of the name."],["PlayerScore","A player score."],["PlayerScoreListResponse","A list of score submission statuses."],["PlayerScoreResponse","A list of leaderboard entry resources."],["PlayerScoreSubmissionList","A list of score submission requests."],["ProfileSettings","Profile settings"],["ResolveSnapshotHeadRequest","Request for ResolveSnapshotHead RPC."],["ResolveSnapshotHeadResponse","Response for ResolveSnapshotHead RPC."],["RevisionCheckCall","Checks whether the games client is out of date."],["RevisionCheckResponse","A third party checking a revision response."],["RevisionMethods","A builder providing access to all methods supported on revision resources. It is not used directly, but through the `Games` hub."],["ScoreGetCall","Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'."],["ScoreListCall","Lists the scores in a leaderboard, starting from the top."],["ScoreListWindowCall","Lists the scores in a leaderboard around (and including) a player's score."],["ScoreMethods","A builder providing access to all methods supported on score resources. It is not used directly, but through the `Games` hub."],["ScoreSubmission","A request to submit a score to leaderboards."],["ScoreSubmitCall","Submits a score to the specified leaderboard."],["ScoreSubmitMultipleCall","Submits multiple scores to leaderboards."],["Snapshot","An snapshot object."],["SnapshotCoverImageResource","Identifies a snapshot cover image resource. The image is provided by the game."],["SnapshotDataResource","Identifies a snapshot data resource. The data is provided by the game."],["SnapshotExtended","A snapshot represents a saved game state referred to using the developer-provided snapshot_name. The set of attributes and binary data for a specific state is called a revision. Each revision is itself immutable, and referred to by a snapshot revision id. At any time, a snapshot has a \"head\" revision, and updates are made against that revision. If a snapshot update is received that isn't against the current head revision, then instead of changing the head revision it will result in a conflicting revision that must be specifically resolved."],["SnapshotGetCall","Retrieves the metadata for a given snapshot ID."],["SnapshotImage","An image of a snapshot."],["SnapshotListCall","Retrieves a list of snapshots created by your application for the player corresponding to the player ID."],["SnapshotListResponse","A third party list snapshots response."],["SnapshotMetadata","Metadata about a snapshot revision. Snapshot metadata is immutable - a metadata change corresponds to a new snapshot revision."],["SnapshotMethods","A builder providing access to all methods supported on snapshot resources. It is not used directly, but through the `Games` hub."],["SnapshotRevision","A Snapshot revision resource. Snapshot revisions are immutable."],["SnapshotsExtendedMethods","A builder providing access to all methods supported on snapshotsExtended resources. It is not used directly, but through the `Games` hub."],["SnapshotsExtendedResolveSnapshotHeadCall","Resolves any potential conflicts according to the resolution policy specified in the request and returns the snapshot head after the resolution."],["StatGetCall","Returns engagement and spend statistics in this application for the currently authenticated user."],["StatMethods","A builder providing access to all methods supported on stat resources. It is not used directly, but through the `Games` hub."],["StatsResponse","A third party stats resource."]]});