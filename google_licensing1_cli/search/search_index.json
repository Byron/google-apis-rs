{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The licensing1 command-line interface (CLI) allows to use most features of the Google licensing service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the licensing API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-licensing1-cli Find the source code on github . Usage This documentation was generated from the licensing API at revision 20240301 . The CLI is at version 5.0.4 . licensing1 [options] license-assignments delete <product-id> <sku-id> <user-id> [-p <v>]... [-o <out>] get <product-id> <sku-id> <user-id> [-p <v>]... [-o <out>] insert <product-id> <sku-id> (-r <kv>)... [-p <v>]... [-o <out>] list-for-product <product-id> <customer-id> [-p <v>]... [-o <out>] list-for-product-and-sku <product-id> <sku-id> <customer-id> [-p <v>]... [-o <out>] patch <product-id> <sku-id> <user-id> (-r <kv>)... [-p <v>]... [-o <out>] update <product-id> <sku-id> <user-id> (-r <kv>)... [-p <v>]... [-o <out>] licensing1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with licensing1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/licensing1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/licensing1-secret.json , assuming that the required licensing API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. licensing1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-licensing1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the licensing API at revision 20240301 . The CLI is at version 5.0.4 . licensing1 [options] license-assignments delete <product-id> <sku-id> <user-id> [-p <v>]... [-o <out>] get <product-id> <sku-id> <user-id> [-p <v>]... [-o <out>] insert <product-id> <sku-id> (-r <kv>)... [-p <v>]... [-o <out>] list-for-product <product-id> <customer-id> [-p <v>]... [-o <out>] list-for-product-and-sku <product-id> <sku-id> <customer-id> [-p <v>]... [-o <out>] patch <product-id> <sku-id> <user-id> (-r <kv>)... [-p <v>]... [-o <out>] update <product-id> <sku-id> <user-id> (-r <kv>)... [-p <v>]... [-o <out>] licensing1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with licensing1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/licensing1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/licensing1-secret.json , assuming that the required licensing API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. licensing1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"license-assignments_delete/","text":"Revoke a license. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments delete ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Delete"},{"location":"license-assignments_delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments delete ...","title":"Scopes"},{"location":"license-assignments_delete/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes.","title":"Required Scalar Arguments"},{"location":"license-assignments_delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"license-assignments_get/","text":"Get a specific user's license by product SKU. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments get ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"license-assignments_get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments get ...","title":"Scopes"},{"location":"license-assignments_get/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes.","title":"Required Scalar Arguments"},{"location":"license-assignments_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"license-assignments_insert/","text":"Assign a license. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments insert ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LicenseAssignmentInsert: user-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . user-id=et Email id of the user About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Insert"},{"location":"license-assignments_insert/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments insert ...","title":"Scopes"},{"location":"license-assignments_insert/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.","title":"Required Scalar Arguments"},{"location":"license-assignments_insert/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LicenseAssignmentInsert: user-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . user-id=et Email id of the user","title":"Required Request Value"},{"location":"license-assignments_insert/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"license-assignments_insert/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_insert/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"license-assignments_list-for-product-and-sku/","text":"List all users assigned licenses for a specific product SKU. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments list-for-product-and-sku ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <customer-id> (string) The customer's unique ID as defined in the Admin console, such as C00000000 . If the customer is suspended, the server returns an error. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p max-results=integer The maxResults query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number. -p page-token=string Token to fetch the next page of data. The maxResults query string is related to the pageToken since maxResults determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List For Product And Sku"},{"location":"license-assignments_list-for-product-and-sku/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments list-for-product-and-sku ...","title":"Scopes"},{"location":"license-assignments_list-for-product-and-sku/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <customer-id> (string) The customer's unique ID as defined in the Admin console, such as C00000000 . If the customer is suspended, the server returns an error.","title":"Required Scalar Arguments"},{"location":"license-assignments_list-for-product-and-sku/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_list-for-product-and-sku/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p max-results=integer The maxResults query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number. -p page-token=string Token to fetch the next page of data. The maxResults query string is related to the pageToken since maxResults determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.","title":"Optional Method Properties"},{"location":"license-assignments_list-for-product-and-sku/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"license-assignments_list-for-product/","text":"List all users assigned licenses for a specific product SKU. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments list-for-product ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <customer-id> (string) The customer's unique ID as defined in the Admin console, such as C00000000 . If the customer is suspended, the server returns an error. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p max-results=integer The maxResults query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number. -p page-token=string Token to fetch the next page of data. The maxResults query string is related to the pageToken since maxResults determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List For Product"},{"location":"license-assignments_list-for-product/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments list-for-product ...","title":"Scopes"},{"location":"license-assignments_list-for-product/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <customer-id> (string) The customer's unique ID as defined in the Admin console, such as C00000000 . If the customer is suspended, the server returns an error.","title":"Required Scalar Arguments"},{"location":"license-assignments_list-for-product/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_list-for-product/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p max-results=integer The maxResults query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number. -p page-token=string Token to fetch the next page of data. The maxResults query string is related to the pageToken since maxResults determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.","title":"Optional Method Properties"},{"location":"license-assignments_list-for-product/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"license-assignments_patch/","text":"Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments patch ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LicenseAssignment: etags: string kind: string product-id: string product-name: string self-link: string sku-id: string sku-name: string user-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . etags=magna ETag of the resource. kind=no Identifies the resource as a LicenseAssignment, which is licensing#licenseAssignment . product-id=ipsum A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs. product-name=voluptua. Display Name of the product. self-link=at Link to this page. sku-id=sanctus A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. sku-name=sed Display Name of the sku of the product. user-id=amet. The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Patch"},{"location":"license-assignments_patch/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments patch ...","title":"Scopes"},{"location":"license-assignments_patch/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes.","title":"Required Scalar Arguments"},{"location":"license-assignments_patch/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LicenseAssignment: etags: string kind: string product-id: string product-name: string self-link: string sku-id: string sku-name: string user-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . etags=magna ETag of the resource. kind=no Identifies the resource as a LicenseAssignment, which is licensing#licenseAssignment . product-id=ipsum A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs. product-name=voluptua. Display Name of the product. self-link=at Link to this page. sku-id=sanctus A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. sku-name=sed Display Name of the sku of the product. user-id=amet. The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes.","title":"Required Request Value"},{"location":"license-assignments_patch/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"license-assignments_patch/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_patch/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"license-assignments_update/","text":"Reassign a user's product SKU with a different SKU in the same product. Scopes You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments update ... Required Scalar Arguments <product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LicenseAssignment: etags: string kind: string product-id: string product-name: string self-link: string sku-id: string sku-name: string user-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . etags=takimata ETag of the resource. kind=amet. Identifies the resource as a LicenseAssignment, which is licensing#licenseAssignment . product-id=duo A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs. product-name=ipsum Display Name of the product. self-link=gubergren Link to this page. sku-id=lorem A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. sku-name=gubergren Display Name of the sku of the product. user-id=eos The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Update"},{"location":"license-assignments_update/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/apps.licensing scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/apps.licensing . You can set the scope for this method like this: licensing1 --scope <scope> license-assignments update ...","title":"Scopes"},{"location":"license-assignments_update/#required-scalar-arguments","text":"<product-id> (string) A product's unique identifier. For more information about products in this version of the API, see Products and SKUs. <sku-id> (string) A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. <user-id> (string) The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes.","title":"Required Scalar Arguments"},{"location":"license-assignments_update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LicenseAssignment: etags: string kind: string product-id: string product-name: string self-link: string sku-id: string sku-name: string user-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . etags=takimata ETag of the resource. kind=amet. Identifies the resource as a LicenseAssignment, which is licensing#licenseAssignment . product-id=duo A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs. product-name=ipsum Display Name of the product. self-link=gubergren Link to this page. sku-id=lorem A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs. sku-name=gubergren Display Name of the sku of the product. user-id=eos The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a userId is subject to change, do not use a userId value as a key for persistent data. This key could break if the current user's email address changes. If the userId is suspended, the license status changes.","title":"Required Request Value"},{"location":"license-assignments_update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"license-assignments_update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"license-assignments_update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}