{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The proximitybeacon1-beta1 command-line interface (CLI) allows to use most features of the Google proximitybeacon service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the proximitybeacon API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-proximitybeacon1_beta1-cli Find the source code on github . Usage This documentation was generated from the proximitybeacon API at revision 20200127 . The CLI is at version 5.0.4 . proximitybeacon1-beta1 [options] beaconinfo getforobserved (-r <kv>)... [-p <v>]... [-o <out>] beacons activate <beacon-name> [-p <v>]... [-o <out>] attachments-batch-delete <beacon-name> [-p <v>]... [-o <out>] attachments-create <beacon-name> (-r <kv>)... [-p <v>]... [-o <out>] attachments-delete <attachment-name> [-p <v>]... [-o <out>] attachments-list <beacon-name> [-p <v>]... [-o <out>] deactivate <beacon-name> [-p <v>]... [-o <out>] decommission <beacon-name> [-p <v>]... [-o <out>] delete <beacon-name> [-p <v>]... [-o <out>] diagnostics-list <beacon-name> [-p <v>]... [-o <out>] get <beacon-name> [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] register (-r <kv>)... [-p <v>]... [-o <out>] update <beacon-name> (-r <kv>)... [-p <v>]... [-o <out>] methods get-eidparams [-p <v>]... [-o <out>] namespaces list [-p <v>]... [-o <out>] update <namespace-name> (-r <kv>)... [-p <v>]... [-o <out>] proximitybeacon1-beta1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with proximitybeacon1-beta1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/proximitybeacon1-beta1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/proximitybeacon1-beta1-secret.json , assuming that the required proximitybeacon API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. proximitybeacon1-beta1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-proximitybeacon1_beta1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the proximitybeacon API at revision 20200127 . The CLI is at version 5.0.4 . proximitybeacon1-beta1 [options] beaconinfo getforobserved (-r <kv>)... [-p <v>]... [-o <out>] beacons activate <beacon-name> [-p <v>]... [-o <out>] attachments-batch-delete <beacon-name> [-p <v>]... [-o <out>] attachments-create <beacon-name> (-r <kv>)... [-p <v>]... [-o <out>] attachments-delete <attachment-name> [-p <v>]... [-o <out>] attachments-list <beacon-name> [-p <v>]... [-o <out>] deactivate <beacon-name> [-p <v>]... [-o <out>] decommission <beacon-name> [-p <v>]... [-o <out>] delete <beacon-name> [-p <v>]... [-o <out>] diagnostics-list <beacon-name> [-p <v>]... [-o <out>] get <beacon-name> [-p <v>]... [-o <out>] list [-p <v>]... [-o <out>] register (-r <kv>)... [-p <v>]... [-o <out>] update <beacon-name> (-r <kv>)... [-p <v>]... [-o <out>] methods get-eidparams [-p <v>]... [-o <out>] namespaces list [-p <v>]... [-o <out>] update <namespace-name> (-r <kv>)... [-p <v>]... [-o <out>] proximitybeacon1-beta1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with proximitybeacon1-beta1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/proximitybeacon1-beta1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/proximitybeacon1-beta1-secret.json , assuming that the required proximitybeacon API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. proximitybeacon1-beta1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"beaconinfo_getforobserved/","text":"Given one or more beacon observations, returns any beacon information and attachments accessible to your application. Authorize by using the API key for the application. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GetInfoForObservedBeaconsRequest: namespaced-types: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . namespaced-types=et Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format <var>namespace/type</var>. Accepts * to specify all types in all namespaces owned by the client. Optional. Each invocation of this argument appends the given value to the array. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Getforobserved"},{"location":"beaconinfo_getforobserved/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GetInfoForObservedBeaconsRequest: namespaced-types: [string] can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . namespaced-types=et Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format <var>namespace/type</var>. Accepts * to specify all types in all namespaces owned by the client. Optional. Each invocation of this argument appends the given value to the array.","title":"Required Request Value"},{"location":"beaconinfo_getforobserved/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"beaconinfo_getforobserved/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beaconinfo_getforobserved/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_activate/","text":"Activates a beacon. A beacon that is active will return information and attachment data when queried via beaconinfo.getforobserved . Calling this method on an already active beacon will do nothing (but will return a successful response code). Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons activate ... Required Scalar Argument <beacon-name> (string) Beacon that should be activated. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to activate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Activate"},{"location":"beacons_activate/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons activate ...","title":"Scopes"},{"location":"beacons_activate/#required-scalar-argument","text":"<beacon-name> (string) Beacon that should be activated. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_activate/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_activate/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to activate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.","title":"Optional Method Properties"},{"location":"beacons_activate/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_attachments-batch-delete/","text":"Deletes multiple attachments on a given beacon. This operation is permanent and cannot be undone. You can optionally specify namespacedType to choose which attachments should be deleted. If you do not specify namespacedType , all your attachments on the given beacon will be deleted. You also may explicitly specify */* to delete all. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-batch-delete ... Required Scalar Argument <beacon-name> (string) The beacon whose attachments should be deleted. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p namespaced-type=string Specifies the namespace and type of attachments to delete in namespace/type format. Accepts */* to specify \"all types in all namespaces\". Optional. -p project-id=string The project id to delete beacon attachments under. This field can be used when \" \" is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If \" \" is specified and the projectId string is empty, then the project making the request is used. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Attachments Batch Delete"},{"location":"beacons_attachments-batch-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-batch-delete ...","title":"Scopes"},{"location":"beacons_attachments-batch-delete/#required-scalar-argument","text":"<beacon-name> (string) The beacon whose attachments should be deleted. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_attachments-batch-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_attachments-batch-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p namespaced-type=string Specifies the namespace and type of attachments to delete in namespace/type format. Accepts */* to specify \"all types in all namespaces\". Optional. -p project-id=string The project id to delete beacon attachments under. This field can be used when \" \" is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If \" \" is specified and the projectId string is empty, then the project making the request is used. Optional.","title":"Optional Method Properties"},{"location":"beacons_attachments-batch-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_attachments-create/","text":"Associates the given data with the specified beacon. Attachment data must contain two parts: <ul> <li>A namespaced type.</li> <li>The actual attachment data itself.</li> </ul> The namespaced type consists of two parts, the namespace and the type. The namespace must be one of the values returned by the namespaces endpoint, while the type can be a string of any characters except for the forward slash ( / ) up to 100 characters in length. Attachment data can be up to 1024 bytes long. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-create ... Required Scalar Argument <beacon-name> (string) Beacon on which the attachment should be created. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BeaconAttachment: attachment-name: string creation-time-ms: string data: string max-distance-meters: number namespaced-type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . attachment-name=magna Resource name of this attachment. Attachment names have the format: <code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>. Leave this empty on creation. creation-time-ms=no The UTC time when this attachment was created, in milliseconds since the UNIX epoch. data=ipsum An opaque data container for client-provided data. Must be base64 encoded in HTTP requests, and will be so encoded (with padding) in responses. Required. max-distance-meters=0.5709789811505924 The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection. Negative values are invalid and return an error. * namespaced-type=sanctus - Specifies what kind of attachment this is. Tells a client how to interpret the data field. Format is <var>namespace/type</var>. Namespace provides type separation between clients. Type describes the type of data , for use by the client when parsing the data field. Required. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the project the attachment will belong to. If the project id is not specified then the project making the request is used. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Attachments Create"},{"location":"beacons_attachments-create/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-create ...","title":"Scopes"},{"location":"beacons_attachments-create/#required-scalar-argument","text":"<beacon-name> (string) Beacon on which the attachment should be created. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_attachments-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BeaconAttachment: attachment-name: string creation-time-ms: string data: string max-distance-meters: number namespaced-type: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . attachment-name=magna Resource name of this attachment. Attachment names have the format: <code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>. Leave this empty on creation. creation-time-ms=no The UTC time when this attachment was created, in milliseconds since the UNIX epoch. data=ipsum An opaque data container for client-provided data. Must be base64 encoded in HTTP requests, and will be so encoded (with padding) in responses. Required. max-distance-meters=0.5709789811505924 The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection. Negative values are invalid and return an error. * namespaced-type=sanctus - Specifies what kind of attachment this is. Tells a client how to interpret the data field. Format is <var>namespace/type</var>. Namespace provides type separation between clients. Type describes the type of data , for use by the client when parsing the data field. Required.","title":"Required Request Value"},{"location":"beacons_attachments-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"beacons_attachments-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_attachments-create/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the project the attachment will belong to. If the project id is not specified then the project making the request is used. Optional.","title":"Optional Method Properties"},{"location":"beacons_attachments-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_attachments-delete/","text":"Deletes the specified attachment for the given beacon. Each attachment has a unique attachment name ( attachmentName ) which is returned when you fetch the attachment data via this API. You specify this with the delete request to control which attachment is removed. This operation cannot be undone. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-delete ... Required Scalar Argument <attachment-name> (string) The attachment name ( attachmentName ) of the attachment to remove. For example: beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738 . For Eddystone-EID beacons, the beacon ID portion ( 3!893737abc9 ) may be the beacon's current EID, or its \"stable\" Eddystone-UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the attachment to delete. If not provided, the project that is making the request is used. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Attachments Delete"},{"location":"beacons_attachments-delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-delete ...","title":"Scopes"},{"location":"beacons_attachments-delete/#required-scalar-argument","text":"<attachment-name> (string) The attachment name ( attachmentName ) of the attachment to remove. For example: beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738 . For Eddystone-EID beacons, the beacon ID portion ( 3!893737abc9 ) may be the beacon's current EID, or its \"stable\" Eddystone-UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_attachments-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_attachments-delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the attachment to delete. If not provided, the project that is making the request is used. Optional.","title":"Optional Method Properties"},{"location":"beacons_attachments-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_attachments-list/","text":"Returns the attachments for the specified beacon that match the specified namespaced-type pattern. To control which namespaced types are returned, you add the namespacedType query parameter to the request. You must either use */* , to return all attachments, or the namespace must be one of the ones returned from the namespaces endpoint. Authenticate using an OAuth access token from a signed-in user with viewer , Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-list ... Required Scalar Argument <beacon-name> (string) Beacon whose attachments should be fetched. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p namespaced-type=string Specifies the namespace and type of attachment to include in response in <var>namespace/type</var> format. Accepts */* to specify \"all types in all namespaces\". -p project-id=string The project id to list beacon attachments under. This field can be used when \" \" is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If \" \" is specified and the projectId string is empty, then the project making the request is used. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Attachments List"},{"location":"beacons_attachments-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons attachments-list ...","title":"Scopes"},{"location":"beacons_attachments-list/#required-scalar-argument","text":"<beacon-name> (string) Beacon whose attachments should be fetched. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_attachments-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_attachments-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p namespaced-type=string Specifies the namespace and type of attachment to include in response in <var>namespace/type</var> format. Accepts */* to specify \"all types in all namespaces\". -p project-id=string The project id to list beacon attachments under. This field can be used when \" \" is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If \" \" is specified and the projectId string is empty, then the project making the request is used. Optional.","title":"Optional Method Properties"},{"location":"beacons_attachments-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_deactivate/","text":"Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for the beacon when queried via beaconinfo.getforobserved . Calling this method on an already inactive beacon will do nothing (but will return a successful response code). Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons deactivate ... Required Scalar Argument <beacon-name> (string) Beacon that should be deactivated. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to deactivate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Deactivate"},{"location":"beacons_deactivate/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons deactivate ...","title":"Scopes"},{"location":"beacons_deactivate/#required-scalar-argument","text":"<beacon-name> (string) Beacon that should be deactivated. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_deactivate/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_deactivate/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to deactivate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.","title":"Optional Method Properties"},{"location":"beacons_deactivate/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_decommission/","text":"Decommissions the specified beacon in the service. This beacon will no longer be returned from beaconinfo.getforobserved . This operation is permanent -- you will not be able to re-register a beacon with this ID again. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons decommission ... Required Scalar Argument <beacon-name> (string) Beacon that should be decommissioned. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID of the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to decommission. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Decommission"},{"location":"beacons_decommission/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons decommission ...","title":"Scopes"},{"location":"beacons_decommission/#required-scalar-argument","text":"<beacon-name> (string) Beacon that should be decommissioned. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID of the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_decommission/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_decommission/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to decommission. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.","title":"Optional Method Properties"},{"location":"beacons_decommission/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_delete/","text":"Deletes the specified beacon including all diagnostics data for the beacon as well as any attachments on the beacon (including those belonging to other projects). This operation cannot be undone. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons delete ... Required Scalar Argument <beacon-name> (string) Beacon that should be deleted. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to delete. If not provided, the project that is making the request is used. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Delete"},{"location":"beacons_delete/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons delete ...","title":"Scopes"},{"location":"beacons_delete/#required-scalar-argument","text":"<beacon-name> (string) Beacon that should be deleted. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_delete/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to delete. If not provided, the project that is making the request is used. Optional.","title":"Optional Method Properties"},{"location":"beacons_delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_diagnostics-list/","text":"List the diagnostics for a single beacon. You can also list diagnostics for all the beacons owned by your Google Developers Console project by using the beacon name beacons/- . Authenticate using an OAuth access token from a signed-in user with viewer , Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons diagnostics-list ... Required Scalar Argument <beacon-name> (string) Beacon that the diagnostics are for. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p alert-filter=string Requests only beacons that have the given alert. For example, to find beacons that have low batteries use alert_filter=LOW_BATTERY . -p page-size=integer Specifies the maximum number of results to return. Defaults to Maximum 1000. Optional. -p page-token=string Requests results that occur after the page_token , obtained from the response to a previous request. Optional. -p project-id=string Requests only diagnostic records for the given project id. If not set, then the project making the request will be used for looking up diagnostic records. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Diagnostics List"},{"location":"beacons_diagnostics-list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons diagnostics-list ...","title":"Scopes"},{"location":"beacons_diagnostics-list/#required-scalar-argument","text":"<beacon-name> (string) Beacon that the diagnostics are for.","title":"Required Scalar Argument"},{"location":"beacons_diagnostics-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_diagnostics-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p alert-filter=string Requests only beacons that have the given alert. For example, to find beacons that have low batteries use alert_filter=LOW_BATTERY . -p page-size=integer Specifies the maximum number of results to return. Defaults to Maximum 1000. Optional. -p page-token=string Requests results that occur after the page_token , obtained from the response to a previous request. Optional. -p project-id=string Requests only diagnostic records for the given project id. If not set, then the project making the request will be used for looking up diagnostic records. Optional.","title":"Optional Method Properties"},{"location":"beacons_diagnostics-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_get/","text":"Returns detailed information about the specified beacon. Authenticate using an OAuth access token from a signed-in user with viewer , Is owner or Can edit permissions in the Google Developers Console project. Requests may supply an Eddystone-EID beacon name in the form: beacons/4!beaconId where the beaconId is the base16 ephemeral ID broadcast by the beacon. The returned Beacon object will contain the beacon's stable Eddystone-UID. Clients not authorized to resolve the beacon's ephemeral Eddystone-EID broadcast will receive an error. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons get ... Required Scalar Argument <beacon-name> (string) Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to request. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get"},{"location":"beacons_get/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons get ...","title":"Scopes"},{"location":"beacons_get/#required-scalar-argument","text":"<beacon-name> (string) Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone-UID, 4 for Eddystone-EID, 1 for iBeacon, or 5 for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's \"stable\" UID. Required.","title":"Required Scalar Argument"},{"location":"beacons_get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_get/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to request. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.","title":"Optional Method Properties"},{"location":"beacons_get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_list/","text":"Searches the beacon registry for beacons that match the given search criteria. Only those beacons that the client has permission to list will be returned. Authenticate using an OAuth access token from a signed-in user with viewer , Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons list ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of records to return for this request, up to a server-defined upper limit. -p page-token=string A pagination token obtained from a previous request to list beacons. -p project-id=string The project id to list beacons under. If not present then the project credential that made the request is used as the project. Optional. -p q=string Filter query string that supports the following field filters: description: &#34;&lt;string&gt;&#34; For example: description:\"Room 3\" Returns beacons whose description matches tokens in the string \"Room 3\" (not necessarily that exact string). The string must be double-quoted. status: &lt;enum&gt; For example: status:active Returns beacons whose status matches the given value. Values must be one of the Beacon.Status enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. stability: &lt;enum&gt; For example: stability:mobile Returns beacons whose expected stability matches the given value. Values must be one of the Beacon.Stability enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. place_id: &#34;&lt;string&gt;&#34; For example: place_id:\"ChIJVSZzVR8FdkgRXGmmm6SslKw=\" Returns beacons explicitly registered at the given place, expressed as a Place ID obtained from Google Places API . Does not match places inside the given place. Does not consider the beacon's actual location (which may be different from its registered place). Accepts multiple filters that will be combined with OR logic. The place ID must be double-quoted. registration_time [&lt;|&gt;|&lt;=|&gt;=]&lt;integer&gt; For example: registration_time>=1433116800 Returns beacons whose registration time matches the given filter. Supports the operators: <, >, <=, and >=. Timestamp must be expressed as an integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two filters that will be combined with AND logic, to support \"between\" semantics. If more than two are supplied, the latter ones are ignored. lat: &lt;double&gt; lng:&lt;double&gt; radius:&lt;integer&gt; For example: lat:51.1232343 lng:-1.093852 radius:1000 Returns beacons whose registered location is within the given circle. When any of these fields are given, all are required. Latitude and longitude must be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0 respectively. Radius must be an integer number of meters between 10 and 1,000,000 (1000 km). property: &#34;&lt;string&gt;=&lt;string&gt;&#34; For example: property:\"battery-type=CR2032\" Returns beacons which have a property of the given name and value. Supports multiple filters which will be combined with OR logic. The entire name=value string must be double-quoted as one string. attachment_type: &#34;&lt;string&gt;&#34; For example: attachment_type:\"my-namespace/my-type\" Returns beacons having at least one attachment of the given namespaced type. Supports \"any within this namespace\" via the partial wildcard syntax: \"my-namespace/*\". Supports multiple filters which will be combined with OR logic. The string must be double-quoted. indoor_level: &#34;&lt;string&gt;&#34; For example: indoor_level:\"1\" Returns beacons which are located on the given indoor level. Accepts multiple filters that will be combined with OR logic. Multiple filters on the same field are combined with OR logic (except registration_time which is combined with AND logic). Multiple filters on different fields are combined with AND logic. Filters should be separated by spaces. As with any HTTP query string parameter, the whole filter expression must be URL-encoded. Example REST request: GET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000 Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List"},{"location":"beacons_list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons list ...","title":"Scopes"},{"location":"beacons_list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p page-size=integer The maximum number of records to return for this request, up to a server-defined upper limit. -p page-token=string A pagination token obtained from a previous request to list beacons. -p project-id=string The project id to list beacons under. If not present then the project credential that made the request is used as the project. Optional. -p q=string Filter query string that supports the following field filters: description: &#34;&lt;string&gt;&#34; For example: description:\"Room 3\" Returns beacons whose description matches tokens in the string \"Room 3\" (not necessarily that exact string). The string must be double-quoted. status: &lt;enum&gt; For example: status:active Returns beacons whose status matches the given value. Values must be one of the Beacon.Status enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. stability: &lt;enum&gt; For example: stability:mobile Returns beacons whose expected stability matches the given value. Values must be one of the Beacon.Stability enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. place_id: &#34;&lt;string&gt;&#34; For example: place_id:\"ChIJVSZzVR8FdkgRXGmmm6SslKw=\" Returns beacons explicitly registered at the given place, expressed as a Place ID obtained from Google Places API . Does not match places inside the given place. Does not consider the beacon's actual location (which may be different from its registered place). Accepts multiple filters that will be combined with OR logic. The place ID must be double-quoted. registration_time [&lt;|&gt;|&lt;=|&gt;=]&lt;integer&gt; For example: registration_time>=1433116800 Returns beacons whose registration time matches the given filter. Supports the operators: <, >, <=, and >=. Timestamp must be expressed as an integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two filters that will be combined with AND logic, to support \"between\" semantics. If more than two are supplied, the latter ones are ignored. lat: &lt;double&gt; lng:&lt;double&gt; radius:&lt;integer&gt; For example: lat:51.1232343 lng:-1.093852 radius:1000 Returns beacons whose registered location is within the given circle. When any of these fields are given, all are required. Latitude and longitude must be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0 respectively. Radius must be an integer number of meters between 10 and 1,000,000 (1000 km). property: &#34;&lt;string&gt;=&lt;string&gt;&#34; For example: property:\"battery-type=CR2032\" Returns beacons which have a property of the given name and value. Supports multiple filters which will be combined with OR logic. The entire name=value string must be double-quoted as one string. attachment_type: &#34;&lt;string&gt;&#34; For example: attachment_type:\"my-namespace/my-type\" Returns beacons having at least one attachment of the given namespaced type. Supports \"any within this namespace\" via the partial wildcard syntax: \"my-namespace/*\". Supports multiple filters which will be combined with OR logic. The string must be double-quoted. indoor_level: &#34;&lt;string&gt;&#34; For example: indoor_level:\"1\" Returns beacons which are located on the given indoor level. Accepts multiple filters that will be combined with OR logic. Multiple filters on the same field are combined with OR logic (except registration_time which is combined with AND logic). Multiple filters on different fields are combined with AND logic. Filters should be separated by spaces. As with any HTTP query string parameter, the whole filter expression must be URL-encoded. Example REST request: GET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000","title":"Optional Method Properties"},{"location":"beacons_list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_register/","text":"Registers a previously unregistered beacon given its advertisedId . These IDs are unique within the system. An ID can be registered only once. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons register ... Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Beacon: advertised-id: id: string type: string beacon-name: string description: string ephemeral-id-registration: beacon-ecdh-public-key: string beacon-identity-key: string initial-clock-value: string initial-eid: string rotation-period-exponent: integer service-ecdh-public-key: string expected-stability: string indoor-level: name: string lat-lng: latitude: number longitude: number place-id: string properties: { string: string } provisioning-key: string status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .advertised-id id=sed The actual beacon identifier, as broadcast by the beacon hardware. Must be base64 encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required. type=amet. Specifies the identifier type. Required. .. beacon-name=takimata Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone, 1 for iBeacon, or 5 for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations. * description=amet. - Free text used to identify and describe the beacon. Maximum length 140 characters. Optional. * ephemeral-id-registration beacon-ecdh-public-key=duo - The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, service_ecdh_public_key must also be populated, and beacon_identity_key must not be. * beacon-identity-key=ipsum - The private key of the beacon. If this field is populated, beacon_ecdh_public_key and service_ecdh_public_key must not be populated. * initial-clock-value=gubergren - The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero. * initial-eid=lorem - An initial ephemeral ID calculated using the clock value submitted as initial_clock_value , and the secret key generated by the Diffie-Hellman key exchange using service_ecdh_public_key and service_ecdh_public_key . This initial EID value will be used by the service to confirm that the key exchange process was successful. * rotation-period-exponent=89 - Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See the spec at github for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds. * service-ecdh-public-key=eos - The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, beacon_ecdh_public_key must also be populated, and beacon_identity_key must not be. .. expected-stability=dolor Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional. indoor-level name=ea The name of this level. ..lat-lng latitude=0.8638300740145545 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.36487300775415 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. place-id=amet The Google Places API Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional. properties=key=duo Properties of the beacon device, for example battery type or firmware version. Optional. the value will be associated with the given key provisioning-key=ipsum Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to GET /v1beta1/beacons/3!beaconId from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself. status=sed Current status of the beacon. Required. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the project the beacon will be registered to. If the project id is not specified then the project making the request is used. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Register"},{"location":"beacons_register/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons register ...","title":"Scopes"},{"location":"beacons_register/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Beacon: advertised-id: id: string type: string beacon-name: string description: string ephemeral-id-registration: beacon-ecdh-public-key: string beacon-identity-key: string initial-clock-value: string initial-eid: string rotation-period-exponent: integer service-ecdh-public-key: string expected-stability: string indoor-level: name: string lat-lng: latitude: number longitude: number place-id: string properties: { string: string } provisioning-key: string status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .advertised-id id=sed The actual beacon identifier, as broadcast by the beacon hardware. Must be base64 encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required. type=amet. Specifies the identifier type. Required. .. beacon-name=takimata Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone, 1 for iBeacon, or 5 for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations. * description=amet. - Free text used to identify and describe the beacon. Maximum length 140 characters. Optional. * ephemeral-id-registration beacon-ecdh-public-key=duo - The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, service_ecdh_public_key must also be populated, and beacon_identity_key must not be. * beacon-identity-key=ipsum - The private key of the beacon. If this field is populated, beacon_ecdh_public_key and service_ecdh_public_key must not be populated. * initial-clock-value=gubergren - The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero. * initial-eid=lorem - An initial ephemeral ID calculated using the clock value submitted as initial_clock_value , and the secret key generated by the Diffie-Hellman key exchange using service_ecdh_public_key and service_ecdh_public_key . This initial EID value will be used by the service to confirm that the key exchange process was successful. * rotation-period-exponent=89 - Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See the spec at github for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds. * service-ecdh-public-key=eos - The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, beacon_ecdh_public_key must also be populated, and beacon_identity_key must not be. .. expected-stability=dolor Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional. indoor-level name=ea The name of this level. ..lat-lng latitude=0.8638300740145545 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.36487300775415 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. place-id=amet The Google Places API Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional. properties=key=duo Properties of the beacon device, for example battery type or firmware version. Optional. the value will be associated with the given key provisioning-key=ipsum Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to GET /v1beta1/beacons/3!beaconId from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself. status=sed Current status of the beacon. Required.","title":"Required Request Value"},{"location":"beacons_register/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"beacons_register/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_register/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the project the beacon will be registered to. If the project id is not specified then the project making the request is used. Optional.","title":"Optional Method Properties"},{"location":"beacons_register/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"beacons_update/","text":"Updates the information about the specified beacon. Any field that you do not populate in the submitted beacon will be permanently erased , so you should follow the \"read, modify, write\" pattern to avoid inadvertently destroying data. Changes to the beacon status via this method will be silently ignored. To update beacon status, use the separate methods on this API for activation, deactivation, and decommissioning. Authenticate using an OAuth access token from a signed-in user with Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons update ... Required Scalar Argument <beacon-name> (string) Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone, 1 for iBeacon, or 5 for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Beacon: advertised-id: id: string type: string beacon-name: string description: string ephemeral-id-registration: beacon-ecdh-public-key: string beacon-identity-key: string initial-clock-value: string initial-eid: string rotation-period-exponent: integer service-ecdh-public-key: string expected-stability: string indoor-level: name: string lat-lng: latitude: number longitude: number place-id: string properties: { string: string } provisioning-key: string status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .advertised-id id=ut The actual beacon identifier, as broadcast by the beacon hardware. Must be base64 encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required. type=gubergren Specifies the identifier type. Required. .. beacon-name=rebum. Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone, 1 for iBeacon, or 5 for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations. * description=est - Free text used to identify and describe the beacon. Maximum length 140 characters. Optional. * ephemeral-id-registration beacon-ecdh-public-key=ipsum - The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, service_ecdh_public_key must also be populated, and beacon_identity_key must not be. * beacon-identity-key=ipsum - The private key of the beacon. If this field is populated, beacon_ecdh_public_key and service_ecdh_public_key must not be populated. * initial-clock-value=est - The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero. * initial-eid=gubergren - An initial ephemeral ID calculated using the clock value submitted as initial_clock_value , and the secret key generated by the Diffie-Hellman key exchange using service_ecdh_public_key and service_ecdh_public_key . This initial EID value will be used by the service to confirm that the key exchange process was successful. * rotation-period-exponent=84 - Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See the spec at github for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds. * service-ecdh-public-key=dolor - The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, beacon_ecdh_public_key must also be populated, and beacon_identity_key must not be. .. expected-stability=lorem Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional. indoor-level name=eos The name of this level. ..lat-lng latitude=0.11853734747270994 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.24638057468506236 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. place-id=sed The Google Places API Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional. properties=key=no Properties of the beacon device, for example battery type or firmware version. Optional. the value will be associated with the given key provisioning-key=stet Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to GET /v1beta1/beacons/3!beaconId from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself. status=kasd Current status of the beacon. Required. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Update"},{"location":"beacons_update/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> beacons update ...","title":"Scopes"},{"location":"beacons_update/#required-scalar-argument","text":"<beacon-name> (string) Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone, 1 for iBeacon, or 5 for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.","title":"Required Scalar Argument"},{"location":"beacons_update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Beacon: advertised-id: id: string type: string beacon-name: string description: string ephemeral-id-registration: beacon-ecdh-public-key: string beacon-identity-key: string initial-clock-value: string initial-eid: string rotation-period-exponent: integer service-ecdh-public-key: string expected-stability: string indoor-level: name: string lat-lng: latitude: number longitude: number place-id: string properties: { string: string } provisioning-key: string status: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .advertised-id id=ut The actual beacon identifier, as broadcast by the beacon hardware. Must be base64 encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required. type=gubergren Specifies the identifier type. Required. .. beacon-name=rebum. Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are 3 for Eddystone, 1 for iBeacon, or 5 for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations. * description=est - Free text used to identify and describe the beacon. Maximum length 140 characters. Optional. * ephemeral-id-registration beacon-ecdh-public-key=ipsum - The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, service_ecdh_public_key must also be populated, and beacon_identity_key must not be. * beacon-identity-key=ipsum - The private key of the beacon. If this field is populated, beacon_ecdh_public_key and service_ecdh_public_key must not be populated. * initial-clock-value=est - The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero. * initial-eid=gubergren - An initial ephemeral ID calculated using the clock value submitted as initial_clock_value , and the secret key generated by the Diffie-Hellman key exchange using service_ecdh_public_key and service_ecdh_public_key . This initial EID value will be used by the service to confirm that the key exchange process was successful. * rotation-period-exponent=84 - Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See the spec at github for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds. * service-ecdh-public-key=dolor - The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, beacon_ecdh_public_key must also be populated, and beacon_identity_key must not be. .. expected-stability=lorem Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional. indoor-level name=eos The name of this level. ..lat-lng latitude=0.11853734747270994 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.24638057468506236 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. place-id=sed The Google Places API Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional. properties=key=no Properties of the beacon device, for example battery type or firmware version. Optional. the value will be associated with the given key provisioning-key=stet Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to GET /v1beta1/beacons/3!beaconId from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself. status=kasd Current status of the beacon. Required.","title":"Required Request Value"},{"location":"beacons_update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"beacons_update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"beacons_update/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the beacon to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.","title":"Optional Method Properties"},{"location":"beacons_update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"methods_get-eidparams/","text":"Gets the Proximity Beacon API's current public key and associated parameters used to initiate the Diffie-Hellman key exchange required to register a beacon that broadcasts the Eddystone-EID format. This key changes periodically; clients may cache it and re-use the same public key to provision and register multiple beacons. However, clients should be prepared to refresh this key when they encounter an error registering an Eddystone-EID beacon. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> methods get-eidparams ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Get Eidparams"},{"location":"methods_get-eidparams/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> methods get-eidparams ...","title":"Scopes"},{"location":"methods_get-eidparams/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"methods_get-eidparams/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"namespaces_list/","text":"Lists all attachment namespaces owned by your Google Developers Console project. Attachment data associated with a beacon must include a namespaced type, and the namespace must be owned by your project. Authenticate using an OAuth access token from a signed-in user with viewer , Is owner or Can edit permissions in the Google Developers Console project. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> namespaces list ... Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id to list namespaces under. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"List"},{"location":"namespaces_list/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> namespaces list ...","title":"Scopes"},{"location":"namespaces_list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"namespaces_list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id to list namespaces under. Optional.","title":"Optional Method Properties"},{"location":"namespaces_list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"namespaces_update/","text":"Updates the information about the specified namespace. Only the namespace visibility can be updated. Scopes You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> namespaces update ... Required Scalar Argument <namespace-name> (string) Resource name of this namespace. Namespaces names have the format: <code>namespaces/<var>namespace</var></code>. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Namespace: namespace-name: string serving-visibility: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . namespace-name=et Resource name of this namespace. Namespaces names have the format: <code>namespaces/<var>namespace</var></code>. serving-visibility=sed Specifies what clients may receive attachments under this namespace via beaconinfo.getforobserved . About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the namespace to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Update"},{"location":"namespaces_update/#scopes","text":"You will need authorization for the https://www.googleapis.com/auth/userlocation.beacon.registry scope to make a valid call. If unset, the scope for this method defaults to https://www.googleapis.com/auth/userlocation.beacon.registry . You can set the scope for this method like this: proximitybeacon1-beta1 --scope <scope> namespaces update ...","title":"Scopes"},{"location":"namespaces_update/#required-scalar-argument","text":"<namespace-name> (string) Resource name of this namespace. Namespaces names have the format: <code>namespaces/<var>namespace</var></code>.","title":"Required Scalar Argument"},{"location":"namespaces_update/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: Namespace: namespace-name: string serving-visibility: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . namespace-name=et Resource name of this namespace. Namespaces names have the format: <code>namespaces/<var>namespace</var></code>. serving-visibility=sed Specifies what clients may receive attachments under this namespace via beaconinfo.getforobserved .","title":"Required Request Value"},{"location":"namespaces_update/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"namespaces_update/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"namespaces_update/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p project-id=string The project id of the namespace to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.","title":"Optional Method Properties"},{"location":"namespaces_update/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}