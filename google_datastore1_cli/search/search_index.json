{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The datastore1 command-line interface (CLI) allows to use most features of the Google datastore service from the comfort of your terminal. By default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's capabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero. If data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools. Everything else about the datastore API can be found at the official documentation site . Installation and Source Code Install the command-line interface with cargo using: cargo install google-datastore1-cli Find the source code on github . Usage This documentation was generated from the datastore API at revision 20240226 . The CLI is at version 5.0.4 . datastore1 [options] projects allocate-ids <project-id> (-r <kv>)... [-p <v>]... [-o <out>] begin-transaction <project-id> (-r <kv>)... [-p <v>]... [-o <out>] commit <project-id> (-r <kv>)... [-p <v>]... [-o <out>] export <project-id> (-r <kv>)... [-p <v>]... [-o <out>] import <project-id> (-r <kv>)... [-p <v>]... [-o <out>] indexes-create <project-id> (-r <kv>)... [-p <v>]... [-o <out>] indexes-delete <project-id> <index-id> [-p <v>]... [-o <out>] indexes-get <project-id> <index-id> [-p <v>]... [-o <out>] indexes-list <project-id> [-p <v>]... [-o <out>] lookup <project-id> (-r <kv>)... [-p <v>]... [-o <out>] operations-cancel <name> [-p <v>]... [-o <out>] operations-delete <name> [-p <v>]... [-o <out>] operations-get <name> [-p <v>]... [-o <out>] operations-list <name> [-p <v>]... [-o <out>] reserve-ids <project-id> (-r <kv>)... [-p <v>]... [-o <out>] rollback <project-id> (-r <kv>)... [-p <v>]... [-o <out>] run-aggregation-query <project-id> (-r <kv>)... [-p <v>]... [-o <out>] run-query <project-id> (-r <kv>)... [-p <v>]... [-o <out>] datastore1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli] Configuration The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with datastore1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs. Authentication Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/datastore1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation . Application Secrets In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/datastore1-secret.json , assuming that the required datastore API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation . Debugging Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. datastore1 --debug <resource> <method> [options] 2>debug.txt .","title":"Home"},{"location":"#installation-and-source-code","text":"Install the command-line interface with cargo using: cargo install google-datastore1-cli Find the source code on github .","title":"Installation and Source Code"},{"location":"#usage","text":"This documentation was generated from the datastore API at revision 20240226 . The CLI is at version 5.0.4 . datastore1 [options] projects allocate-ids <project-id> (-r <kv>)... [-p <v>]... [-o <out>] begin-transaction <project-id> (-r <kv>)... [-p <v>]... [-o <out>] commit <project-id> (-r <kv>)... [-p <v>]... [-o <out>] export <project-id> (-r <kv>)... [-p <v>]... [-o <out>] import <project-id> (-r <kv>)... [-p <v>]... [-o <out>] indexes-create <project-id> (-r <kv>)... [-p <v>]... [-o <out>] indexes-delete <project-id> <index-id> [-p <v>]... [-o <out>] indexes-get <project-id> <index-id> [-p <v>]... [-o <out>] indexes-list <project-id> [-p <v>]... [-o <out>] lookup <project-id> (-r <kv>)... [-p <v>]... [-o <out>] operations-cancel <name> [-p <v>]... [-o <out>] operations-delete <name> [-p <v>]... [-o <out>] operations-get <name> [-p <v>]... [-o <out>] operations-list <name> [-p <v>]... [-o <out>] reserve-ids <project-id> (-r <kv>)... [-p <v>]... [-o <out>] rollback <project-id> (-r <kv>)... [-p <v>]... [-o <out>] run-aggregation-query <project-id> (-r <kv>)... [-p <v>]... [-o <out>] run-query <project-id> (-r <kv>)... [-p <v>]... [-o <out>] datastore1 --help Configuration: [--scope <url>]... Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method. --config-dir <folder> A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation. [default: ~/.google-service-cli]","title":"Usage"},{"location":"#configuration","text":"The program will store all persistent data in the ~/.google-service-cli directory in JSON files prefixed with datastore1- . You can change the directory used to store configuration with the --config-dir flag on a per-invocation basis. More information about the various kinds of persistent data are given in the following paragraphs.","title":"Configuration"},{"location":"#authentication","text":"Most APIs require a user to authenticate any request. If this is the case, the scope determines the set of permissions granted. The granularity of these is usually no more than read-only or full-access . If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a method that is read-only, it will ask only for a read-only scope. You may use the --scope flag to specify a scope directly. All applicable scopes are documented in the respective method's CLI documentation. The first time a scope is used, the user is asked for permission. Follow the instructions given by the CLI to grant permissions, or to decline. If a scope was authenticated by the user, the respective information will be stored as JSON in the configuration directory, e.g. ~/.google-service-cli/datastore1-token-<scope-hash>.json . No manual management of these tokens is necessary. To revoke granted authentication, please refer to the official documentation .","title":"Authentication"},{"location":"#application-secrets","text":"In order to allow any application to use Google services, it will need to be registered using the Google Developer Console . APIs the application may use are then enabled for it one by one. Most APIs can be used for free and have a daily quota. To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI comes with a default application secret that is configured accordingly. This also means that heavy usage all around the world may deplete the daily quota. You can workaround this limitation by putting your own secrets file at this location: ~/.google-service-cli/datastore1-secret.json , assuming that the required datastore API was enabled for it. Such a secret file can be downloaded in the Google Developer Console at APIs & auth -> Credentials -> Download JSON and used as is. Learn more about how to setup Google projects and enable APIs using the official documentation .","title":"Application Secrets"},{"location":"#debugging","text":"Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know what exactly led to a particular issue. This is done by allowing all client-server communication to be output to standard error as-is . The --debug flag will print errors using the Debug representation to standard error. You may consider redirecting standard error into a file for ease of use, e.g. datastore1 --debug <resource> <method> [options] 2>debug.txt .","title":"Debugging"},{"location":"projects_allocate-ids/","text":"Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects allocate-ids ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: AllocateIdsRequest: database-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=et The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Allocate Ids"},{"location":"projects_allocate-ids/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects allocate-ids ...","title":"Scopes"},{"location":"projects_allocate-ids/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_allocate-ids/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: AllocateIdsRequest: database-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=et The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.","title":"Required Request Value"},{"location":"projects_allocate-ids/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_allocate-ids/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_allocate-ids/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_begin-transaction/","text":"Begins a new transaction. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects begin-transaction ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BeginTransactionRequest: database-id: string transaction-options: read-only: read-time: string read-write: previous-transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=magna The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. transaction-options.read-only read-time=no Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=ipsum The transaction identifier of the transaction being retried. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Begin Transaction"},{"location":"projects_begin-transaction/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects begin-transaction ...","title":"Scopes"},{"location":"projects_begin-transaction/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_begin-transaction/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: BeginTransactionRequest: database-id: string transaction-options: read-only: read-time: string read-write: previous-transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=magna The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. transaction-options.read-only read-time=no Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=ipsum The transaction identifier of the transaction being retried.","title":"Required Request Value"},{"location":"projects_begin-transaction/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_begin-transaction/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_begin-transaction/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_commit/","text":"Commits a transaction, optionally creating, deleting or modifying some entities. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects commit ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CommitRequest: database-id: string mode: string single-use-transaction: read-only: read-time: string read-write: previous-transaction: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=voluptua. The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. mode=at The type of commit to perform. Defaults to TRANSACTIONAL . single-use-transaction.read-only read-time=sanctus Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=sed The transaction identifier of the transaction being retried. ... transaction=amet. The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Commit"},{"location":"projects_commit/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects commit ...","title":"Scopes"},{"location":"projects_commit/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_commit/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: CommitRequest: database-id: string mode: string single-use-transaction: read-only: read-time: string read-write: previous-transaction: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=voluptua. The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. mode=at The type of commit to perform. Defaults to TRANSACTIONAL . single-use-transaction.read-only read-time=sanctus Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=sed The transaction identifier of the transaction being retried. ... transaction=amet. The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.","title":"Required Request Value"},{"location":"projects_commit/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_commit/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_commit/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_export/","text":"Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects export ... Required Scalar Argument <project-id> (string) Required. Project ID against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GoogleDatastoreAdminV1ExportEntitiesRequest: entity-filter: kinds: [string] namespace-ids: [string] labels: { string: string } output-url-prefix: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .entity-filter kinds=takimata If empty, then this represents all kinds. Each invocation of this argument appends the given value to the array. namespace-ids=amet. An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. Each invocation of this argument appends the given value to the array. .. labels=key=duo Client-assigned labels. the value will be associated with the given key output-url-prefix=ipsum Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: gs://BUCKET_NAME[/NAMESPACE_PATH] , where BUCKET_NAME is the name of the Cloud Storage bucket and NAMESPACE_PATH is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see Object name considerations . The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Export"},{"location":"projects_export/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects export ...","title":"Scopes"},{"location":"projects_export/#required-scalar-argument","text":"<project-id> (string) Required. Project ID against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_export/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GoogleDatastoreAdminV1ExportEntitiesRequest: entity-filter: kinds: [string] namespace-ids: [string] labels: { string: string } output-url-prefix: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .entity-filter kinds=takimata If empty, then this represents all kinds. Each invocation of this argument appends the given value to the array. namespace-ids=amet. An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. Each invocation of this argument appends the given value to the array. .. labels=key=duo Client-assigned labels. the value will be associated with the given key output-url-prefix=ipsum Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: gs://BUCKET_NAME[/NAMESPACE_PATH] , where BUCKET_NAME is the name of the Cloud Storage bucket and NAMESPACE_PATH is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see Object name considerations . The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict.","title":"Required Request Value"},{"location":"projects_export/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_export/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_export/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_import/","text":"Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects import ... Required Scalar Argument <project-id> (string) Required. Project ID against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GoogleDatastoreAdminV1ImportEntitiesRequest: entity-filter: kinds: [string] namespace-ids: [string] input-url: string labels: { string: string } can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .entity-filter kinds=gubergren If empty, then this represents all kinds. Each invocation of this argument appends the given value to the array. namespace-ids=lorem An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. Each invocation of this argument appends the given value to the array. .. input-url=gubergren Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE , where BUCKET_NAME is the name of the Cloud Storage bucket, NAMESPACE_PATH is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and OVERALL_EXPORT_METADATA_FILE is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see Object name considerations . For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url. labels=key=eos Client-assigned labels. the value will be associated with the given key About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Import"},{"location":"projects_import/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects import ...","title":"Scopes"},{"location":"projects_import/#required-scalar-argument","text":"<project-id> (string) Required. Project ID against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_import/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GoogleDatastoreAdminV1ImportEntitiesRequest: entity-filter: kinds: [string] namespace-ids: [string] input-url: string labels: { string: string } can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .entity-filter kinds=gubergren If empty, then this represents all kinds. Each invocation of this argument appends the given value to the array. namespace-ids=lorem An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. Each invocation of this argument appends the given value to the array. .. input-url=gubergren Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE , where BUCKET_NAME is the name of the Cloud Storage bucket, NAMESPACE_PATH is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and OVERALL_EXPORT_METADATA_FILE is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see Object name considerations . For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url. labels=key=eos Client-assigned labels. the value will be associated with the given key","title":"Required Request Value"},{"location":"projects_import/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_import/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_import/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_indexes-create/","text":"Creates the specified index. A newly created index's initial state is CREATING . On completion of the returned google.longrunning.Operation, the state will be READY . If the index already exists, the call will return an ALREADY_EXISTS status. During index creation, the process could result in an error, in which case the index will move to the ERROR state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-create ... Required Scalar Argument <project-id> (string) Project ID against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GoogleDatastoreAdminV1Index: ancestor: string index-id: string kind: string project-id: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . ancestor=dolor Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED. index-id=ea Output only. The resource ID of the index. kind=ipsum Required. The entity kind to which this index applies. project-id=invidunt Output only. Project ID. state=amet Output only. The state of the index. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Indexes Create"},{"location":"projects_indexes-create/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-create ...","title":"Scopes"},{"location":"projects_indexes-create/#required-scalar-argument","text":"<project-id> (string) Project ID against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_indexes-create/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: GoogleDatastoreAdminV1Index: ancestor: string index-id: string kind: string project-id: string state: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . ancestor=dolor Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED. index-id=ea Output only. The resource ID of the index. kind=ipsum Required. The entity kind to which this index applies. project-id=invidunt Output only. Project ID. state=amet Output only. The state of the index.","title":"Required Request Value"},{"location":"projects_indexes-create/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_indexes-create/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_indexes-create/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_indexes-delete/","text":"Deletes an existing index. An index can only be deleted if it is in a READY or ERROR state. On successful execution of the request, the index will be in a DELETING state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the ERROR state. The process can be recovered by fixing the data that caused the error, followed by calling delete again. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-delete ... Required Scalar Arguments <project-id> (string) Project ID against which to make the request. <index-id> (string) The resource ID of the index to delete. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Indexes Delete"},{"location":"projects_indexes-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-delete ...","title":"Scopes"},{"location":"projects_indexes-delete/#required-scalar-arguments","text":"<project-id> (string) Project ID against which to make the request. <index-id> (string) The resource ID of the index to delete.","title":"Required Scalar Arguments"},{"location":"projects_indexes-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_indexes-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_indexes-get/","text":"Gets an index. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-get ... Required Scalar Arguments <project-id> (string) Project ID against which to make the request. <index-id> (string) The resource ID of the index to get. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Indexes Get"},{"location":"projects_indexes-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-get ...","title":"Scopes"},{"location":"projects_indexes-get/#required-scalar-arguments","text":"<project-id> (string) Project ID against which to make the request. <index-id> (string) The resource ID of the index to get.","title":"Required Scalar Arguments"},{"location":"projects_indexes-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_indexes-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_indexes-list/","text":"Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-list ... Required Scalar Argument <project-id> (string) Project ID against which to make the request. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string No description provided. -p page-size=integer The maximum number of items to return. If zero, then all results will be returned. -p page-token=string The next_page_token value returned from a previous List request, if any. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Indexes List"},{"location":"projects_indexes-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects indexes-list ...","title":"Scopes"},{"location":"projects_indexes-list/#required-scalar-argument","text":"<project-id> (string) Project ID against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_indexes-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_indexes-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string No description provided. -p page-size=integer The maximum number of items to return. If zero, then all results will be returned. -p page-token=string The next_page_token value returned from a previous List request, if any.","title":"Optional Method Properties"},{"location":"projects_indexes-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_lookup/","text":"Looks up entities by key. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects lookup ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LookupRequest: database-id: string read-options: new-transaction: read-only: read-time: string read-write: previous-transaction: string read-consistency: string read-time: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=duo The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. read-options.new-transaction.read-only read-time=ipsum Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=sed The transaction identifier of the transaction being retried. ... read-consistency=ut The non-transactional read consistency to use. read-time=gubergren Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. transaction=rebum. The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Lookup"},{"location":"projects_lookup/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects lookup ...","title":"Scopes"},{"location":"projects_lookup/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_lookup/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: LookupRequest: database-id: string read-options: new-transaction: read-only: read-time: string read-write: previous-transaction: string read-consistency: string read-time: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=duo The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. read-options.new-transaction.read-only read-time=ipsum Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=sed The transaction identifier of the transaction being retried. ... read-consistency=ut The non-transactional read consistency to use. read-time=gubergren Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. transaction=rebum. The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.","title":"Required Request Value"},{"location":"projects_lookup/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_lookup/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_lookup/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_operations-cancel/","text":"Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED . Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED . Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-cancel ... Required Scalar Argument <name> (string) The name of the operation resource to be cancelled. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Operations Cancel"},{"location":"projects_operations-cancel/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-cancel ...","title":"Scopes"},{"location":"projects_operations-cancel/#required-scalar-argument","text":"<name> (string) The name of the operation resource to be cancelled.","title":"Required Scalar Argument"},{"location":"projects_operations-cancel/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_operations-cancel/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_operations-delete/","text":"Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED . Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-delete ... Required Scalar Argument <name> (string) The name of the operation resource to be deleted. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Operations Delete"},{"location":"projects_operations-delete/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-delete ...","title":"Scopes"},{"location":"projects_operations-delete/#required-scalar-argument","text":"<name> (string) The name of the operation resource to be deleted.","title":"Required Scalar Argument"},{"location":"projects_operations-delete/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_operations-delete/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_operations-get/","text":"Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-get ... Required Scalar Argument <name> (string) The name of the operation resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Operations Get"},{"location":"projects_operations-get/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-get ...","title":"Scopes"},{"location":"projects_operations-get/#required-scalar-argument","text":"<name> (string) The name of the operation resource.","title":"Required Scalar Argument"},{"location":"projects_operations-get/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_operations-get/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_operations-list/","text":"Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED . Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-list ... Required Scalar Argument <name> (string) The name of the operation's parent resource. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional Method Properties You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string The standard list filter. -p page-size=integer The standard list page size. -p page-token=string The standard list page token. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Operations List"},{"location":"projects_operations-list/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects operations-list ...","title":"Scopes"},{"location":"projects_operations-list/#required-scalar-argument","text":"<name> (string) The name of the operation's parent resource.","title":"Required Scalar Argument"},{"location":"projects_operations-list/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_operations-list/#optional-method-properties","text":"You may set the following properties to further configure the call. Please note that -p is followed by one or more key-value-pairs, and is called like this -p k1=v1 k2=v2 even though the listing below repeats the -p for completeness. -p filter=string The standard list filter. -p page-size=integer The standard list page size. -p page-token=string The standard list page token.","title":"Optional Method Properties"},{"location":"projects_operations-list/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_reserve-ids/","text":"Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects reserve-ids ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ReserveIdsRequest: database-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=est The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Reserve Ids"},{"location":"projects_reserve-ids/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects reserve-ids ...","title":"Scopes"},{"location":"projects_reserve-ids/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_reserve-ids/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: ReserveIdsRequest: database-id: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=est The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.","title":"Required Request Value"},{"location":"projects_reserve-ids/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_reserve-ids/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_reserve-ids/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_rollback/","text":"Rolls back a transaction. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects rollback ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RollbackRequest: database-id: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=ipsum The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. transaction=ipsum Required. The transaction identifier, returned by a call to Datastore.BeginTransaction. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Rollback"},{"location":"projects_rollback/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects rollback ...","title":"Scopes"},{"location":"projects_rollback/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_rollback/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RollbackRequest: database-id: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=ipsum The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. transaction=ipsum Required. The transaction identifier, returned by a call to Datastore.BeginTransaction.","title":"Required Request Value"},{"location":"projects_rollback/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_rollback/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_rollback/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_run-aggregation-query/","text":"Runs an aggregation query. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects run-aggregation-query ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RunAggregationQueryRequest: aggregation-query: nested-query: end-cursor: string filter: composite-filter: op: string property-filter: op: string property: name: string value: blob-value: string boolean-value: boolean double-value: number entity-value: key: partition-id: database-id: string namespace-id: string project-id: string exclude-from-indexes: boolean geo-point-value: latitude: number longitude: number integer-value: string key-value: partition-id: database-id: string namespace-id: string project-id: string meaning: integer null-value: string string-value: string timestamp-value: string limit: integer offset: integer start-cursor: string database-id: string gql-query: allow-literals: boolean query-string: string partition-id: database-id: string namespace-id: string project-id: string read-options: new-transaction: read-only: read-time: string read-write: previous-transaction: string read-consistency: string read-time: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .aggregation-query.nested-query end-cursor=est An ending point for the query results. Query cursors are returned in query result batches and can only be used to limit the same query . filter.composite-filter op=gubergren The operator for combining multiple filters. ..property-filter op=ea The operator to filter by. property name=dolor A reference to a property. Requires: * MUST be a dot-delimited ( . ) string of segments, where each segment conforms to entity property name limitations. ..value blob-value=lorem A blob value. May have at most 1,000,000 bytes. When exclude_from_indexes is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded. boolean-value=false A boolean value. double-value=0.46093367968783205 A double value. entity-value.key.partition-id database-id=sed If not empty, the ID of the database to which the entities belong. namespace-id=no If not empty, the ID of the namespace to which the entities belong. project-id=stet The ID of the project to which the entities belong. .... exclude-from-indexes=true If the value should be excluded from all indexes including those defined explicitly. geo-point-value latitude=0.6034145300452126 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.8039909988714865 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. integer-value=erat An integer value. key-value.partition-id database-id=sed If not empty, the ID of the database to which the entities belong. namespace-id=duo If not empty, the ID of the namespace to which the entities belong. project-id=dolore The ID of the project to which the entities belong. ... meaning=79 The meaning field should only be populated for backwards compatibility. null-value=voluptua. A null value. string-value=amet. A UTF-8 encoded string value. When exclude_from_indexes is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes. timestamp-value=consetetur A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down. .... limit=9 The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified. offset=52 The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified. start-cursor=et A starting point for the query results. Query cursors are returned in query result batches and can only be used to continue the same query . ... database-id=et The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. gql-query allow-literals=false When false, the query string must not contain any literals and instead must bind all values. For example, SELECT * FROM Kind WHERE a = &#39;string literal&#39; is not allowed, while SELECT * FROM Kind WHERE a = @value is. query-string=stet A string of the format described here . ..partition-id database-id=dolor If not empty, the ID of the database to which the entities belong. namespace-id=duo If not empty, the ID of the namespace to which the entities belong. project-id=vero The ID of the project to which the entities belong. ..read-options.new-transaction.read-only read-time=vero Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=invidunt The transaction identifier of the transaction being retried. ... read-consistency=stet The non-transactional read consistency to use. read-time=vero Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. transaction=elitr The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Run Aggregation Query"},{"location":"projects_run-aggregation-query/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects run-aggregation-query ...","title":"Scopes"},{"location":"projects_run-aggregation-query/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_run-aggregation-query/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RunAggregationQueryRequest: aggregation-query: nested-query: end-cursor: string filter: composite-filter: op: string property-filter: op: string property: name: string value: blob-value: string boolean-value: boolean double-value: number entity-value: key: partition-id: database-id: string namespace-id: string project-id: string exclude-from-indexes: boolean geo-point-value: latitude: number longitude: number integer-value: string key-value: partition-id: database-id: string namespace-id: string project-id: string meaning: integer null-value: string string-value: string timestamp-value: string limit: integer offset: integer start-cursor: string database-id: string gql-query: allow-literals: boolean query-string: string partition-id: database-id: string namespace-id: string project-id: string read-options: new-transaction: read-only: read-time: string read-write: previous-transaction: string read-consistency: string read-time: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r .aggregation-query.nested-query end-cursor=est An ending point for the query results. Query cursors are returned in query result batches and can only be used to limit the same query . filter.composite-filter op=gubergren The operator for combining multiple filters. ..property-filter op=ea The operator to filter by. property name=dolor A reference to a property. Requires: * MUST be a dot-delimited ( . ) string of segments, where each segment conforms to entity property name limitations. ..value blob-value=lorem A blob value. May have at most 1,000,000 bytes. When exclude_from_indexes is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded. boolean-value=false A boolean value. double-value=0.46093367968783205 A double value. entity-value.key.partition-id database-id=sed If not empty, the ID of the database to which the entities belong. namespace-id=no If not empty, the ID of the namespace to which the entities belong. project-id=stet The ID of the project to which the entities belong. .... exclude-from-indexes=true If the value should be excluded from all indexes including those defined explicitly. geo-point-value latitude=0.6034145300452126 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.8039909988714865 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. integer-value=erat An integer value. key-value.partition-id database-id=sed If not empty, the ID of the database to which the entities belong. namespace-id=duo If not empty, the ID of the namespace to which the entities belong. project-id=dolore The ID of the project to which the entities belong. ... meaning=79 The meaning field should only be populated for backwards compatibility. null-value=voluptua. A null value. string-value=amet. A UTF-8 encoded string value. When exclude_from_indexes is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes. timestamp-value=consetetur A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down. .... limit=9 The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified. offset=52 The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified. start-cursor=et A starting point for the query results. Query cursors are returned in query result batches and can only be used to continue the same query . ... database-id=et The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. gql-query allow-literals=false When false, the query string must not contain any literals and instead must bind all values. For example, SELECT * FROM Kind WHERE a = &#39;string literal&#39; is not allowed, while SELECT * FROM Kind WHERE a = @value is. query-string=stet A string of the format described here . ..partition-id database-id=dolor If not empty, the ID of the database to which the entities belong. namespace-id=duo If not empty, the ID of the namespace to which the entities belong. project-id=vero The ID of the project to which the entities belong. ..read-options.new-transaction.read-only read-time=vero Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=invidunt The transaction identifier of the transaction being retried. ... read-consistency=stet The non-transactional read consistency to use. read-time=vero Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. transaction=elitr The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.","title":"Required Request Value"},{"location":"projects_run-aggregation-query/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_run-aggregation-query/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_run-aggregation-query/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"},{"location":"projects_run-query/","text":"Queries for entities. Scopes You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects run-query ... Required Scalar Argument <project-id> (string) Required. The ID of the project against which to make the request. Required Request Value The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RunQueryRequest: database-id: string gql-query: allow-literals: boolean query-string: string partition-id: database-id: string namespace-id: string project-id: string query: end-cursor: string filter: composite-filter: op: string property-filter: op: string property: name: string value: blob-value: string boolean-value: boolean double-value: number entity-value: key: partition-id: database-id: string namespace-id: string project-id: string exclude-from-indexes: boolean geo-point-value: latitude: number longitude: number integer-value: string key-value: partition-id: database-id: string namespace-id: string project-id: string meaning: integer null-value: string string-value: string timestamp-value: string limit: integer offset: integer start-cursor: string read-options: new-transaction: read-only: read-time: string read-write: previous-transaction: string read-consistency: string read-time: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=lorem The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. gql-query allow-literals=true When false, the query string must not contain any literals and instead must bind all values. For example, SELECT * FROM Kind WHERE a = &#39;string literal&#39; is not allowed, while SELECT * FROM Kind WHERE a = @value is. query-string=ipsum A string of the format described here . ..partition-id database-id=accusam If not empty, the ID of the database to which the entities belong. namespace-id=takimata If not empty, the ID of the namespace to which the entities belong. project-id=consetetur The ID of the project to which the entities belong. ..query end-cursor=voluptua. An ending point for the query results. Query cursors are returned in query result batches and can only be used to limit the same query . filter.composite-filter op=et The operator for combining multiple filters. ..property-filter op=erat The operator to filter by. property name=consetetur A reference to a property. Requires: * MUST be a dot-delimited ( . ) string of segments, where each segment conforms to entity property name limitations. ..value blob-value=amet. A blob value. May have at most 1,000,000 bytes. When exclude_from_indexes is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded. boolean-value=true A boolean value. double-value=0.8484298131719972 A double value. entity-value.key.partition-id database-id=et If not empty, the ID of the database to which the entities belong. namespace-id=accusam If not empty, the ID of the namespace to which the entities belong. project-id=voluptua. The ID of the project to which the entities belong. .... exclude-from-indexes=false If the value should be excluded from all indexes including those defined explicitly. geo-point-value latitude=0.7753213022845796 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.05043422241780038 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. integer-value=invidunt An integer value. key-value.partition-id database-id=no If not empty, the ID of the database to which the entities belong. namespace-id=est If not empty, the ID of the namespace to which the entities belong. project-id=at The ID of the project to which the entities belong. ... meaning=58 The meaning field should only be populated for backwards compatibility. null-value=sit A null value. string-value=et A UTF-8 encoded string value. When exclude_from_indexes is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes. timestamp-value=tempor A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down. .... limit=69 The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified. offset=96 The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified. start-cursor=et A starting point for the query results. Query cursors are returned in query result batches and can only be used to continue the same query . ..read-options.new-transaction.read-only read-time=sanctus Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=lorem The transaction identifier of the transaction being retried. ... read-consistency=est The non-transactional read consistency to use. read-time=sed Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. transaction=diam The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction. About Cursors The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up. Optional Output Flags The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output. Optional General Properties The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Run Query"},{"location":"projects_run-query/#scopes","text":"You will need authorization for at least one of the following scopes to make a valid call: https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/datastore If unset, the scope for this method defaults to https://www.googleapis.com/auth/cloud-platform . You can set the scope for this method like this: datastore1 --scope <scope> projects run-query ...","title":"Scopes"},{"location":"projects_run-query/#required-scalar-argument","text":"<project-id> (string) Required. The ID of the project against which to make the request.","title":"Required Scalar Argument"},{"location":"projects_run-query/#required-request-value","text":"The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure. In the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely. For example, a structure like this: RunQueryRequest: database-id: string gql-query: allow-literals: boolean query-string: string partition-id: database-id: string namespace-id: string project-id: string query: end-cursor: string filter: composite-filter: op: string property-filter: op: string property: name: string value: blob-value: string boolean-value: boolean double-value: number entity-value: key: partition-id: database-id: string namespace-id: string project-id: string exclude-from-indexes: boolean geo-point-value: latitude: number longitude: number integer-value: string key-value: partition-id: database-id: string namespace-id: string project-id: string meaning: integer null-value: string string-value: string timestamp-value: string limit: integer offset: integer start-cursor: string read-options: new-transaction: read-only: read-time: string read-write: previous-transaction: string read-consistency: string read-time: string transaction: string can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time. -r . database-id=lorem The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. gql-query allow-literals=true When false, the query string must not contain any literals and instead must bind all values. For example, SELECT * FROM Kind WHERE a = &#39;string literal&#39; is not allowed, while SELECT * FROM Kind WHERE a = @value is. query-string=ipsum A string of the format described here . ..partition-id database-id=accusam If not empty, the ID of the database to which the entities belong. namespace-id=takimata If not empty, the ID of the namespace to which the entities belong. project-id=consetetur The ID of the project to which the entities belong. ..query end-cursor=voluptua. An ending point for the query results. Query cursors are returned in query result batches and can only be used to limit the same query . filter.composite-filter op=et The operator for combining multiple filters. ..property-filter op=erat The operator to filter by. property name=consetetur A reference to a property. Requires: * MUST be a dot-delimited ( . ) string of segments, where each segment conforms to entity property name limitations. ..value blob-value=amet. A blob value. May have at most 1,000,000 bytes. When exclude_from_indexes is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded. boolean-value=true A boolean value. double-value=0.8484298131719972 A double value. entity-value.key.partition-id database-id=et If not empty, the ID of the database to which the entities belong. namespace-id=accusam If not empty, the ID of the namespace to which the entities belong. project-id=voluptua. The ID of the project to which the entities belong. .... exclude-from-indexes=false If the value should be excluded from all indexes including those defined explicitly. geo-point-value latitude=0.7753213022845796 The latitude in degrees. It must be in the range [-90.0, +90.0]. longitude=0.05043422241780038 The longitude in degrees. It must be in the range [-180.0, +180.0]. .. integer-value=invidunt An integer value. key-value.partition-id database-id=no If not empty, the ID of the database to which the entities belong. namespace-id=est If not empty, the ID of the namespace to which the entities belong. project-id=at The ID of the project to which the entities belong. ... meaning=58 The meaning field should only be populated for backwards compatibility. null-value=sit A null value. string-value=et A UTF-8 encoded string value. When exclude_from_indexes is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes. timestamp-value=tempor A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down. .... limit=69 The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified. offset=96 The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified. start-cursor=et A starting point for the query results. Query cursors are returned in query result batches and can only be used to continue the same query . ..read-options.new-transaction.read-only read-time=sanctus Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. ..read-write previous-transaction=lorem The transaction identifier of the transaction being retried. ... read-consistency=est The non-transactional read consistency to use. read-time=sed Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. transaction=diam The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.","title":"Required Request Value"},{"location":"projects_run-query/#about-cursors","text":"The cursor position is key to comfortably set complex nested structures. The following rules apply: The cursor position is always set relative to the current one, unless the field name starts with the . character. Fields can be nested such as in -r f.s.o . The cursor position is set relative to the top-level structure if it starts with . , e.g. -r .s.s You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify -r struct.sub_struct=bar . You can move the cursor one level up by using .. . Each additional . moves it up one additional level. E.g. ... would go three levels up.","title":"About Cursors"},{"location":"projects_run-query/#optional-output-flags","text":"The method's return value a JSON encoded structure, which will be written to standard output by default. -o out out specifies the destination to which to write the server's result to. It will be a JSON-encoded structure. The destination may be - to indicate standard output, or a filepath that is to contain the received bytes. If unset, it defaults to standard output.","title":"Optional Output Flags"},{"location":"projects_run-query/#optional-general-properties","text":"The following properties can configure any call, and are not specific to this method. -p $-xgafv=string V1 error format. -p access-token=string OAuth access token. -p alt=string Data format for response. -p callback=string JSONP -p fields=string Selector specifying which fields to include in a partial response. -p key=string API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. -p oauth-token=string OAuth 2.0 token for the current user. -p pretty-print=boolean Returns response with indentations and line breaks. -p quota-user=string Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. -p upload-type=string Legacy upload protocol for media (e.g. \"media\", \"multipart\"). -p upload-protocol=string Upload protocol for media (e.g. \"raw\", \"multipart\").","title":"Optional General Properties"}]}