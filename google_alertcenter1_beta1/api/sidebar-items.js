initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["Alert","An alert affecting a customer."],["AlertBatchDeleteCall","Performs batch delete operation on alerts."],["AlertBatchUndeleteCall","Performs batch undelete operation on alerts."],["AlertCenter","Central instance to access all AlertCenter related resource activities"],["AlertDeleteCall","Marks the specified alert for deletion. An alert that has been marked for deletion is removed from Alert Center after 30 days. Marking an alert for deletion has no effect on an alert which has already been marked for deletion. Attempting to mark a nonexistent alert for deletion results in a `NOT_FOUND` error."],["AlertFeedback","A customer feedback about an alert."],["AlertFeedbackCreateCall","Creates new feedback for an alert. Attempting to create a feedback for a non-existent alert returns `NOT_FOUND` error. Attempting to create a feedback for an alert that is marked for deletion returns `FAILED_PRECONDITION' error."],["AlertFeedbackListCall","Lists all the feedback for an alert. Attempting to list feedbacks for a non-existent alert returns `NOT_FOUND` error."],["AlertGetCall","Gets the specified alert. Attempting to get a nonexistent alert returns `NOT_FOUND` error."],["AlertGetMetadataCall","Returns the metadata of an alert. Attempting to get metadata for a non-existent alert returns `NOT_FOUND` error."],["AlertListCall","Lists the alerts."],["AlertMetadata","An alert metadata."],["AlertMethods","A builder providing access to all methods supported on alert resources. It is not used directly, but through the `AlertCenter` hub."],["AlertUndeleteCall","Restores, or \"undeletes\", an alert that was marked for deletion within the past 30 days. Attempting to undelete an alert which was marked for deletion over 30 days ago (which has been removed from the Alert Center database) or a nonexistent alert returns a `NOT_FOUND` error. Attempting to undelete an alert which has not been marked for deletion has no effect."],["BatchDeleteAlertsRequest","A request to perform batch delete on alerts."],["BatchDeleteAlertsResponse","Response to batch delete operation on alerts."],["BatchUndeleteAlertsRequest","A request to perform batch undelete on alerts."],["BatchUndeleteAlertsResponse","Response to batch undelete operation on alerts."],["CloudPubsubTopic","A reference to a Cloud Pubsub topic. To register for notifications, the owner of the topic must grant `alerts-api-push-notifications@system.gserviceaccount.com` the `projects.topics.publish` permission."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["ListAlertFeedbackResponse","Response message for an alert feedback listing request."],["ListAlertsResponse","Response message for an alert listing request."],["MethodGetSettingCall","Returns customer-level settings."],["MethodMethods","A builder providing access to all free methods, which are not associated with a particular resource. It is not used directly, but through the `AlertCenter` hub."],["MethodUpdateSettingCall","Updates the customer-level settings."],["Notification","Settings for callback notifications. For more details see Google Workspace Alert Notification."],["Settings","Customer-level settings."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the API Design Guide."],["UndeleteAlertRequest","A request to undelete a specific alert that was marked for deletion."]]});