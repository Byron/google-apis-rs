initSidebarItems({"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"struct":[["Account","Identifies an account and how to log into it."],["AndroidDevice","A single Android device."],["AndroidDeviceCatalog","The currently supported Android devices."],["AndroidDeviceList","A list of Android device configurations in which the test is to be executed."],["AndroidInstrumentationTest","A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests."],["AndroidMatrix","A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored."],["AndroidModel","A description of an Android device tests may be run on."],["AndroidRoboTest","A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes. Next tag: 30"],["AndroidRuntimeConfiguration","Android configuration that can be selected at the time a test is run."],["AndroidTestLoop","A test of an Android Application with a Test Loop. The intent \\ will be implicitly added, since Games is the only user of this api, for the time being."],["AndroidVersion","A version of the Android OS."],["Apk","An Android package file to install."],["ApkDetail","Android application details based on application manifest and apk archive contents."],["ApkManifest","An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html"],["AppBundle","An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles."],["ApplicationDetailServiceGetApkDetailCall","Gets the details of an Android application APK."],["ApplicationDetailServiceMethods","A builder providing access to all methods supported on applicationDetailService resources. It is not used directly, but through the `Testing` hub."],["CancelTestMatrixResponse","Response containing the current state of the specified test matrix."],["ClientInfo","Information about the client which invoked the test."],["ClientInfoDetail","Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}."],["Date","Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`."],["DeviceFile","A single device file description."],["DeviceIpBlock","A single device IP block"],["DeviceIpBlockCatalog","List of IP blocks used by the Firebase Test Lab"],["Distribution","Data about the relative number of devices running a given configuration of the Android platform."],["Environment","The environment in which the test is run."],["EnvironmentMatrix","The matrix of environments in which the test is to be executed."],["EnvironmentVariable","A key-value pair passed as an environment variable to the test."],["FileReference","A reference to a file, used for user inputs."],["GetApkDetailsResponse","Response containing the details of the specified Android application APK."],["GoogleAuto","Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities."],["GoogleCloudStorage","A storage location within Google cloud storage (GCS)."],["IntentFilter","The section of an tag. https://developer.android.com/guide/topics/manifest/intent-filter-element.html"],["IosDevice","A single iOS device."],["IosDeviceCatalog","The currently supported iOS devices."],["IosDeviceFile","A file or directory to install on the device before the test starts."],["IosDeviceList","A list of iOS device configurations in which the test is to be executed."],["IosModel","A description of an iOS device tests may be run on."],["IosRuntimeConfiguration","iOS configuration that can be selected at the time a test is run."],["IosTestLoop","A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially."],["IosTestSetup","A description of how to set up an iOS device prior to running the test."],["IosVersion","An iOS version."],["IosXcTest","A test of an iOS application that uses the XCTest framework. Xcode supports the option to \"build for testing\", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests."],["LauncherActivityIntent","Specifies an intent that starts the main launcher activity."],["Locale","A location/region designation for language."],["ManualSharding","Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid."],["NetworkConfiguration","There is no detailed description."],["NetworkConfigurationCatalog","There is no detailed description."],["ObbFile","An opaque binary blob file to install on the device before the test starts."],["Orientation","Screen orientation of the device."],["ProjectMethods","A builder providing access to all methods supported on project resources. It is not used directly, but through the `Testing` hub."],["ProjectTestMatriceCancelCall","Cancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist"],["ProjectTestMatriceCreateCall","Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices."],["ProjectTestMatriceGetCall","Checks the status of a test matrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist"],["ProvidedSoftwareCatalog","The currently provided software environment on the devices under test."],["RegularFile","A file or directory to install on the device before the test starts."],["ResultStorage","Locations where the results of running the test are stored."],["RoboDirective","Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click."],["RoboStartingIntent","Message for specifying the start activities to crawl."],["Shard","Output only. Details about the shard."],["ShardingOption","Options for enabling sharding."],["StartActivityIntent","A starting intent specified by an action, uri, and categories."],["SystraceSetup","There is no detailed description."],["TestDetails","Additional details about the progress of the running test."],["TestEnvironmentCatalog","A description of a test environment."],["TestEnvironmentCatalogGetCall","Gets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the environment type does not exist - INTERNAL - if an internal error occurred"],["TestEnvironmentCatalogMethods","A builder providing access to all methods supported on testEnvironmentCatalog resources. It is not used directly, but through the `Testing` hub."],["TestExecution","A single test executed in a single environment."],["TestMatrix","TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome."],["TestSetup","A description of how to set up the Android device prior to running the test."],["TestSpecification","A description of how to run the test."],["TestTargetsForShard","Test targets for a shard."],["Testing","Central instance to access all Testing related resource activities"],["ToolResultsExecution","Represents a tool results execution resource. This has the results of a TestMatrix."],["ToolResultsHistory","Represents a tool results history resource."],["ToolResultsStep","Represents a tool results step resource. This has the results of a TestExecution."],["TrafficRule","Network emulation parameters."],["UniformSharding","Uniformly shards test cases given a total number of shards. For Instrumentation test, it will be translated to \"-e numShard\" \"-e shardIndex\" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying these sharding arguments via environment_variables is invalid."],["XcodeVersion","An Xcode version that an iOS version is compatible with."]]});