initSidebarItems({"constant":[["BCRYPT","Bcrypt character set"],["BINHEX","BinHex character set"],["CRYPT","As per `crypt(3)` requirements"],["IMAP_MUTF7","IMAP modified UTF-7 requirements"],["STANDARD","Standard character set with padding."],["STANDARD_NO_PAD","Standard character set without padding."],["URL_SAFE","URL-safe character set with padding"],["URL_SAFE_NO_PAD","URL-safe character set without padding"]],"enum":[["CharacterSet","Available encoding character sets"],["DecodeError","Errors that can occur while decoding."]],"fn":[["decode","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`."],["decode_config","Decode from string reference as octets. Returns a Result containing a Vec."],["decode_config_buf","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ()."],["decode_config_slice","Decode the input into the provided output slice."],["encode","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`."],["encode_config","Encode arbitrary octets as base64. Returns a String."],["encode_config_buf","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed."],["encode_config_slice","Encode arbitrary octets as base64. Writes into the supplied output buffer."]],"mod":[["display","Enables base64'd output anywhere you might use a `Display` implementation, like a format string."],["read","Implementations of `io::Read` to transparently decode base64."],["write","Implementations of `io::Write` to transparently handle base64."]],"struct":[["Config","Contains configuration parameters for base64 encoding"]]});